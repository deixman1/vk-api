<?php
/**
 * MessagesChatSettingsPermissions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VK api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.131
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VkApi\Model\Message;

use ArrayAccess;
use InvalidArgumentException;
use JsonSerializable;
use VkApi\Lib\ObjectSerializer;
use VkApi\Model\ModelInterface;

/**
 * MessagesChatSettingsPermissions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MessagesChatSettingsPermissions implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'messages_chat_settings_permissions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invite' => 'string',
        'change_info' => 'string',
        'change_pin' => 'string',
        'use_mass_mentions' => 'string',
        'see_invite_link' => 'string',
        'call' => 'string',
        'change_admins' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'invite' => null,
        'change_info' => null,
        'change_pin' => null,
        'use_mass_mentions' => null,
        'see_invite_link' => null,
        'call' => null,
        'change_admins' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'invite' => false,
		'change_info' => false,
		'change_pin' => false,
		'use_mass_mentions' => false,
		'see_invite_link' => false,
		'call' => false,
		'change_admins' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invite' => 'invite',
        'change_info' => 'change_info',
        'change_pin' => 'change_pin',
        'use_mass_mentions' => 'use_mass_mentions',
        'see_invite_link' => 'see_invite_link',
        'call' => 'call',
        'change_admins' => 'change_admins'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invite' => 'setInvite',
        'change_info' => 'setChangeInfo',
        'change_pin' => 'setChangePin',
        'use_mass_mentions' => 'setUseMassMentions',
        'see_invite_link' => 'setSeeInviteLink',
        'call' => 'setCall',
        'change_admins' => 'setChangeAdmins'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invite' => 'getInvite',
        'change_info' => 'getChangeInfo',
        'change_pin' => 'getChangePin',
        'use_mass_mentions' => 'getUseMassMentions',
        'see_invite_link' => 'getSeeInviteLink',
        'call' => 'getCall',
        'change_admins' => 'getChangeAdmins'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const INVITE_OWNER = 'owner';
    public const INVITE_OWNER_AND_ADMINS = 'owner_and_admins';
    public const INVITE_ALL = 'all';
    public const CHANGE_INFO_OWNER = 'owner';
    public const CHANGE_INFO_OWNER_AND_ADMINS = 'owner_and_admins';
    public const CHANGE_INFO_ALL = 'all';
    public const CHANGE_PIN_OWNER = 'owner';
    public const CHANGE_PIN_OWNER_AND_ADMINS = 'owner_and_admins';
    public const CHANGE_PIN_ALL = 'all';
    public const USE_MASS_MENTIONS_OWNER = 'owner';
    public const USE_MASS_MENTIONS_OWNER_AND_ADMINS = 'owner_and_admins';
    public const USE_MASS_MENTIONS_ALL = 'all';
    public const SEE_INVITE_LINK_OWNER = 'owner';
    public const SEE_INVITE_LINK_OWNER_AND_ADMINS = 'owner_and_admins';
    public const SEE_INVITE_LINK_ALL = 'all';
    public const CALL_OWNER = 'owner';
    public const CALL_OWNER_AND_ADMINS = 'owner_and_admins';
    public const CALL_ALL = 'all';
    public const CHANGE_ADMINS_OWNER = 'owner';
    public const CHANGE_ADMINS_OWNER_AND_ADMINS = 'owner_and_admins';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInviteAllowableValues()
    {
        return [
            self::INVITE_OWNER,
            self::INVITE_OWNER_AND_ADMINS,
            self::INVITE_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChangeInfoAllowableValues()
    {
        return [
            self::CHANGE_INFO_OWNER,
            self::CHANGE_INFO_OWNER_AND_ADMINS,
            self::CHANGE_INFO_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChangePinAllowableValues()
    {
        return [
            self::CHANGE_PIN_OWNER,
            self::CHANGE_PIN_OWNER_AND_ADMINS,
            self::CHANGE_PIN_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseMassMentionsAllowableValues()
    {
        return [
            self::USE_MASS_MENTIONS_OWNER,
            self::USE_MASS_MENTIONS_OWNER_AND_ADMINS,
            self::USE_MASS_MENTIONS_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSeeInviteLinkAllowableValues()
    {
        return [
            self::SEE_INVITE_LINK_OWNER,
            self::SEE_INVITE_LINK_OWNER_AND_ADMINS,
            self::SEE_INVITE_LINK_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCallAllowableValues()
    {
        return [
            self::CALL_OWNER,
            self::CALL_OWNER_AND_ADMINS,
            self::CALL_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChangeAdminsAllowableValues()
    {
        return [
            self::CHANGE_ADMINS_OWNER,
            self::CHANGE_ADMINS_OWNER_AND_ADMINS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('invite', $data ?? [], null);
        $this->setIfExists('change_info', $data ?? [], null);
        $this->setIfExists('change_pin', $data ?? [], null);
        $this->setIfExists('use_mass_mentions', $data ?? [], null);
        $this->setIfExists('see_invite_link', $data ?? [], null);
        $this->setIfExists('call', $data ?? [], null);
        $this->setIfExists('change_admins', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getInviteAllowableValues();
        if (!is_null($this->container['invite']) && !in_array($this->container['invite'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invite', must be one of '%s'",
                $this->container['invite'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChangeInfoAllowableValues();
        if (!is_null($this->container['change_info']) && !in_array($this->container['change_info'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'change_info', must be one of '%s'",
                $this->container['change_info'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChangePinAllowableValues();
        if (!is_null($this->container['change_pin']) && !in_array($this->container['change_pin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'change_pin', must be one of '%s'",
                $this->container['change_pin'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUseMassMentionsAllowableValues();
        if (!is_null($this->container['use_mass_mentions']) && !in_array($this->container['use_mass_mentions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'use_mass_mentions', must be one of '%s'",
                $this->container['use_mass_mentions'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSeeInviteLinkAllowableValues();
        if (!is_null($this->container['see_invite_link']) && !in_array($this->container['see_invite_link'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'see_invite_link', must be one of '%s'",
                $this->container['see_invite_link'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCallAllowableValues();
        if (!is_null($this->container['call']) && !in_array($this->container['call'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'call', must be one of '%s'",
                $this->container['call'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChangeAdminsAllowableValues();
        if (!is_null($this->container['change_admins']) && !in_array($this->container['change_admins'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'change_admins', must be one of '%s'",
                $this->container['change_admins'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invite
     *
     * @return string|null
     */
    public function getInvite()
    {
        return $this->container['invite'];
    }

    /**
     * Sets invite
     *
     * @param string|null $invite Who can invite users to chat
     *
     * @return self
     */
    public function setInvite($invite)
    {
        $allowedValues = $this->getInviteAllowableValues();
        if (!is_null($invite) && !in_array($invite, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invite', must be one of '%s'",
                    $invite,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($invite)) {
            throw new InvalidArgumentException('non-nullable invite cannot be null');
        }

        $this->container['invite'] = $invite;

        return $this;
    }

    /**
     * Gets change_info
     *
     * @return string|null
     */
    public function getChangeInfo()
    {
        return $this->container['change_info'];
    }

    /**
     * Sets change_info
     *
     * @param string|null $change_info Who can change chat info
     *
     * @return self
     */
    public function setChangeInfo($change_info)
    {
        $allowedValues = $this->getChangeInfoAllowableValues();
        if (!is_null($change_info) && !in_array($change_info, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'change_info', must be one of '%s'",
                    $change_info,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($change_info)) {
            throw new InvalidArgumentException('non-nullable change_info cannot be null');
        }

        $this->container['change_info'] = $change_info;

        return $this;
    }

    /**
     * Gets change_pin
     *
     * @return string|null
     */
    public function getChangePin()
    {
        return $this->container['change_pin'];
    }

    /**
     * Sets change_pin
     *
     * @param string|null $change_pin Who can change pinned message
     *
     * @return self
     */
    public function setChangePin($change_pin)
    {
        $allowedValues = $this->getChangePinAllowableValues();
        if (!is_null($change_pin) && !in_array($change_pin, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'change_pin', must be one of '%s'",
                    $change_pin,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($change_pin)) {
            throw new InvalidArgumentException('non-nullable change_pin cannot be null');
        }

        $this->container['change_pin'] = $change_pin;

        return $this;
    }

    /**
     * Gets use_mass_mentions
     *
     * @return string|null
     */
    public function getUseMassMentions()
    {
        return $this->container['use_mass_mentions'];
    }

    /**
     * Sets use_mass_mentions
     *
     * @param string|null $use_mass_mentions Who can use mass mentions
     *
     * @return self
     */
    public function setUseMassMentions($use_mass_mentions)
    {
        $allowedValues = $this->getUseMassMentionsAllowableValues();
        if (!is_null($use_mass_mentions) && !in_array($use_mass_mentions, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'use_mass_mentions', must be one of '%s'",
                    $use_mass_mentions,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($use_mass_mentions)) {
            throw new InvalidArgumentException('non-nullable use_mass_mentions cannot be null');
        }

        $this->container['use_mass_mentions'] = $use_mass_mentions;

        return $this;
    }

    /**
     * Gets see_invite_link
     *
     * @return string|null
     */
    public function getSeeInviteLink()
    {
        return $this->container['see_invite_link'];
    }

    /**
     * Sets see_invite_link
     *
     * @param string|null $see_invite_link Who can see invite link
     *
     * @return self
     */
    public function setSeeInviteLink($see_invite_link)
    {
        $allowedValues = $this->getSeeInviteLinkAllowableValues();
        if (!is_null($see_invite_link) && !in_array($see_invite_link, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'see_invite_link', must be one of '%s'",
                    $see_invite_link,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($see_invite_link)) {
            throw new InvalidArgumentException('non-nullable see_invite_link cannot be null');
        }

        $this->container['see_invite_link'] = $see_invite_link;

        return $this;
    }

    /**
     * Gets call
     *
     * @return string|null
     */
    public function getCall()
    {
        return $this->container['call'];
    }

    /**
     * Sets call
     *
     * @param string|null $call Who can make calls
     *
     * @return self
     */
    public function setCall($call)
    {
        $allowedValues = $this->getCallAllowableValues();
        if (!is_null($call) && !in_array($call, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'call', must be one of '%s'",
                    $call,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($call)) {
            throw new InvalidArgumentException('non-nullable call cannot be null');
        }

        $this->container['call'] = $call;

        return $this;
    }

    /**
     * Gets change_admins
     *
     * @return string|null
     */
    public function getChangeAdmins()
    {
        return $this->container['change_admins'];
    }

    /**
     * Sets change_admins
     *
     * @param string|null $change_admins Who can change admins
     *
     * @return self
     */
    public function setChangeAdmins($change_admins)
    {
        $allowedValues = $this->getChangeAdminsAllowableValues();
        if (!is_null($change_admins) && !in_array($change_admins, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'change_admins', must be one of '%s'",
                    $change_admins,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($change_admins)) {
            throw new InvalidArgumentException('non-nullable change_admins cannot be null');
        }

        $this->container['change_admins'] = $change_admins;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


