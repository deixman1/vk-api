<?php
/**
 * MessagesMessageAttachment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VK api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.131
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VkApi\Model\Message;

use ArrayAccess;
use InvalidArgumentException;
use JsonSerializable;
use VkApi\Lib\ObjectSerializer;
use VkApi\Model\ModelInterface;

/**
 * MessagesMessageAttachment Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MessagesMessageAttachment implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'messages_message_attachment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'audio' => '\OpenAPI\Client\Model\AudioAudio',
        'audio_message' => 'MessagesAudioMessage',
        'call' => '\OpenAPI\Client\Model\CallsCall',
        'doc' => '\OpenAPI\Client\Model\DocsDoc',
        'gift' => '\OpenAPI\Client\Model\GiftsLayout',
        'graffiti' => 'MessagesGraffiti',
        'market' => 'MarketMarketItem',
        'market_market_album' => 'MarketMarketAlbum',
        'photo' => '\OpenAPI\Client\Model\PhotosPhoto',
        'sticker' => '\OpenAPI\Client\Model\BaseSticker',
        'story' => '\OpenAPI\Client\Model\StoriesStory',
        'type' => 'MessagesMessageAttachmentType',
        'video' => '\OpenAPI\Client\Model\VideoVideoFull',
        'wall_reply' => '\OpenAPI\Client\Model\WallWallComment',
        'poll' => '\OpenAPI\Client\Model\PollsPoll'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'audio' => null,
        'audio_message' => null,
        'call' => null,
        'doc' => null,
        'gift' => null,
        'graffiti' => null,
        'market' => null,
        'market_market_album' => null,
        'photo' => null,
        'sticker' => null,
        'story' => null,
        'type' => null,
        'video' => null,
        'wall_reply' => null,
        'poll' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'audio' => false,
		'audio_message' => false,
		'call' => false,
		'doc' => false,
		'gift' => false,
		'graffiti' => false,
		'market' => false,
		'market_market_album' => false,
		'photo' => false,
		'sticker' => false,
		'story' => false,
		'type' => false,
		'video' => false,
		'wall_reply' => false,
		'poll' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audio' => 'audio',
        'audio_message' => 'audio_message',
        'call' => 'call',
        'doc' => 'doc',
        'gift' => 'gift',
        'graffiti' => 'graffiti',
        'market' => 'market',
        'market_market_album' => 'market_market_album',
        'photo' => 'photo',
        'sticker' => 'sticker',
        'story' => 'story',
        'type' => 'type',
        'video' => 'video',
        'wall_reply' => 'wall_reply',
        'poll' => 'poll'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audio' => 'setAudio',
        'audio_message' => 'setAudioMessage',
        'call' => 'setCall',
        'doc' => 'setDoc',
        'gift' => 'setGift',
        'graffiti' => 'setGraffiti',
        'market' => 'setMarket',
        'market_market_album' => 'setMarketMarketAlbum',
        'photo' => 'setPhoto',
        'sticker' => 'setSticker',
        'story' => 'setStory',
        'type' => 'setType',
        'video' => 'setVideo',
        'wall_reply' => 'setWallReply',
        'poll' => 'setPoll'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audio' => 'getAudio',
        'audio_message' => 'getAudioMessage',
        'call' => 'getCall',
        'doc' => 'getDoc',
        'gift' => 'getGift',
        'graffiti' => 'getGraffiti',
        'market' => 'getMarket',
        'market_market_album' => 'getMarketMarketAlbum',
        'photo' => 'getPhoto',
        'sticker' => 'getSticker',
        'story' => 'getStory',
        'type' => 'getType',
        'video' => 'getVideo',
        'wall_reply' => 'getWallReply',
        'poll' => 'getPoll'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('audio', $data ?? [], null);
        $this->setIfExists('audio_message', $data ?? [], null);
        $this->setIfExists('call', $data ?? [], null);
        $this->setIfExists('doc', $data ?? [], null);
        $this->setIfExists('gift', $data ?? [], null);
        $this->setIfExists('graffiti', $data ?? [], null);
        $this->setIfExists('market', $data ?? [], null);
        $this->setIfExists('market_market_album', $data ?? [], null);
        $this->setIfExists('photo', $data ?? [], null);
        $this->setIfExists('sticker', $data ?? [], null);
        $this->setIfExists('story', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('video', $data ?? [], null);
        $this->setIfExists('wall_reply', $data ?? [], null);
        $this->setIfExists('poll', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audio
     *
     * @return OpenAPI\Client\Model\AudioAudio|null
     */
    public function getAudio()
    {
        return $this->container['audio'];
    }

    /**
     * Sets audio
     *
     * @param OpenAPI\Client\Model\AudioAudio|null $audio audio
     *
     * @return self
     */
    public function setAudio($audio)
    {

        if (is_null($audio)) {
            throw new InvalidArgumentException('non-nullable audio cannot be null');
        }

        $this->container['audio'] = $audio;

        return $this;
    }

    /**
     * Gets audio_message
     *
     * @return MessagesAudioMessage|null
     */
    public function getAudioMessage()
    {
        return $this->container['audio_message'];
    }

    /**
     * Sets audio_message
     *
     * @param MessagesAudioMessage|null $audio_message audio_message
     *
     * @return self
     */
    public function setAudioMessage($audio_message)
    {

        if (is_null($audio_message)) {
            throw new InvalidArgumentException('non-nullable audio_message cannot be null');
        }

        $this->container['audio_message'] = $audio_message;

        return $this;
    }

    /**
     * Gets call
     *
     * @return OpenAPI\Client\Model\CallsCall|null
     */
    public function getCall()
    {
        return $this->container['call'];
    }

    /**
     * Sets call
     *
     * @param OpenAPI\Client\Model\CallsCall|null $call call
     *
     * @return self
     */
    public function setCall($call)
    {

        if (is_null($call)) {
            throw new InvalidArgumentException('non-nullable call cannot be null');
        }

        $this->container['call'] = $call;

        return $this;
    }

    /**
     * Gets doc
     *
     * @return OpenAPI\Client\Model\DocsDoc|null
     */
    public function getDoc()
    {
        return $this->container['doc'];
    }

    /**
     * Sets doc
     *
     * @param OpenAPI\Client\Model\DocsDoc|null $doc doc
     *
     * @return self
     */
    public function setDoc($doc)
    {

        if (is_null($doc)) {
            throw new InvalidArgumentException('non-nullable doc cannot be null');
        }

        $this->container['doc'] = $doc;

        return $this;
    }

    /**
     * Gets gift
     *
     * @return OpenAPI\Client\Model\GiftsLayout|null
     */
    public function getGift()
    {
        return $this->container['gift'];
    }

    /**
     * Sets gift
     *
     * @param OpenAPI\Client\Model\GiftsLayout|null $gift gift
     *
     * @return self
     */
    public function setGift($gift)
    {

        if (is_null($gift)) {
            throw new InvalidArgumentException('non-nullable gift cannot be null');
        }

        $this->container['gift'] = $gift;

        return $this;
    }

    /**
     * Gets graffiti
     *
     * @return MessagesGraffiti|null
     */
    public function getGraffiti()
    {
        return $this->container['graffiti'];
    }

    /**
     * Sets graffiti
     *
     * @param MessagesGraffiti|null $graffiti graffiti
     *
     * @return self
     */
    public function setGraffiti($graffiti)
    {

        if (is_null($graffiti)) {
            throw new InvalidArgumentException('non-nullable graffiti cannot be null');
        }

        $this->container['graffiti'] = $graffiti;

        return $this;
    }

    /**
     * Gets market
     *
     * @return MarketMarketItem|null
     */
    public function getMarket()
    {
        return $this->container['market'];
    }

    /**
     * Sets market
     *
     * @param MarketMarketItem|null $market market
     *
     * @return self
     */
    public function setMarket($market)
    {

        if (is_null($market)) {
            throw new InvalidArgumentException('non-nullable market cannot be null');
        }

        $this->container['market'] = $market;

        return $this;
    }

    /**
     * Gets market_market_album
     *
     * @return MarketMarketAlbum|null
     */
    public function getMarketMarketAlbum()
    {
        return $this->container['market_market_album'];
    }

    /**
     * Sets market_market_album
     *
     * @param MarketMarketAlbum|null $market_market_album market_market_album
     *
     * @return self
     */
    public function setMarketMarketAlbum($market_market_album)
    {

        if (is_null($market_market_album)) {
            throw new InvalidArgumentException('non-nullable market_market_album cannot be null');
        }

        $this->container['market_market_album'] = $market_market_album;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return OpenAPI\Client\Model\PhotosPhoto|null
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param OpenAPI\Client\Model\PhotosPhoto|null $photo photo
     *
     * @return self
     */
    public function setPhoto($photo)
    {

        if (is_null($photo)) {
            throw new InvalidArgumentException('non-nullable photo cannot be null');
        }

        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets sticker
     *
     * @return OpenAPI\Client\Model\BaseSticker|null
     */
    public function getSticker()
    {
        return $this->container['sticker'];
    }

    /**
     * Sets sticker
     *
     * @param OpenAPI\Client\Model\BaseSticker|null $sticker sticker
     *
     * @return self
     */
    public function setSticker($sticker)
    {

        if (is_null($sticker)) {
            throw new InvalidArgumentException('non-nullable sticker cannot be null');
        }

        $this->container['sticker'] = $sticker;

        return $this;
    }

    /**
     * Gets story
     *
     * @return OpenAPI\Client\Model\StoriesStory|null
     */
    public function getStory()
    {
        return $this->container['story'];
    }

    /**
     * Sets story
     *
     * @param OpenAPI\Client\Model\StoriesStory|null $story story
     *
     * @return self
     */
    public function setStory($story)
    {

        if (is_null($story)) {
            throw new InvalidArgumentException('non-nullable story cannot be null');
        }

        $this->container['story'] = $story;

        return $this;
    }

    /**
     * Gets type
     *
     * @return MessagesMessageAttachmentType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param MessagesMessageAttachmentType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {

        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets video
     *
     * @return OpenAPI\Client\Model\VideoVideoFull|null
     */
    public function getVideo()
    {
        return $this->container['video'];
    }

    /**
     * Sets video
     *
     * @param OpenAPI\Client\Model\VideoVideoFull|null $video video
     *
     * @return self
     */
    public function setVideo($video)
    {

        if (is_null($video)) {
            throw new InvalidArgumentException('non-nullable video cannot be null');
        }

        $this->container['video'] = $video;

        return $this;
    }

    /**
     * Gets wall_reply
     *
     * @return OpenAPI\Client\Model\WallWallComment|null
     */
    public function getWallReply()
    {
        return $this->container['wall_reply'];
    }

    /**
     * Sets wall_reply
     *
     * @param OpenAPI\Client\Model\WallWallComment|null $wall_reply wall_reply
     *
     * @return self
     */
    public function setWallReply($wall_reply)
    {

        if (is_null($wall_reply)) {
            throw new InvalidArgumentException('non-nullable wall_reply cannot be null');
        }

        $this->container['wall_reply'] = $wall_reply;

        return $this;
    }

    /**
     * Gets poll
     *
     * @return OpenAPI\Client\Model\PollsPoll|null
     */
    public function getPoll()
    {
        return $this->container['poll'];
    }

    /**
     * Sets poll
     *
     * @param OpenAPI\Client\Model\PollsPoll|null $poll poll
     *
     * @return self
     */
    public function setPoll($poll)
    {

        if (is_null($poll)) {
            throw new InvalidArgumentException('non-nullable poll cannot be null');
        }

        $this->container['poll'] = $poll;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


