<?php
/**
 * MessagesChatSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VK api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.131
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VkApi\Model\Message;

use ArrayAccess;
use InvalidArgumentException;
use JsonSerializable;
use VkApi\Lib\ObjectSerializer;
use VkApi\Model\ModelInterface;

/**
 * MessagesChatSettings Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MessagesChatSettings implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'messages_chat_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'members_count' => 'int',
        'friends_count' => 'int',
        'owner_id' => 'int',
        'title' => 'string',
        'pinned_message' => 'MessagesPinnedMessage',
        'state' => 'MessagesChatSettingsState',
        'photo' => 'MessagesChatSettingsPhoto',
        'admin_ids' => 'int[]',
        'active_ids' => 'int[]',
        'is_group_channel' => 'bool',
        'acl' => 'MessagesChatSettingsAcl',
        'permissions' => 'MessagesChatSettingsPermissions',
        'is_disappearing' => 'bool',
        'theme' => 'string',
        'disappearing_chat_link' => 'string',
        'is_service' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'members_count' => null,
        'friends_count' => null,
        'owner_id' => 'int64',
        'title' => null,
        'pinned_message' => null,
        'state' => null,
        'photo' => null,
        'admin_ids' => 'int64',
        'active_ids' => 'int64',
        'is_group_channel' => null,
        'acl' => null,
        'permissions' => null,
        'is_disappearing' => null,
        'theme' => null,
        'disappearing_chat_link' => null,
        'is_service' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'members_count' => false,
		'friends_count' => false,
		'owner_id' => false,
		'title' => false,
		'pinned_message' => false,
		'state' => false,
		'photo' => false,
		'admin_ids' => false,
		'active_ids' => false,
		'is_group_channel' => false,
		'acl' => false,
		'permissions' => false,
		'is_disappearing' => false,
		'theme' => false,
		'disappearing_chat_link' => false,
		'is_service' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'members_count' => 'members_count',
        'friends_count' => 'friends_count',
        'owner_id' => 'owner_id',
        'title' => 'title',
        'pinned_message' => 'pinned_message',
        'state' => 'state',
        'photo' => 'photo',
        'admin_ids' => 'admin_ids',
        'active_ids' => 'active_ids',
        'is_group_channel' => 'is_group_channel',
        'acl' => 'acl',
        'permissions' => 'permissions',
        'is_disappearing' => 'is_disappearing',
        'theme' => 'theme',
        'disappearing_chat_link' => 'disappearing_chat_link',
        'is_service' => 'is_service'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'members_count' => 'setMembersCount',
        'friends_count' => 'setFriendsCount',
        'owner_id' => 'setOwnerId',
        'title' => 'setTitle',
        'pinned_message' => 'setPinnedMessage',
        'state' => 'setState',
        'photo' => 'setPhoto',
        'admin_ids' => 'setAdminIds',
        'active_ids' => 'setActiveIds',
        'is_group_channel' => 'setIsGroupChannel',
        'acl' => 'setAcl',
        'permissions' => 'setPermissions',
        'is_disappearing' => 'setIsDisappearing',
        'theme' => 'setTheme',
        'disappearing_chat_link' => 'setDisappearingChatLink',
        'is_service' => 'setIsService'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'members_count' => 'getMembersCount',
        'friends_count' => 'getFriendsCount',
        'owner_id' => 'getOwnerId',
        'title' => 'getTitle',
        'pinned_message' => 'getPinnedMessage',
        'state' => 'getState',
        'photo' => 'getPhoto',
        'admin_ids' => 'getAdminIds',
        'active_ids' => 'getActiveIds',
        'is_group_channel' => 'getIsGroupChannel',
        'acl' => 'getAcl',
        'permissions' => 'getPermissions',
        'is_disappearing' => 'getIsDisappearing',
        'theme' => 'getTheme',
        'disappearing_chat_link' => 'getDisappearingChatLink',
        'is_service' => 'getIsService'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('members_count', $data ?? [], null);
        $this->setIfExists('friends_count', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('pinned_message', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('photo', $data ?? [], null);
        $this->setIfExists('admin_ids', $data ?? [], null);
        $this->setIfExists('active_ids', $data ?? [], null);
        $this->setIfExists('is_group_channel', $data ?? [], null);
        $this->setIfExists('acl', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('is_disappearing', $data ?? [], null);
        $this->setIfExists('theme', $data ?? [], null);
        $this->setIfExists('disappearing_chat_link', $data ?? [], null);
        $this->setIfExists('is_service', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets members_count
     *
     * @return int|null
     */
    public function getMembersCount()
    {
        return $this->container['members_count'];
    }

    /**
     * Sets members_count
     *
     * @param int|null $members_count members_count
     *
     * @return self
     */
    public function setMembersCount($members_count)
    {

        if (is_null($members_count)) {
            throw new InvalidArgumentException('non-nullable members_count cannot be null');
        }

        $this->container['members_count'] = $members_count;

        return $this;
    }

    /**
     * Gets friends_count
     *
     * @return int|null
     */
    public function getFriendsCount()
    {
        return $this->container['friends_count'];
    }

    /**
     * Sets friends_count
     *
     * @param int|null $friends_count friends_count
     *
     * @return self
     */
    public function setFriendsCount($friends_count)
    {

        if (is_null($friends_count)) {
            throw new InvalidArgumentException('non-nullable friends_count cannot be null');
        }

        $this->container['friends_count'] = $friends_count;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int|null $owner_id owner_id
     *
     * @return self
     */
    public function setOwnerId($owner_id)
    {

        if (is_null($owner_id)) {
            throw new InvalidArgumentException('non-nullable owner_id cannot be null');
        }

        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Chat title
     *
     * @return self
     */
    public function setTitle($title)
    {

        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets pinned_message
     *
     * @return MessagesPinnedMessage|null
     */
    public function getPinnedMessage()
    {
        return $this->container['pinned_message'];
    }

    /**
     * Sets pinned_message
     *
     * @param MessagesPinnedMessage|null $pinned_message pinned_message
     *
     * @return self
     */
    public function setPinnedMessage($pinned_message)
    {

        if (is_null($pinned_message)) {
            throw new InvalidArgumentException('non-nullable pinned_message cannot be null');
        }

        $this->container['pinned_message'] = $pinned_message;

        return $this;
    }

    /**
     * Gets state
     *
     * @return MessagesChatSettingsState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param MessagesChatSettingsState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {

        if (is_null($state)) {
            throw new InvalidArgumentException('non-nullable state cannot be null');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return MessagesChatSettingsPhoto|null
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param MessagesChatSettingsPhoto|null $photo photo
     *
     * @return self
     */
    public function setPhoto($photo)
    {

        if (is_null($photo)) {
            throw new InvalidArgumentException('non-nullable photo cannot be null');
        }

        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets admin_ids
     *
     * @return int[]|null
     */
    public function getAdminIds()
    {
        return $this->container['admin_ids'];
    }

    /**
     * Sets admin_ids
     *
     * @param int[]|null $admin_ids Ids of chat admins
     *
     * @return self
     */
    public function setAdminIds($admin_ids)
    {

        if (is_null($admin_ids)) {
            throw new InvalidArgumentException('non-nullable admin_ids cannot be null');
        }

        $this->container['admin_ids'] = $admin_ids;

        return $this;
    }

    /**
     * Gets active_ids
     *
     * @return int[]|null
     */
    public function getActiveIds()
    {
        return $this->container['active_ids'];
    }

    /**
     * Sets active_ids
     *
     * @param int[]|null $active_ids active_ids
     *
     * @return self
     */
    public function setActiveIds($active_ids)
    {

        if (is_null($active_ids)) {
            throw new InvalidArgumentException('non-nullable active_ids cannot be null');
        }

        $this->container['active_ids'] = $active_ids;

        return $this;
    }

    /**
     * Gets is_group_channel
     *
     * @return bool|null
     */
    public function getIsGroupChannel()
    {
        return $this->container['is_group_channel'];
    }

    /**
     * Sets is_group_channel
     *
     * @param bool|null $is_group_channel is_group_channel
     *
     * @return self
     */
    public function setIsGroupChannel($is_group_channel)
    {

        if (is_null($is_group_channel)) {
            throw new InvalidArgumentException('non-nullable is_group_channel cannot be null');
        }

        $this->container['is_group_channel'] = $is_group_channel;

        return $this;
    }

    /**
     * Gets acl
     *
     * @return MessagesChatSettingsAcl|null
     */
    public function getAcl()
    {
        return $this->container['acl'];
    }

    /**
     * Sets acl
     *
     * @param MessagesChatSettingsAcl|null $acl acl
     *
     * @return self
     */
    public function setAcl($acl)
    {

        if (is_null($acl)) {
            throw new InvalidArgumentException('non-nullable acl cannot be null');
        }

        $this->container['acl'] = $acl;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return MessagesChatSettingsPermissions|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param MessagesChatSettingsPermissions|null $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {

        if (is_null($permissions)) {
            throw new InvalidArgumentException('non-nullable permissions cannot be null');
        }

        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets is_disappearing
     *
     * @return bool|null
     */
    public function getIsDisappearing()
    {
        return $this->container['is_disappearing'];
    }

    /**
     * Sets is_disappearing
     *
     * @param bool|null $is_disappearing is_disappearing
     *
     * @return self
     */
    public function setIsDisappearing($is_disappearing)
    {

        if (is_null($is_disappearing)) {
            throw new InvalidArgumentException('non-nullable is_disappearing cannot be null');
        }

        $this->container['is_disappearing'] = $is_disappearing;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return string|null
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param string|null $theme theme
     *
     * @return self
     */
    public function setTheme($theme)
    {

        if (is_null($theme)) {
            throw new InvalidArgumentException('non-nullable theme cannot be null');
        }

        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets disappearing_chat_link
     *
     * @return string|null
     */
    public function getDisappearingChatLink()
    {
        return $this->container['disappearing_chat_link'];
    }

    /**
     * Sets disappearing_chat_link
     *
     * @param string|null $disappearing_chat_link disappearing_chat_link
     *
     * @return self
     */
    public function setDisappearingChatLink($disappearing_chat_link)
    {

        if (is_null($disappearing_chat_link)) {
            throw new InvalidArgumentException('non-nullable disappearing_chat_link cannot be null');
        }

        $this->container['disappearing_chat_link'] = $disappearing_chat_link;

        return $this;
    }

    /**
     * Gets is_service
     *
     * @return bool|null
     */
    public function getIsService()
    {
        return $this->container['is_service'];
    }

    /**
     * Sets is_service
     *
     * @param bool|null $is_service is_service
     *
     * @return self
     */
    public function setIsService($is_service)
    {

        if (is_null($is_service)) {
            throw new InvalidArgumentException('non-nullable is_service cannot be null');
        }

        $this->container['is_service'] = $is_service;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


