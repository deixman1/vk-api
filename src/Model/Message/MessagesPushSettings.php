<?php
/**
 * MessagesPushSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VK api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.131
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VkApi\Model\Message;

use ArrayAccess;
use InvalidArgumentException;
use JsonSerializable;
use VkApi\Lib\ObjectSerializer;
use VkApi\Model\ModelInterface;

/**
 * MessagesPushSettings Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MessagesPushSettings implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'messages_push_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'disabled_forever' => 'bool',
        'disabled_until' => 'int',
        'no_sound' => 'bool',
        'disabled_mentions' => 'bool',
        'disabled_mass_mentions' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'disabled_forever' => null,
        'disabled_until' => null,
        'no_sound' => null,
        'disabled_mentions' => null,
        'disabled_mass_mentions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'disabled_forever' => false,
		'disabled_until' => false,
		'no_sound' => false,
		'disabled_mentions' => false,
		'disabled_mass_mentions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'disabled_forever' => 'disabled_forever',
        'disabled_until' => 'disabled_until',
        'no_sound' => 'no_sound',
        'disabled_mentions' => 'disabled_mentions',
        'disabled_mass_mentions' => 'disabled_mass_mentions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'disabled_forever' => 'setDisabledForever',
        'disabled_until' => 'setDisabledUntil',
        'no_sound' => 'setNoSound',
        'disabled_mentions' => 'setDisabledMentions',
        'disabled_mass_mentions' => 'setDisabledMassMentions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'disabled_forever' => 'getDisabledForever',
        'disabled_until' => 'getDisabledUntil',
        'no_sound' => 'getNoSound',
        'disabled_mentions' => 'getDisabledMentions',
        'disabled_mass_mentions' => 'getDisabledMassMentions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('disabled_forever', $data ?? [], null);
        $this->setIfExists('disabled_until', $data ?? [], null);
        $this->setIfExists('no_sound', $data ?? [], null);
        $this->setIfExists('disabled_mentions', $data ?? [], null);
        $this->setIfExists('disabled_mass_mentions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets disabled_forever
     *
     * @return bool|null
     */
    public function getDisabledForever()
    {
        return $this->container['disabled_forever'];
    }

    /**
     * Sets disabled_forever
     *
     * @param bool|null $disabled_forever Information whether push notifications are disabled forever
     *
     * @return self
     */
    public function setDisabledForever($disabled_forever)
    {

        if (is_null($disabled_forever)) {
            throw new InvalidArgumentException('non-nullable disabled_forever cannot be null');
        }

        $this->container['disabled_forever'] = $disabled_forever;

        return $this;
    }

    /**
     * Gets disabled_until
     *
     * @return int|null
     */
    public function getDisabledUntil()
    {
        return $this->container['disabled_until'];
    }

    /**
     * Sets disabled_until
     *
     * @param int|null $disabled_until Time until what notifications are disabled
     *
     * @return self
     */
    public function setDisabledUntil($disabled_until)
    {

        if (is_null($disabled_until)) {
            throw new InvalidArgumentException('non-nullable disabled_until cannot be null');
        }

        $this->container['disabled_until'] = $disabled_until;

        return $this;
    }

    /**
     * Gets no_sound
     *
     * @return bool|null
     */
    public function getNoSound()
    {
        return $this->container['no_sound'];
    }

    /**
     * Sets no_sound
     *
     * @param bool|null $no_sound Information whether the sound is on
     *
     * @return self
     */
    public function setNoSound($no_sound)
    {

        if (is_null($no_sound)) {
            throw new InvalidArgumentException('non-nullable no_sound cannot be null');
        }

        $this->container['no_sound'] = $no_sound;

        return $this;
    }

    /**
     * Gets disabled_mentions
     *
     * @return bool|null
     */
    public function getDisabledMentions()
    {
        return $this->container['disabled_mentions'];
    }

    /**
     * Sets disabled_mentions
     *
     * @param bool|null $disabled_mentions Information whether the mentions are disabled
     *
     * @return self
     */
    public function setDisabledMentions($disabled_mentions)
    {

        if (is_null($disabled_mentions)) {
            throw new InvalidArgumentException('non-nullable disabled_mentions cannot be null');
        }

        $this->container['disabled_mentions'] = $disabled_mentions;

        return $this;
    }

    /**
     * Gets disabled_mass_mentions
     *
     * @return bool|null
     */
    public function getDisabledMassMentions()
    {
        return $this->container['disabled_mass_mentions'];
    }

    /**
     * Sets disabled_mass_mentions
     *
     * @param bool|null $disabled_mass_mentions Information whether the mass mentions (like '@all', '@online') are disabled
     *
     * @return self
     */
    public function setDisabledMassMentions($disabled_mass_mentions)
    {

        if (is_null($disabled_mass_mentions)) {
            throw new InvalidArgumentException('non-nullable disabled_mass_mentions cannot be null');
        }

        $this->container['disabled_mass_mentions'] = $disabled_mass_mentions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


