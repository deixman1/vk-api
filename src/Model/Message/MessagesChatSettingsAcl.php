<?php
/**
 * MessagesChatSettingsAcl
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VK api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.131
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VkApi\Model\Message;

use ArrayAccess;
use InvalidArgumentException;
use JsonSerializable;
use VkApi\Lib\ObjectSerializer;
use VkApi\Model\ModelInterface;

/**
 * MessagesChatSettingsAcl Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MessagesChatSettingsAcl implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'messages_chat_settings_acl';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can_change_info' => 'bool',
        'can_change_invite_link' => 'bool',
        'can_change_pin' => 'bool',
        'can_invite' => 'bool',
        'can_promote_users' => 'bool',
        'can_see_invite_link' => 'bool',
        'can_moderate' => 'bool',
        'can_copy_chat' => 'bool',
        'can_call' => 'bool',
        'can_use_mass_mentions' => 'bool',
        'can_change_service_type' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can_change_info' => null,
        'can_change_invite_link' => null,
        'can_change_pin' => null,
        'can_invite' => null,
        'can_promote_users' => null,
        'can_see_invite_link' => null,
        'can_moderate' => null,
        'can_copy_chat' => null,
        'can_call' => null,
        'can_use_mass_mentions' => null,
        'can_change_service_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'can_change_info' => false,
		'can_change_invite_link' => false,
		'can_change_pin' => false,
		'can_invite' => false,
		'can_promote_users' => false,
		'can_see_invite_link' => false,
		'can_moderate' => false,
		'can_copy_chat' => false,
		'can_call' => false,
		'can_use_mass_mentions' => false,
		'can_change_service_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can_change_info' => 'can_change_info',
        'can_change_invite_link' => 'can_change_invite_link',
        'can_change_pin' => 'can_change_pin',
        'can_invite' => 'can_invite',
        'can_promote_users' => 'can_promote_users',
        'can_see_invite_link' => 'can_see_invite_link',
        'can_moderate' => 'can_moderate',
        'can_copy_chat' => 'can_copy_chat',
        'can_call' => 'can_call',
        'can_use_mass_mentions' => 'can_use_mass_mentions',
        'can_change_service_type' => 'can_change_service_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can_change_info' => 'setCanChangeInfo',
        'can_change_invite_link' => 'setCanChangeInviteLink',
        'can_change_pin' => 'setCanChangePin',
        'can_invite' => 'setCanInvite',
        'can_promote_users' => 'setCanPromoteUsers',
        'can_see_invite_link' => 'setCanSeeInviteLink',
        'can_moderate' => 'setCanModerate',
        'can_copy_chat' => 'setCanCopyChat',
        'can_call' => 'setCanCall',
        'can_use_mass_mentions' => 'setCanUseMassMentions',
        'can_change_service_type' => 'setCanChangeServiceType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can_change_info' => 'getCanChangeInfo',
        'can_change_invite_link' => 'getCanChangeInviteLink',
        'can_change_pin' => 'getCanChangePin',
        'can_invite' => 'getCanInvite',
        'can_promote_users' => 'getCanPromoteUsers',
        'can_see_invite_link' => 'getCanSeeInviteLink',
        'can_moderate' => 'getCanModerate',
        'can_copy_chat' => 'getCanCopyChat',
        'can_call' => 'getCanCall',
        'can_use_mass_mentions' => 'getCanUseMassMentions',
        'can_change_service_type' => 'getCanChangeServiceType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('can_change_info', $data ?? [], null);
        $this->setIfExists('can_change_invite_link', $data ?? [], null);
        $this->setIfExists('can_change_pin', $data ?? [], null);
        $this->setIfExists('can_invite', $data ?? [], null);
        $this->setIfExists('can_promote_users', $data ?? [], null);
        $this->setIfExists('can_see_invite_link', $data ?? [], null);
        $this->setIfExists('can_moderate', $data ?? [], null);
        $this->setIfExists('can_copy_chat', $data ?? [], null);
        $this->setIfExists('can_call', $data ?? [], null);
        $this->setIfExists('can_use_mass_mentions', $data ?? [], null);
        $this->setIfExists('can_change_service_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can_change_info
     *
     * @return bool|null
     */
    public function getCanChangeInfo()
    {
        return $this->container['can_change_info'];
    }

    /**
     * Sets can_change_info
     *
     * @param bool|null $can_change_info Can you change photo, description and name
     *
     * @return self
     */
    public function setCanChangeInfo($can_change_info)
    {

        if (is_null($can_change_info)) {
            throw new InvalidArgumentException('non-nullable can_change_info cannot be null');
        }

        $this->container['can_change_info'] = $can_change_info;

        return $this;
    }

    /**
     * Gets can_change_invite_link
     *
     * @return bool|null
     */
    public function getCanChangeInviteLink()
    {
        return $this->container['can_change_invite_link'];
    }

    /**
     * Sets can_change_invite_link
     *
     * @param bool|null $can_change_invite_link Can you change invite link for this chat
     *
     * @return self
     */
    public function setCanChangeInviteLink($can_change_invite_link)
    {

        if (is_null($can_change_invite_link)) {
            throw new InvalidArgumentException('non-nullable can_change_invite_link cannot be null');
        }

        $this->container['can_change_invite_link'] = $can_change_invite_link;

        return $this;
    }

    /**
     * Gets can_change_pin
     *
     * @return bool|null
     */
    public function getCanChangePin()
    {
        return $this->container['can_change_pin'];
    }

    /**
     * Sets can_change_pin
     *
     * @param bool|null $can_change_pin Can you pin/unpin message for this chat
     *
     * @return self
     */
    public function setCanChangePin($can_change_pin)
    {

        if (is_null($can_change_pin)) {
            throw new InvalidArgumentException('non-nullable can_change_pin cannot be null');
        }

        $this->container['can_change_pin'] = $can_change_pin;

        return $this;
    }

    /**
     * Gets can_invite
     *
     * @return bool|null
     */
    public function getCanInvite()
    {
        return $this->container['can_invite'];
    }

    /**
     * Sets can_invite
     *
     * @param bool|null $can_invite Can you invite other peers in chat
     *
     * @return self
     */
    public function setCanInvite($can_invite)
    {

        if (is_null($can_invite)) {
            throw new InvalidArgumentException('non-nullable can_invite cannot be null');
        }

        $this->container['can_invite'] = $can_invite;

        return $this;
    }

    /**
     * Gets can_promote_users
     *
     * @return bool|null
     */
    public function getCanPromoteUsers()
    {
        return $this->container['can_promote_users'];
    }

    /**
     * Sets can_promote_users
     *
     * @param bool|null $can_promote_users Can you promote simple users to chat admins
     *
     * @return self
     */
    public function setCanPromoteUsers($can_promote_users)
    {

        if (is_null($can_promote_users)) {
            throw new InvalidArgumentException('non-nullable can_promote_users cannot be null');
        }

        $this->container['can_promote_users'] = $can_promote_users;

        return $this;
    }

    /**
     * Gets can_see_invite_link
     *
     * @return bool|null
     */
    public function getCanSeeInviteLink()
    {
        return $this->container['can_see_invite_link'];
    }

    /**
     * Sets can_see_invite_link
     *
     * @param bool|null $can_see_invite_link Can you see invite link for this chat
     *
     * @return self
     */
    public function setCanSeeInviteLink($can_see_invite_link)
    {

        if (is_null($can_see_invite_link)) {
            throw new InvalidArgumentException('non-nullable can_see_invite_link cannot be null');
        }

        $this->container['can_see_invite_link'] = $can_see_invite_link;

        return $this;
    }

    /**
     * Gets can_moderate
     *
     * @return bool|null
     */
    public function getCanModerate()
    {
        return $this->container['can_moderate'];
    }

    /**
     * Sets can_moderate
     *
     * @param bool|null $can_moderate Can you moderate (delete) other users' messages
     *
     * @return self
     */
    public function setCanModerate($can_moderate)
    {

        if (is_null($can_moderate)) {
            throw new InvalidArgumentException('non-nullable can_moderate cannot be null');
        }

        $this->container['can_moderate'] = $can_moderate;

        return $this;
    }

    /**
     * Gets can_copy_chat
     *
     * @return bool|null
     */
    public function getCanCopyChat()
    {
        return $this->container['can_copy_chat'];
    }

    /**
     * Sets can_copy_chat
     *
     * @param bool|null $can_copy_chat Can you copy chat
     *
     * @return self
     */
    public function setCanCopyChat($can_copy_chat)
    {

        if (is_null($can_copy_chat)) {
            throw new InvalidArgumentException('non-nullable can_copy_chat cannot be null');
        }

        $this->container['can_copy_chat'] = $can_copy_chat;

        return $this;
    }

    /**
     * Gets can_call
     *
     * @return bool|null
     */
    public function getCanCall()
    {
        return $this->container['can_call'];
    }

    /**
     * Sets can_call
     *
     * @param bool|null $can_call Can you init group call in the chat
     *
     * @return self
     */
    public function setCanCall($can_call)
    {

        if (is_null($can_call)) {
            throw new InvalidArgumentException('non-nullable can_call cannot be null');
        }

        $this->container['can_call'] = $can_call;

        return $this;
    }

    /**
     * Gets can_use_mass_mentions
     *
     * @return bool|null
     */
    public function getCanUseMassMentions()
    {
        return $this->container['can_use_mass_mentions'];
    }

    /**
     * Sets can_use_mass_mentions
     *
     * @param bool|null $can_use_mass_mentions Can you use mass mentions
     *
     * @return self
     */
    public function setCanUseMassMentions($can_use_mass_mentions)
    {

        if (is_null($can_use_mass_mentions)) {
            throw new InvalidArgumentException('non-nullable can_use_mass_mentions cannot be null');
        }

        $this->container['can_use_mass_mentions'] = $can_use_mass_mentions;

        return $this;
    }

    /**
     * Gets can_change_service_type
     *
     * @return bool|null
     */
    public function getCanChangeServiceType()
    {
        return $this->container['can_change_service_type'];
    }

    /**
     * Sets can_change_service_type
     *
     * @param bool|null $can_change_service_type Can you change chat service type
     *
     * @return self
     */
    public function setCanChangeServiceType($can_change_service_type)
    {

        if (is_null($can_change_service_type)) {
            throw new InvalidArgumentException('non-nullable can_change_service_type cannot be null');
        }

        $this->container['can_change_service_type'] = $can_change_service_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


