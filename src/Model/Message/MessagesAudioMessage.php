<?php
/**
 * MessagesAudioMessage
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VK api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.131
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VkApi\Model\Message;

use ArrayAccess;
use InvalidArgumentException;
use JsonSerializable;
use VkApi\Lib\ObjectSerializer;
use VkApi\Model\ModelInterface;

/**
 * MessagesAudioMessage Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MessagesAudioMessage implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'messages_audio_message';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'access_key' => 'string',
        'transcript_error' => 'int',
        'duration' => 'int',
        'id' => 'int',
        'link_mp3' => 'string',
        'link_ogg' => 'string',
        'owner_id' => 'int',
        'waveform' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'access_key' => null,
        'transcript_error' => null,
        'duration' => null,
        'id' => null,
        'link_mp3' => 'uri',
        'link_ogg' => 'uri',
        'owner_id' => 'int64',
        'waveform' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'access_key' => false,
		'transcript_error' => false,
		'duration' => false,
		'id' => false,
		'link_mp3' => false,
		'link_ogg' => false,
		'owner_id' => false,
		'waveform' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_key' => 'access_key',
        'transcript_error' => 'transcript_error',
        'duration' => 'duration',
        'id' => 'id',
        'link_mp3' => 'link_mp3',
        'link_ogg' => 'link_ogg',
        'owner_id' => 'owner_id',
        'waveform' => 'waveform'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_key' => 'setAccessKey',
        'transcript_error' => 'setTranscriptError',
        'duration' => 'setDuration',
        'id' => 'setId',
        'link_mp3' => 'setLinkMp3',
        'link_ogg' => 'setLinkOgg',
        'owner_id' => 'setOwnerId',
        'waveform' => 'setWaveform'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_key' => 'getAccessKey',
        'transcript_error' => 'getTranscriptError',
        'duration' => 'getDuration',
        'id' => 'getId',
        'link_mp3' => 'getLinkMp3',
        'link_ogg' => 'getLinkOgg',
        'owner_id' => 'getOwnerId',
        'waveform' => 'getWaveform'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('access_key', $data ?? [], null);
        $this->setIfExists('transcript_error', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('link_mp3', $data ?? [], null);
        $this->setIfExists('link_ogg', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('waveform', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['transcript_error']) && ($this->container['transcript_error'] > 11)) {
            $invalidProperties[] = "invalid value for 'transcript_error', must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['transcript_error']) && ($this->container['transcript_error'] < 1)) {
            $invalidProperties[] = "invalid value for 'transcript_error', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['duration']) && ($this->container['duration'] < 0)) {
            $invalidProperties[] = "invalid value for 'duration', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_key
     *
     * @return string|null
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     *
     * @param string|null $access_key Access key for audio message
     *
     * @return self
     */
    public function setAccessKey($access_key)
    {

        if (is_null($access_key)) {
            throw new InvalidArgumentException('non-nullable access_key cannot be null');
        }

        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets transcript_error
     *
     * @return int|null
     */
    public function getTranscriptError()
    {
        return $this->container['transcript_error'];
    }

    /**
     * Sets transcript_error
     *
     * @param int|null $transcript_error transcript_error
     *
     * @return self
     */
    public function setTranscriptError($transcript_error)
    {

        if (!is_null($transcript_error) && ($transcript_error > 11)) {
            throw new InvalidArgumentException('invalid value for $transcript_error when calling MessagesAudioMessage., must be smaller than or equal to 11.');
        }
        if (!is_null($transcript_error) && ($transcript_error < 1)) {
            throw new InvalidArgumentException('invalid value for $transcript_error when calling MessagesAudioMessage., must be bigger than or equal to 1.');
        }


        if (is_null($transcript_error)) {
            throw new InvalidArgumentException('non-nullable transcript_error cannot be null');
        }

        $this->container['transcript_error'] = $transcript_error;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration Audio message duration in seconds
     *
     * @return self
     */
    public function setDuration($duration)
    {

        if (!is_null($duration) && ($duration < 0)) {
            throw new InvalidArgumentException('invalid value for $duration when calling MessagesAudioMessage., must be bigger than or equal to 0.');
        }


        if (is_null($duration)) {
            throw new InvalidArgumentException('non-nullable duration cannot be null');
        }

        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Audio message ID
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id < 0)) {
            throw new InvalidArgumentException('invalid value for $id when calling MessagesAudioMessage., must be bigger than or equal to 0.');
        }


        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets link_mp3
     *
     * @return string|null
     */
    public function getLinkMp3()
    {
        return $this->container['link_mp3'];
    }

    /**
     * Sets link_mp3
     *
     * @param string|null $link_mp3 MP3 file URL
     *
     * @return self
     */
    public function setLinkMp3($link_mp3)
    {

        if (is_null($link_mp3)) {
            throw new InvalidArgumentException('non-nullable link_mp3 cannot be null');
        }

        $this->container['link_mp3'] = $link_mp3;

        return $this;
    }

    /**
     * Gets link_ogg
     *
     * @return string|null
     */
    public function getLinkOgg()
    {
        return $this->container['link_ogg'];
    }

    /**
     * Sets link_ogg
     *
     * @param string|null $link_ogg OGG file URL
     *
     * @return self
     */
    public function setLinkOgg($link_ogg)
    {

        if (is_null($link_ogg)) {
            throw new InvalidArgumentException('non-nullable link_ogg cannot be null');
        }

        $this->container['link_ogg'] = $link_ogg;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int|null $owner_id Audio message owner ID
     *
     * @return self
     */
    public function setOwnerId($owner_id)
    {

        if (is_null($owner_id)) {
            throw new InvalidArgumentException('non-nullable owner_id cannot be null');
        }

        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets waveform
     *
     * @return int[]|null
     */
    public function getWaveform()
    {
        return $this->container['waveform'];
    }

    /**
     * Sets waveform
     *
     * @param int[]|null $waveform waveform
     *
     * @return self
     */
    public function setWaveform($waveform)
    {

        if (is_null($waveform)) {
            throw new InvalidArgumentException('non-nullable waveform cannot be null');
        }

        $this->container['waveform'] = $waveform;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


