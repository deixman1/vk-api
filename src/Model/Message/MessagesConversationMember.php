<?php
/**
 * MessagesConversationMember
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VK api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.131
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VkApi\Model\Message;

use ArrayAccess;
use InvalidArgumentException;
use JsonSerializable;
use VkApi\Lib\ObjectSerializer;
use VkApi\Model\ModelInterface;

/**
 * MessagesConversationMember Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MessagesConversationMember implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'messages_conversation_member';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can_kick' => 'bool',
        'invited_by' => 'int',
        'is_admin' => 'bool',
        'is_owner' => 'bool',
        'is_message_request' => 'bool',
        'join_date' => 'int',
        'request_date' => 'int',
        'member_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can_kick' => null,
        'invited_by' => 'int64',
        'is_admin' => null,
        'is_owner' => null,
        'is_message_request' => null,
        'join_date' => null,
        'request_date' => null,
        'member_id' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'can_kick' => false,
		'invited_by' => false,
		'is_admin' => false,
		'is_owner' => false,
		'is_message_request' => false,
		'join_date' => false,
		'request_date' => false,
		'member_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can_kick' => 'can_kick',
        'invited_by' => 'invited_by',
        'is_admin' => 'is_admin',
        'is_owner' => 'is_owner',
        'is_message_request' => 'is_message_request',
        'join_date' => 'join_date',
        'request_date' => 'request_date',
        'member_id' => 'member_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can_kick' => 'setCanKick',
        'invited_by' => 'setInvitedBy',
        'is_admin' => 'setIsAdmin',
        'is_owner' => 'setIsOwner',
        'is_message_request' => 'setIsMessageRequest',
        'join_date' => 'setJoinDate',
        'request_date' => 'setRequestDate',
        'member_id' => 'setMemberId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can_kick' => 'getCanKick',
        'invited_by' => 'getInvitedBy',
        'is_admin' => 'getIsAdmin',
        'is_owner' => 'getIsOwner',
        'is_message_request' => 'getIsMessageRequest',
        'join_date' => 'getJoinDate',
        'request_date' => 'getRequestDate',
        'member_id' => 'getMemberId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('can_kick', $data ?? [], null);
        $this->setIfExists('invited_by', $data ?? [], null);
        $this->setIfExists('is_admin', $data ?? [], null);
        $this->setIfExists('is_owner', $data ?? [], null);
        $this->setIfExists('is_message_request', $data ?? [], null);
        $this->setIfExists('join_date', $data ?? [], null);
        $this->setIfExists('request_date', $data ?? [], null);
        $this->setIfExists('member_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['join_date']) && ($this->container['join_date'] < 0)) {
            $invalidProperties[] = "invalid value for 'join_date', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['request_date']) && ($this->container['request_date'] < 0)) {
            $invalidProperties[] = "invalid value for 'request_date', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can_kick
     *
     * @return bool|null
     */
    public function getCanKick()
    {
        return $this->container['can_kick'];
    }

    /**
     * Sets can_kick
     *
     * @param bool|null $can_kick Is it possible for user to kick this member
     *
     * @return self
     */
    public function setCanKick($can_kick)
    {

        if (is_null($can_kick)) {
            throw new InvalidArgumentException('non-nullable can_kick cannot be null');
        }

        $this->container['can_kick'] = $can_kick;

        return $this;
    }

    /**
     * Gets invited_by
     *
     * @return int|null
     */
    public function getInvitedBy()
    {
        return $this->container['invited_by'];
    }

    /**
     * Sets invited_by
     *
     * @param int|null $invited_by invited_by
     *
     * @return self
     */
    public function setInvitedBy($invited_by)
    {

        if (is_null($invited_by)) {
            throw new InvalidArgumentException('non-nullable invited_by cannot be null');
        }

        $this->container['invited_by'] = $invited_by;

        return $this;
    }

    /**
     * Gets is_admin
     *
     * @return bool|null
     */
    public function getIsAdmin()
    {
        return $this->container['is_admin'];
    }

    /**
     * Sets is_admin
     *
     * @param bool|null $is_admin is_admin
     *
     * @return self
     */
    public function setIsAdmin($is_admin)
    {

        if (is_null($is_admin)) {
            throw new InvalidArgumentException('non-nullable is_admin cannot be null');
        }

        $this->container['is_admin'] = $is_admin;

        return $this;
    }

    /**
     * Gets is_owner
     *
     * @return bool|null
     */
    public function getIsOwner()
    {
        return $this->container['is_owner'];
    }

    /**
     * Sets is_owner
     *
     * @param bool|null $is_owner is_owner
     *
     * @return self
     */
    public function setIsOwner($is_owner)
    {

        if (is_null($is_owner)) {
            throw new InvalidArgumentException('non-nullable is_owner cannot be null');
        }

        $this->container['is_owner'] = $is_owner;

        return $this;
    }

    /**
     * Gets is_message_request
     *
     * @return bool|null
     */
    public function getIsMessageRequest()
    {
        return $this->container['is_message_request'];
    }

    /**
     * Sets is_message_request
     *
     * @param bool|null $is_message_request is_message_request
     *
     * @return self
     */
    public function setIsMessageRequest($is_message_request)
    {

        if (is_null($is_message_request)) {
            throw new InvalidArgumentException('non-nullable is_message_request cannot be null');
        }

        $this->container['is_message_request'] = $is_message_request;

        return $this;
    }

    /**
     * Gets join_date
     *
     * @return int|null
     */
    public function getJoinDate()
    {
        return $this->container['join_date'];
    }

    /**
     * Sets join_date
     *
     * @param int|null $join_date join_date
     *
     * @return self
     */
    public function setJoinDate($join_date)
    {

        if (!is_null($join_date) && ($join_date < 0)) {
            throw new InvalidArgumentException('invalid value for $join_date when calling MessagesConversationMember., must be bigger than or equal to 0.');
        }


        if (is_null($join_date)) {
            throw new InvalidArgumentException('non-nullable join_date cannot be null');
        }

        $this->container['join_date'] = $join_date;

        return $this;
    }

    /**
     * Gets request_date
     *
     * @return int|null
     */
    public function getRequestDate()
    {
        return $this->container['request_date'];
    }

    /**
     * Sets request_date
     *
     * @param int|null $request_date Message request date
     *
     * @return self
     */
    public function setRequestDate($request_date)
    {

        if (!is_null($request_date) && ($request_date < 0)) {
            throw new InvalidArgumentException('invalid value for $request_date when calling MessagesConversationMember., must be bigger than or equal to 0.');
        }


        if (is_null($request_date)) {
            throw new InvalidArgumentException('non-nullable request_date cannot be null');
        }

        $this->container['request_date'] = $request_date;

        return $this;
    }

    /**
     * Gets member_id
     *
     * @return int|null
     */
    public function getMemberId()
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param int|null $member_id member_id
     *
     * @return self
     */
    public function setMemberId($member_id)
    {

        if (is_null($member_id)) {
            throw new InvalidArgumentException('non-nullable member_id cannot be null');
        }

        $this->container['member_id'] = $member_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


