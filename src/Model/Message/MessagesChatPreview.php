<?php
/**
 * MessagesChatPreview
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VK api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.131
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VkApi\Model\Message;

use ArrayAccess;
use InvalidArgumentException;
use JsonSerializable;
use VkApi\Lib\ObjectSerializer;
use VkApi\Model\ModelInterface;

/**
 * MessagesChatPreview Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MessagesChatPreview implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'messages_chat_preview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'admin_id' => 'int',
        'joined' => 'bool',
        'local_id' => 'int',
        'members' => 'int[]',
        'members_count' => 'int',
        'title' => 'string',
        'is_member' => 'bool',
        'photo' => 'MessagesChatSettingsPhoto',
        'is_don' => 'bool',
        'is_group_channel' => 'bool',
        'button' => '\OpenAPI\Client\Model\BaseLinkButton'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'admin_id' => 'int64',
        'joined' => null,
        'local_id' => null,
        'members' => 'int64',
        'members_count' => null,
        'title' => null,
        'is_member' => null,
        'photo' => null,
        'is_don' => null,
        'is_group_channel' => null,
        'button' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'admin_id' => false,
		'joined' => false,
		'local_id' => false,
		'members' => false,
		'members_count' => false,
		'title' => false,
		'is_member' => false,
		'photo' => false,
		'is_don' => false,
		'is_group_channel' => false,
		'button' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'admin_id' => 'admin_id',
        'joined' => 'joined',
        'local_id' => 'local_id',
        'members' => 'members',
        'members_count' => 'members_count',
        'title' => 'title',
        'is_member' => 'is_member',
        'photo' => 'photo',
        'is_don' => 'is_don',
        'is_group_channel' => 'is_group_channel',
        'button' => 'button'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'admin_id' => 'setAdminId',
        'joined' => 'setJoined',
        'local_id' => 'setLocalId',
        'members' => 'setMembers',
        'members_count' => 'setMembersCount',
        'title' => 'setTitle',
        'is_member' => 'setIsMember',
        'photo' => 'setPhoto',
        'is_don' => 'setIsDon',
        'is_group_channel' => 'setIsGroupChannel',
        'button' => 'setButton'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'admin_id' => 'getAdminId',
        'joined' => 'getJoined',
        'local_id' => 'getLocalId',
        'members' => 'getMembers',
        'members_count' => 'getMembersCount',
        'title' => 'getTitle',
        'is_member' => 'getIsMember',
        'photo' => 'getPhoto',
        'is_don' => 'getIsDon',
        'is_group_channel' => 'getIsGroupChannel',
        'button' => 'getButton'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('admin_id', $data ?? [], null);
        $this->setIfExists('joined', $data ?? [], null);
        $this->setIfExists('local_id', $data ?? [], null);
        $this->setIfExists('members', $data ?? [], null);
        $this->setIfExists('members_count', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('is_member', $data ?? [], null);
        $this->setIfExists('photo', $data ?? [], null);
        $this->setIfExists('is_don', $data ?? [], null);
        $this->setIfExists('is_group_channel', $data ?? [], null);
        $this->setIfExists('button', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['admin_id']) && ($this->container['admin_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'admin_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['members_count']) && ($this->container['members_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'members_count', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets admin_id
     *
     * @return int|null
     */
    public function getAdminId()
    {
        return $this->container['admin_id'];
    }

    /**
     * Sets admin_id
     *
     * @param int|null $admin_id admin_id
     *
     * @return self
     */
    public function setAdminId($admin_id)
    {

        if (!is_null($admin_id) && ($admin_id < 0)) {
            throw new InvalidArgumentException('invalid value for $admin_id when calling MessagesChatPreview., must be bigger than or equal to 0.');
        }


        if (is_null($admin_id)) {
            throw new InvalidArgumentException('non-nullable admin_id cannot be null');
        }

        $this->container['admin_id'] = $admin_id;

        return $this;
    }

    /**
     * Gets joined
     *
     * @return bool|null
     */
    public function getJoined()
    {
        return $this->container['joined'];
    }

    /**
     * Sets joined
     *
     * @param bool|null $joined joined
     *
     * @return self
     */
    public function setJoined($joined)
    {

        if (is_null($joined)) {
            throw new InvalidArgumentException('non-nullable joined cannot be null');
        }

        $this->container['joined'] = $joined;

        return $this;
    }

    /**
     * Gets local_id
     *
     * @return int|null
     */
    public function getLocalId()
    {
        return $this->container['local_id'];
    }

    /**
     * Sets local_id
     *
     * @param int|null $local_id local_id
     *
     * @return self
     */
    public function setLocalId($local_id)
    {

        if (is_null($local_id)) {
            throw new InvalidArgumentException('non-nullable local_id cannot be null');
        }

        $this->container['local_id'] = $local_id;

        return $this;
    }

    /**
     * Gets members
     *
     * @return int[]|null
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param int[]|null $members members
     *
     * @return self
     */
    public function setMembers($members)
    {

        if (is_null($members)) {
            throw new InvalidArgumentException('non-nullable members cannot be null');
        }

        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets members_count
     *
     * @return int|null
     */
    public function getMembersCount()
    {
        return $this->container['members_count'];
    }

    /**
     * Sets members_count
     *
     * @param int|null $members_count members_count
     *
     * @return self
     */
    public function setMembersCount($members_count)
    {

        if (!is_null($members_count) && ($members_count < 0)) {
            throw new InvalidArgumentException('invalid value for $members_count when calling MessagesChatPreview., must be bigger than or equal to 0.');
        }


        if (is_null($members_count)) {
            throw new InvalidArgumentException('non-nullable members_count cannot be null');
        }

        $this->container['members_count'] = $members_count;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {

        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets is_member
     *
     * @return bool|null
     */
    public function getIsMember()
    {
        return $this->container['is_member'];
    }

    /**
     * Sets is_member
     *
     * @param bool|null $is_member is_member
     *
     * @return self
     */
    public function setIsMember($is_member)
    {

        if (is_null($is_member)) {
            throw new InvalidArgumentException('non-nullable is_member cannot be null');
        }

        $this->container['is_member'] = $is_member;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return MessagesChatSettingsPhoto|null
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param MessagesChatSettingsPhoto|null $photo photo
     *
     * @return self
     */
    public function setPhoto($photo)
    {

        if (is_null($photo)) {
            throw new InvalidArgumentException('non-nullable photo cannot be null');
        }

        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets is_don
     *
     * @return bool|null
     */
    public function getIsDon()
    {
        return $this->container['is_don'];
    }

    /**
     * Sets is_don
     *
     * @param bool|null $is_don is_don
     *
     * @return self
     */
    public function setIsDon($is_don)
    {

        if (is_null($is_don)) {
            throw new InvalidArgumentException('non-nullable is_don cannot be null');
        }

        $this->container['is_don'] = $is_don;

        return $this;
    }

    /**
     * Gets is_group_channel
     *
     * @return bool|null
     */
    public function getIsGroupChannel()
    {
        return $this->container['is_group_channel'];
    }

    /**
     * Sets is_group_channel
     *
     * @param bool|null $is_group_channel is_group_channel
     *
     * @return self
     */
    public function setIsGroupChannel($is_group_channel)
    {

        if (is_null($is_group_channel)) {
            throw new InvalidArgumentException('non-nullable is_group_channel cannot be null');
        }

        $this->container['is_group_channel'] = $is_group_channel;

        return $this;
    }

    /**
     * Gets button
     *
     * @return OpenAPI\Client\Model\BaseLinkButton|null
     */
    public function getButton()
    {
        return $this->container['button'];
    }

    /**
     * Sets button
     *
     * @param OpenAPI\Client\Model\BaseLinkButton|null $button button
     *
     * @return self
     */
    public function setButton($button)
    {

        if (is_null($button)) {
            throw new InvalidArgumentException('non-nullable button cannot be null');
        }

        $this->container['button'] = $button;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


