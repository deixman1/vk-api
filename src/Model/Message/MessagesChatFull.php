<?php
/**
 * MessagesChatFull
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VK api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.131
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VkApi\Model\Message;

use ArrayAccess;
use InvalidArgumentException;
use JsonSerializable;
use VkApi\Lib\ObjectSerializer;
use VkApi\Model\ModelInterface;

/**
 * MessagesChatFull Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MessagesChatFull implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'messages_chat_full';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'admin_id' => 'int',
        'id' => 'int',
        'kicked' => 'int',
        'left' => 'int',
        'photo_100' => 'string',
        'photo_200' => 'string',
        'photo_50' => 'string',
        'push_settings' => 'MessagesChatPushSettings',
        'title' => 'string',
        'type' => 'string',
        'users' => 'MessagesUserXtrInvitedBy[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'admin_id' => 'int64',
        'id' => null,
        'kicked' => null,
        'left' => null,
        'photo_100' => 'uri',
        'photo_200' => 'uri',
        'photo_50' => 'uri',
        'push_settings' => null,
        'title' => null,
        'type' => null,
        'users' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'admin_id' => false,
		'id' => false,
		'kicked' => false,
		'left' => false,
		'photo_100' => false,
		'photo_200' => false,
		'photo_50' => false,
		'push_settings' => false,
		'title' => false,
		'type' => false,
		'users' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'admin_id' => 'admin_id',
        'id' => 'id',
        'kicked' => 'kicked',
        'left' => 'left',
        'photo_100' => 'photo_100',
        'photo_200' => 'photo_200',
        'photo_50' => 'photo_50',
        'push_settings' => 'push_settings',
        'title' => 'title',
        'type' => 'type',
        'users' => 'users'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'admin_id' => 'setAdminId',
        'id' => 'setId',
        'kicked' => 'setKicked',
        'left' => 'setLeft',
        'photo_100' => 'setPhoto100',
        'photo_200' => 'setPhoto200',
        'photo_50' => 'setPhoto50',
        'push_settings' => 'setPushSettings',
        'title' => 'setTitle',
        'type' => 'setType',
        'users' => 'setUsers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'admin_id' => 'getAdminId',
        'id' => 'getId',
        'kicked' => 'getKicked',
        'left' => 'getLeft',
        'photo_100' => 'getPhoto100',
        'photo_200' => 'getPhoto200',
        'photo_50' => 'getPhoto50',
        'push_settings' => 'getPushSettings',
        'title' => 'getTitle',
        'type' => 'getType',
        'users' => 'getUsers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const KICKED_0 = 0;
    public const KICKED_1 = 1;
    public const LEFT_0 = 0;
    public const LEFT_1 = 1;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKickedAllowableValues()
    {
        return [
            self::KICKED_0,
            self::KICKED_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLeftAllowableValues()
    {
        return [
            self::LEFT_0,
            self::LEFT_1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('admin_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('kicked', $data ?? [], null);
        $this->setIfExists('left', $data ?? [], null);
        $this->setIfExists('photo_100', $data ?? [], null);
        $this->setIfExists('photo_200', $data ?? [], null);
        $this->setIfExists('photo_50', $data ?? [], null);
        $this->setIfExists('push_settings', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('users', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getKickedAllowableValues();
        if (!is_null($this->container['kicked']) && !in_array($this->container['kicked'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'kicked', must be one of '%s'",
                $this->container['kicked'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLeftAllowableValues();
        if (!is_null($this->container['left']) && !in_array($this->container['left'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'left', must be one of '%s'",
                $this->container['left'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets admin_id
     *
     * @return int|null
     */
    public function getAdminId()
    {
        return $this->container['admin_id'];
    }

    /**
     * Sets admin_id
     *
     * @param int|null $admin_id Chat creator ID
     *
     * @return self
     */
    public function setAdminId($admin_id)
    {

        if (is_null($admin_id)) {
            throw new InvalidArgumentException('non-nullable admin_id cannot be null');
        }

        $this->container['admin_id'] = $admin_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Chat ID
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets kicked
     *
     * @return int|null
     */
    public function getKicked()
    {
        return $this->container['kicked'];
    }

    /**
     * Sets kicked
     *
     * @param int|null $kicked Shows that user has been kicked from the chat
     *
     * @return self
     */
    public function setKicked($kicked)
    {
        $allowedValues = $this->getKickedAllowableValues();
        if (!is_null($kicked) && !in_array($kicked, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'kicked', must be one of '%s'",
                    $kicked,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($kicked)) {
            throw new InvalidArgumentException('non-nullable kicked cannot be null');
        }

        $this->container['kicked'] = $kicked;

        return $this;
    }

    /**
     * Gets left
     *
     * @return int|null
     */
    public function getLeft()
    {
        return $this->container['left'];
    }

    /**
     * Sets left
     *
     * @param int|null $left Shows that user has been left the chat
     *
     * @return self
     */
    public function setLeft($left)
    {
        $allowedValues = $this->getLeftAllowableValues();
        if (!is_null($left) && !in_array($left, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'left', must be one of '%s'",
                    $left,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($left)) {
            throw new InvalidArgumentException('non-nullable left cannot be null');
        }

        $this->container['left'] = $left;

        return $this;
    }

    /**
     * Gets photo_100
     *
     * @return string|null
     */
    public function getPhoto100()
    {
        return $this->container['photo_100'];
    }

    /**
     * Sets photo_100
     *
     * @param string|null $photo_100 URL of the preview image with 100 px in width
     *
     * @return self
     */
    public function setPhoto100($photo_100)
    {

        if (is_null($photo_100)) {
            throw new InvalidArgumentException('non-nullable photo_100 cannot be null');
        }

        $this->container['photo_100'] = $photo_100;

        return $this;
    }

    /**
     * Gets photo_200
     *
     * @return string|null
     */
    public function getPhoto200()
    {
        return $this->container['photo_200'];
    }

    /**
     * Sets photo_200
     *
     * @param string|null $photo_200 URL of the preview image with 200 px in width
     *
     * @return self
     */
    public function setPhoto200($photo_200)
    {

        if (is_null($photo_200)) {
            throw new InvalidArgumentException('non-nullable photo_200 cannot be null');
        }

        $this->container['photo_200'] = $photo_200;

        return $this;
    }

    /**
     * Gets photo_50
     *
     * @return string|null
     */
    public function getPhoto50()
    {
        return $this->container['photo_50'];
    }

    /**
     * Sets photo_50
     *
     * @param string|null $photo_50 URL of the preview image with 50 px in width
     *
     * @return self
     */
    public function setPhoto50($photo_50)
    {

        if (is_null($photo_50)) {
            throw new InvalidArgumentException('non-nullable photo_50 cannot be null');
        }

        $this->container['photo_50'] = $photo_50;

        return $this;
    }

    /**
     * Gets push_settings
     *
     * @return MessagesChatPushSettings|null
     */
    public function getPushSettings()
    {
        return $this->container['push_settings'];
    }

    /**
     * Sets push_settings
     *
     * @param MessagesChatPushSettings|null $push_settings push_settings
     *
     * @return self
     */
    public function setPushSettings($push_settings)
    {

        if (is_null($push_settings)) {
            throw new InvalidArgumentException('non-nullable push_settings cannot be null');
        }

        $this->container['push_settings'] = $push_settings;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Chat title
     *
     * @return self
     */
    public function setTitle($title)
    {

        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Chat type
     *
     * @return self
     */
    public function setType($type)
    {

        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets users
     *
     * @return MessagesUserXtrInvitedBy[]|null
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param MessagesUserXtrInvitedBy[]|null $users users
     *
     * @return self
     */
    public function setUsers($users)
    {

        if (is_null($users)) {
            throw new InvalidArgumentException('non-nullable users cannot be null');
        }

        $this->container['users'] = $users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


