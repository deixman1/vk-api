<?php
/**
 * MessagesMessage
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VK api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.131
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VkApi\Model\Message;

use ArrayAccess;
use InvalidArgumentException;
use JsonSerializable;
use VkApi\Lib\ObjectSerializer;
use VkApi\Model\ModelInterface;

/**
 * MessagesMessage Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MessagesMessage implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'messages_message';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action' => 'MessagesMessageAction',
        'admin_author_id' => 'int',
        'attachments' => 'MessagesMessageAttachment[]',
        'conversation_message_id' => 'int',
        'date' => 'int',
        'deleted' => 'int',
        'from_id' => 'int',
        'fwd_messages' => 'MessagesForeignMessage[]',
        'geo' => '\OpenAPI\Client\Model\BaseGeo',
        'id' => 'int',
        'important' => 'bool',
        'is_hidden' => 'bool',
        'is_cropped' => 'bool',
        'keyboard' => 'MessagesKeyboard',
        'members_count' => 'int',
        'out' => 'int',
        'payload' => 'string',
        'peer_id' => 'int',
        'random_id' => 'int',
        'ref' => 'string',
        'ref_source' => 'string',
        'reply_message' => 'MessagesForeignMessage',
        'text' => 'string',
        'update_time' => 'int',
        'was_listened' => 'bool',
        'pinned_at' => 'int',
        'is_silent' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action' => null,
        'admin_author_id' => 'int64',
        'attachments' => null,
        'conversation_message_id' => null,
        'date' => null,
        'deleted' => null,
        'from_id' => 'int64',
        'fwd_messages' => null,
        'geo' => null,
        'id' => null,
        'important' => null,
        'is_hidden' => null,
        'is_cropped' => null,
        'keyboard' => null,
        'members_count' => null,
        'out' => null,
        'payload' => null,
        'peer_id' => null,
        'random_id' => null,
        'ref' => null,
        'ref_source' => null,
        'reply_message' => null,
        'text' => null,
        'update_time' => null,
        'was_listened' => null,
        'pinned_at' => null,
        'is_silent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'action' => false,
		'admin_author_id' => false,
		'attachments' => false,
		'conversation_message_id' => false,
		'date' => false,
		'deleted' => false,
		'from_id' => false,
		'fwd_messages' => false,
		'geo' => false,
		'id' => false,
		'important' => false,
		'is_hidden' => false,
		'is_cropped' => false,
		'keyboard' => false,
		'members_count' => false,
		'out' => false,
		'payload' => false,
		'peer_id' => false,
		'random_id' => false,
		'ref' => false,
		'ref_source' => false,
		'reply_message' => false,
		'text' => false,
		'update_time' => false,
		'was_listened' => false,
		'pinned_at' => false,
		'is_silent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'action',
        'admin_author_id' => 'admin_author_id',
        'attachments' => 'attachments',
        'conversation_message_id' => 'conversation_message_id',
        'date' => 'date',
        'deleted' => 'deleted',
        'from_id' => 'from_id',
        'fwd_messages' => 'fwd_messages',
        'geo' => 'geo',
        'id' => 'id',
        'important' => 'important',
        'is_hidden' => 'is_hidden',
        'is_cropped' => 'is_cropped',
        'keyboard' => 'keyboard',
        'members_count' => 'members_count',
        'out' => 'out',
        'payload' => 'payload',
        'peer_id' => 'peer_id',
        'random_id' => 'random_id',
        'ref' => 'ref',
        'ref_source' => 'ref_source',
        'reply_message' => 'reply_message',
        'text' => 'text',
        'update_time' => 'update_time',
        'was_listened' => 'was_listened',
        'pinned_at' => 'pinned_at',
        'is_silent' => 'is_silent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'admin_author_id' => 'setAdminAuthorId',
        'attachments' => 'setAttachments',
        'conversation_message_id' => 'setConversationMessageId',
        'date' => 'setDate',
        'deleted' => 'setDeleted',
        'from_id' => 'setFromId',
        'fwd_messages' => 'setFwdMessages',
        'geo' => 'setGeo',
        'id' => 'setId',
        'important' => 'setImportant',
        'is_hidden' => 'setIsHidden',
        'is_cropped' => 'setIsCropped',
        'keyboard' => 'setKeyboard',
        'members_count' => 'setMembersCount',
        'out' => 'setOut',
        'payload' => 'setPayload',
        'peer_id' => 'setPeerId',
        'random_id' => 'setRandomId',
        'ref' => 'setRef',
        'ref_source' => 'setRefSource',
        'reply_message' => 'setReplyMessage',
        'text' => 'setText',
        'update_time' => 'setUpdateTime',
        'was_listened' => 'setWasListened',
        'pinned_at' => 'setPinnedAt',
        'is_silent' => 'setIsSilent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'admin_author_id' => 'getAdminAuthorId',
        'attachments' => 'getAttachments',
        'conversation_message_id' => 'getConversationMessageId',
        'date' => 'getDate',
        'deleted' => 'getDeleted',
        'from_id' => 'getFromId',
        'fwd_messages' => 'getFwdMessages',
        'geo' => 'getGeo',
        'id' => 'getId',
        'important' => 'getImportant',
        'is_hidden' => 'getIsHidden',
        'is_cropped' => 'getIsCropped',
        'keyboard' => 'getKeyboard',
        'members_count' => 'getMembersCount',
        'out' => 'getOut',
        'payload' => 'getPayload',
        'peer_id' => 'getPeerId',
        'random_id' => 'getRandomId',
        'ref' => 'getRef',
        'ref_source' => 'getRefSource',
        'reply_message' => 'getReplyMessage',
        'text' => 'getText',
        'update_time' => 'getUpdateTime',
        'was_listened' => 'getWasListened',
        'pinned_at' => 'getPinnedAt',
        'is_silent' => 'getIsSilent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const DELETED_0 = 0;
    public const DELETED_1 = 1;
    public const OUT_0 = 0;
    public const OUT_1 = 1;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeletedAllowableValues()
    {
        return [
            self::DELETED_0,
            self::DELETED_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutAllowableValues()
    {
        return [
            self::OUT_0,
            self::OUT_1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('admin_author_id', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('conversation_message_id', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('from_id', $data ?? [], null);
        $this->setIfExists('fwd_messages', $data ?? [], null);
        $this->setIfExists('geo', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('important', $data ?? [], null);
        $this->setIfExists('is_hidden', $data ?? [], null);
        $this->setIfExists('is_cropped', $data ?? [], null);
        $this->setIfExists('keyboard', $data ?? [], null);
        $this->setIfExists('members_count', $data ?? [], null);
        $this->setIfExists('out', $data ?? [], null);
        $this->setIfExists('payload', $data ?? [], null);
        $this->setIfExists('peer_id', $data ?? [], null);
        $this->setIfExists('random_id', $data ?? [], null);
        $this->setIfExists('ref', $data ?? [], null);
        $this->setIfExists('ref_source', $data ?? [], null);
        $this->setIfExists('reply_message', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('update_time', $data ?? [], null);
        $this->setIfExists('was_listened', $data ?? [], null);
        $this->setIfExists('pinned_at', $data ?? [], null);
        $this->setIfExists('is_silent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeletedAllowableValues();
        if (!is_null($this->container['deleted']) && !in_array($this->container['deleted'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deleted', must be one of '%s'",
                $this->container['deleted'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOutAllowableValues();
        if (!is_null($this->container['out']) && !in_array($this->container['out'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'out', must be one of '%s'",
                $this->container['out'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return MessagesMessageAction|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param MessagesMessageAction|null $action action
     *
     * @return self
     */
    public function setAction($action)
    {

        if (is_null($action)) {
            throw new InvalidArgumentException('non-nullable action cannot be null');
        }

        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets admin_author_id
     *
     * @return int|null
     */
    public function getAdminAuthorId()
    {
        return $this->container['admin_author_id'];
    }

    /**
     * Sets admin_author_id
     *
     * @param int|null $admin_author_id Only for messages from community. Contains user ID of community admin, who sent this message.
     *
     * @return self
     */
    public function setAdminAuthorId($admin_author_id)
    {

        if (is_null($admin_author_id)) {
            throw new InvalidArgumentException('non-nullable admin_author_id cannot be null');
        }

        $this->container['admin_author_id'] = $admin_author_id;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return MessagesMessageAttachment[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param MessagesMessageAttachment[]|null $attachments attachments
     *
     * @return self
     */
    public function setAttachments($attachments)
    {

        if (is_null($attachments)) {
            throw new InvalidArgumentException('non-nullable attachments cannot be null');
        }

        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets conversation_message_id
     *
     * @return int|null
     */
    public function getConversationMessageId()
    {
        return $this->container['conversation_message_id'];
    }

    /**
     * Sets conversation_message_id
     *
     * @param int|null $conversation_message_id Unique auto-incremented number for all messages with this peer
     *
     * @return self
     */
    public function setConversationMessageId($conversation_message_id)
    {

        if (is_null($conversation_message_id)) {
            throw new InvalidArgumentException('non-nullable conversation_message_id cannot be null');
        }

        $this->container['conversation_message_id'] = $conversation_message_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return int|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param int|null $date Date when the message has been sent in Unixtime
     *
     * @return self
     */
    public function setDate($date)
    {

        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }

        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return int|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param int|null $deleted Is it an deleted message
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        $allowedValues = $this->getDeletedAllowableValues();
        if (!is_null($deleted) && !in_array($deleted, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deleted', must be one of '%s'",
                    $deleted,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($deleted)) {
            throw new InvalidArgumentException('non-nullable deleted cannot be null');
        }

        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets from_id
     *
     * @return int|null
     */
    public function getFromId()
    {
        return $this->container['from_id'];
    }

    /**
     * Sets from_id
     *
     * @param int|null $from_id Message author's ID
     *
     * @return self
     */
    public function setFromId($from_id)
    {

        if (is_null($from_id)) {
            throw new InvalidArgumentException('non-nullable from_id cannot be null');
        }

        $this->container['from_id'] = $from_id;

        return $this;
    }

    /**
     * Gets fwd_messages
     *
     * @return MessagesForeignMessage[]|null
     */
    public function getFwdMessages()
    {
        return $this->container['fwd_messages'];
    }

    /**
     * Sets fwd_messages
     *
     * @param MessagesForeignMessage[]|null $fwd_messages Forwarded messages
     *
     * @return self
     */
    public function setFwdMessages($fwd_messages)
    {

        if (is_null($fwd_messages)) {
            throw new InvalidArgumentException('non-nullable fwd_messages cannot be null');
        }

        $this->container['fwd_messages'] = $fwd_messages;

        return $this;
    }

    /**
     * Gets geo
     *
     * @return OpenAPI\Client\Model\BaseGeo|null
     */
    public function getGeo()
    {
        return $this->container['geo'];
    }

    /**
     * Sets geo
     *
     * @param OpenAPI\Client\Model\BaseGeo|null $geo geo
     *
     * @return self
     */
    public function setGeo($geo)
    {

        if (is_null($geo)) {
            throw new InvalidArgumentException('non-nullable geo cannot be null');
        }

        $this->container['geo'] = $geo;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Message ID
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets important
     *
     * @return bool|null
     */
    public function getImportant()
    {
        return $this->container['important'];
    }

    /**
     * Sets important
     *
     * @param bool|null $important Is it an important message
     *
     * @return self
     */
    public function setImportant($important)
    {

        if (is_null($important)) {
            throw new InvalidArgumentException('non-nullable important cannot be null');
        }

        $this->container['important'] = $important;

        return $this;
    }

    /**
     * Gets is_hidden
     *
     * @return bool|null
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param bool|null $is_hidden is_hidden
     *
     * @return self
     */
    public function setIsHidden($is_hidden)
    {

        if (is_null($is_hidden)) {
            throw new InvalidArgumentException('non-nullable is_hidden cannot be null');
        }

        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets is_cropped
     *
     * @return bool|null
     */
    public function getIsCropped()
    {
        return $this->container['is_cropped'];
    }

    /**
     * Sets is_cropped
     *
     * @param bool|null $is_cropped this message is cropped for bot
     *
     * @return self
     */
    public function setIsCropped($is_cropped)
    {

        if (is_null($is_cropped)) {
            throw new InvalidArgumentException('non-nullable is_cropped cannot be null');
        }

        $this->container['is_cropped'] = $is_cropped;

        return $this;
    }

    /**
     * Gets keyboard
     *
     * @return MessagesKeyboard|null
     */
    public function getKeyboard()
    {
        return $this->container['keyboard'];
    }

    /**
     * Sets keyboard
     *
     * @param MessagesKeyboard|null $keyboard keyboard
     *
     * @return self
     */
    public function setKeyboard($keyboard)
    {

        if (is_null($keyboard)) {
            throw new InvalidArgumentException('non-nullable keyboard cannot be null');
        }

        $this->container['keyboard'] = $keyboard;

        return $this;
    }

    /**
     * Gets members_count
     *
     * @return int|null
     */
    public function getMembersCount()
    {
        return $this->container['members_count'];
    }

    /**
     * Sets members_count
     *
     * @param int|null $members_count Members number
     *
     * @return self
     */
    public function setMembersCount($members_count)
    {

        if (is_null($members_count)) {
            throw new InvalidArgumentException('non-nullable members_count cannot be null');
        }

        $this->container['members_count'] = $members_count;

        return $this;
    }

    /**
     * Gets out
     *
     * @return int|null
     */
    public function getOut()
    {
        return $this->container['out'];
    }

    /**
     * Sets out
     *
     * @param int|null $out Information whether the message is outcoming
     *
     * @return self
     */
    public function setOut($out)
    {
        $allowedValues = $this->getOutAllowableValues();
        if (!is_null($out) && !in_array($out, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'out', must be one of '%s'",
                    $out,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($out)) {
            throw new InvalidArgumentException('non-nullable out cannot be null');
        }

        $this->container['out'] = $out;

        return $this;
    }

    /**
     * Gets payload
     *
     * @return string|null
     */
    public function getPayload()
    {
        return $this->container['payload'];
    }

    /**
     * Sets payload
     *
     * @param string|null $payload payload
     *
     * @return self
     */
    public function setPayload($payload)
    {

        if (is_null($payload)) {
            throw new InvalidArgumentException('non-nullable payload cannot be null');
        }

        $this->container['payload'] = $payload;

        return $this;
    }

    /**
     * Gets peer_id
     *
     * @return int|null
     */
    public function getPeerId()
    {
        return $this->container['peer_id'];
    }

    /**
     * Sets peer_id
     *
     * @param int|null $peer_id Peer ID
     *
     * @return self
     */
    public function setPeerId($peer_id)
    {

        if (is_null($peer_id)) {
            throw new InvalidArgumentException('non-nullable peer_id cannot be null');
        }

        $this->container['peer_id'] = $peer_id;

        return $this;
    }

    /**
     * Gets random_id
     *
     * @return int|null
     */
    public function getRandomId()
    {
        return $this->container['random_id'];
    }

    /**
     * Sets random_id
     *
     * @param int|null $random_id ID used for sending messages. It returned only for outgoing messages
     *
     * @return self
     */
    public function setRandomId($random_id)
    {

        if (is_null($random_id)) {
            throw new InvalidArgumentException('non-nullable random_id cannot be null');
        }

        $this->container['random_id'] = $random_id;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return string|null
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string|null $ref ref
     *
     * @return self
     */
    public function setRef($ref)
    {

        if (is_null($ref)) {
            throw new InvalidArgumentException('non-nullable ref cannot be null');
        }

        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets ref_source
     *
     * @return string|null
     */
    public function getRefSource()
    {
        return $this->container['ref_source'];
    }

    /**
     * Sets ref_source
     *
     * @param string|null $ref_source ref_source
     *
     * @return self
     */
    public function setRefSource($ref_source)
    {

        if (is_null($ref_source)) {
            throw new InvalidArgumentException('non-nullable ref_source cannot be null');
        }

        $this->container['ref_source'] = $ref_source;

        return $this;
    }

    /**
     * Gets reply_message
     *
     * @return MessagesForeignMessage|null
     */
    public function getReplyMessage()
    {
        return $this->container['reply_message'];
    }

    /**
     * Sets reply_message
     *
     * @param MessagesForeignMessage|null $reply_message reply_message
     *
     * @return self
     */
    public function setReplyMessage($reply_message)
    {

        if (is_null($reply_message)) {
            throw new InvalidArgumentException('non-nullable reply_message cannot be null');
        }

        $this->container['reply_message'] = $reply_message;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text Message text
     *
     * @return self
     */
    public function setText($text)
    {

        if (is_null($text)) {
            throw new InvalidArgumentException('non-nullable text cannot be null');
        }

        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return int|null
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param int|null $update_time Date when the message has been updated in Unixtime
     *
     * @return self
     */
    public function setUpdateTime($update_time)
    {

        if (is_null($update_time)) {
            throw new InvalidArgumentException('non-nullable update_time cannot be null');
        }

        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets was_listened
     *
     * @return bool|null
     */
    public function getWasListened()
    {
        return $this->container['was_listened'];
    }

    /**
     * Sets was_listened
     *
     * @param bool|null $was_listened Was the audio message inside already listened by you
     *
     * @return self
     */
    public function setWasListened($was_listened)
    {

        if (is_null($was_listened)) {
            throw new InvalidArgumentException('non-nullable was_listened cannot be null');
        }

        $this->container['was_listened'] = $was_listened;

        return $this;
    }

    /**
     * Gets pinned_at
     *
     * @return int|null
     */
    public function getPinnedAt()
    {
        return $this->container['pinned_at'];
    }

    /**
     * Sets pinned_at
     *
     * @param int|null $pinned_at Date when the message has been pinned in Unixtime
     *
     * @return self
     */
    public function setPinnedAt($pinned_at)
    {

        if (is_null($pinned_at)) {
            throw new InvalidArgumentException('non-nullable pinned_at cannot be null');
        }

        $this->container['pinned_at'] = $pinned_at;

        return $this;
    }

    /**
     * Gets is_silent
     *
     * @return bool|null
     */
    public function getIsSilent()
    {
        return $this->container['is_silent'];
    }

    /**
     * Sets is_silent
     *
     * @param bool|null $is_silent Is silent message, push without sound
     *
     * @return self
     */
    public function setIsSilent($is_silent)
    {

        if (is_null($is_silent)) {
            throw new InvalidArgumentException('non-nullable is_silent cannot be null');
        }

        $this->container['is_silent'] = $is_silent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


