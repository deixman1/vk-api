openapi: 3.0.1
info:
  title: 'VK api'
  version: '5.131'
servers:
  -
    description: 'Сервер VK'
    url: 'https://api.vk.com'
paths:
  /method/account.ban:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/account.changePassword:
    get:
      parameters:
        -
          in: query
          name: restore_sid
          description: 'Session id received after the [vk.com/dev/auth.restore|auth.restore] method is executed. (If the password is changed right after the access was restored)'
          schema:
            type: string
        -
          in: query
          name: change_password_hash
          description: 'Hash received after a successful OAuth authorization with a code got by SMS. (If the password is changed right after the access was restored)'
          schema:
            type: string
        -
          in: query
          name: old_password
          description: 'Current user password.'
          schema:
            type: string
        -
          in: query
          name: new_password
          description: 'New password that will be set as a current'
          schema:
            type: string
            minLength: 6
      responses:
        200:
          $ref: '#/components/schemas/account_changePassword_response'
  /method/account.getActiveOffers:
    get:
      parameters:
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of results to return.'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 100
      responses:
        200:
          $ref: '#/components/schemas/account_getActiveOffers_response'
  /method/account.getAppPermissions:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID whose settings information shall be got. By default: current user.'
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/account_getAppPermissions_response'
  /method/account.getBanned:
    get:
      parameters:
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of results.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of results to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 200
      responses:
        200:
          $ref: '#/components/schemas/account_getBanned_response'
  /method/account.getCounters:
    get:
      parameters:
        -
          in: query
          name: filter
          description: 'Counters to be returned.'
          schema:
            type: array
            items:
              type: string
              enum:
                - friends
                - messages
                - photos
                - notes
                - gifts
                - events
                - groups
                - sdk
                - friends_suggestions
                - notifications
                - app_requests
                - friends_recommendations
        -
          in: query
          name: user_id
          description: 'User ID'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/account_getCounters_response'
  /method/account.getInfo:
    get:
      parameters:
        -
          in: query
          name: fields
          description: "Fields to return. Possible values: *'country' — user country,, *'https_required' — is \"HTTPS only\" option enabled,, *'own_posts_default' — is \"Show my posts only\" option is enabled,, *'no_wall_replies' — are wall replies disabled or not,, *'intro' — is intro passed by user or not,, *'lang' — user language. By default: all."
          schema:
            type: array
            items:
              type: string
              enum:
                - country
                - https_required
                - own_posts_default
                - no_wall_replies
                - intro
                - lang
      responses:
        200:
          $ref: '#/components/schemas/account_getInfo_response'
  /method/account.getProfileInfo:
    get:
      responses:
        200:
          $ref: '#/components/schemas/account_getProfileInfo_response'
  /method/account.getPushSettings:
    get:
      parameters:
        -
          in: query
          name: device_id
          description: 'Unique device ID.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/account_getPushSettings_response'
  /method/account.registerDevice:
    get:
      parameters:
        -
          in: query
          name: token
          description: 'Device token used to send notifications. (for mpns, the token shall be URL for sending of notifications)'
          schema:
            type: string
        -
          in: query
          name: device_model
          description: 'String name of device model.'
          schema:
            type: string
        -
          in: query
          name: device_year
          description: 'Device year.'
          schema:
            type: integer
        -
          in: query
          name: device_id
          description: 'Unique device ID.'
          schema:
            type: string
        -
          in: query
          name: system_version
          description: 'String version of device operating system.'
          schema:
            type: string
        -
          in: query
          name: settings
          description: 'Push settings in a [vk.com/dev/push_settings|special format].'
          schema:
            type: string
        -
          in: query
          name: sandbox
          description: ''
          schema:
            type: boolean
            default: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/account.saveProfileInfo:
    get:
      parameters:
        -
          in: query
          name: first_name
          description: 'User first name.'
          schema:
            type: string
        -
          in: query
          name: last_name
          description: 'User last name.'
          schema:
            type: string
        -
          in: query
          name: maiden_name
          description: 'User maiden name (female only)'
          schema:
            type: string
        -
          in: query
          name: screen_name
          description: 'User screen name.'
          schema:
            type: string
        -
          in: query
          name: cancel_request_id
          description: 'ID of the name change request to be canceled. If this parameter is sent, all the others are ignored.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: sex
          description: "User sex. Possible values: , * '1' - female,, * '2' - male."
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
        -
          in: query
          name: relation
          description: "User relationship status. Possible values: , * '1' - single,, * '2' - in a relationship,, * '3' - engaged,, * '4' - married,, * '5' - it's complicated,, * '6' - actively searching,, * '7' - in love,, * '0' - not specified."
          schema:
            type: integer
            minimum: 0
            enum:
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
              - 7
              - 0
        -
          in: query
          name: relation_partner_id
          description: 'ID of the relationship partner.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: bdate
          description: 'User birth date, format: DD.MM.YYYY.'
          schema:
            type: string
        -
          in: query
          name: bdate_visibility
          description: "Birth date visibility. Returned values: , * '1' - show birth date,, * '2' - show only month and day,, * '0' - hide birth date."
          schema:
            type: integer
            minimum: 0
            enum:
              - 1
              - 2
              - 0
        -
          in: query
          name: home_town
          description: 'User home town.'
          schema:
            type: string
        -
          in: query
          name: country_id
          description: 'User country.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: city_id
          description: 'User city.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: status
          description: 'Status text.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/account_saveProfileInfo_response'
  /method/account.setInfo:
    get:
      parameters:
        -
          in: query
          name: name
          description: 'Setting name.'
          schema:
            type: string
            enum:
              - intro
              - no_wall_replies
              - own_posts_default
        -
          in: query
          name: value
          description: 'Setting value.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/account.setOffline:
    get:
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/account.setOnline:
    get:
      parameters:
        -
          in: query
          name: voip
          description: "'1' if videocalls are available for current device."
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/account.setPushSettings:
    get:
      parameters:
        -
          in: query
          name: device_id
          description: 'Unique device ID.'
          schema:
            type: string
        -
          in: query
          name: settings
          description: 'Push settings in a [vk.com/dev/push_settings|special format].'
          schema:
            type: string
        -
          in: query
          name: key
          description: 'Notification key.'
          schema:
            type: string
        -
          in: query
          name: value
          description: 'New value for the key in a [vk.com/dev/push_settings|special format].'
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/account.setSilenceMode:
    get:
      parameters:
        -
          in: query
          name: device_id
          description: 'Unique device ID.'
          schema:
            type: string
        -
          in: query
          name: time
          description: "Time in seconds for what notifications should be disabled. '-1' to disable forever."
          schema:
            type: integer
        -
          in: query
          name: peer_id
          description: "Destination ID. \"For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'Chat ID', e.g. '2000000001'. For community: '- Community ID', e.g. '-12345'. \""
          schema:
            type: integer
        -
          in: query
          name: sound
          description: "'1' — to enable sound in this dialog, '0' — to disable sound. Only if 'peer_id' contains user or community ID."
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/account.unban:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/account.unregisterDevice:
    get:
      parameters:
        -
          in: query
          name: device_id
          description: 'Unique device ID.'
          schema:
            type: string
        -
          in: query
          name: sandbox
          description: ''
          schema:
            type: boolean
            default: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/ads.addOfficeUsers:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: data
          description: "Serialized JSON array of objects that describe added managers. Description of 'user_specification' objects see below."
          schema:
            type: string
            items:
              $ref: '#/components/schemas/ads_user_specification_cutted'
            minItems: 1
            maxItems: 10
      responses:
        200:
          $ref: '#/components/schemas/ads_addOfficeUsers_response'
  /method/ads.checkLink:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: link_type
          description: "Object type: *'community' — community,, *'post' — community post,, *'application' — VK application,, *'video' — video,, *'site' — external site."
          schema:
            type: string
            enum:
              - community
              - post
              - application
              - video
              - site
        -
          in: query
          name: link_url
          description: 'Object URL.'
          schema:
            type: string
        -
          in: query
          name: campaign_id
          description: 'Campaign ID'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/ads_checkLink_response'
  /method/ads.createAds:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: data
          description: "Serialized JSON array of objects that describe created ads. Description of 'ad_specification' objects see below."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_createAds_response'
  /method/ads.createCampaigns:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: data
          description: "Serialized JSON array of objects that describe created campaigns. Description of 'campaign_specification' objects see below."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_createCampaigns_response'
  /method/ads.createClients:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: data
          description: "Serialized JSON array of objects that describe created campaigns. Description of 'client_specification' objects see below."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_createClients_response'
  /method/ads.createTargetGroup:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: client_id
          description: "'Only for advertising agencies.', ID of the client with the advertising account where the group will be created."
          schema:
            type: integer
        -
          in: query
          name: name
          description: 'Name of the target group — a string up to 64 characters long.'
          schema:
            type: string
        -
          in: query
          name: lifetime
          description: "'For groups with auditory created with pixel code only.', , Number of days after that users will be automatically removed from the group."
          schema:
            type: integer
            minimum: 1
            maximum: 720
        -
          in: query
          name: target_pixel_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: target_pixel_rules
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_createTargetGroup_response'
  /method/ads.deleteAds:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: ids
          description: 'Serialized JSON array with ad IDs.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_deleteAds_response'
  /method/ads.deleteCampaigns:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: ids
          description: 'Serialized JSON array with IDs of deleted campaigns.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_deleteCampaigns_response'
  /method/ads.deleteClients:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: ids
          description: 'Serialized JSON array with IDs of deleted clients.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_deleteClients_response'
  /method/ads.deleteTargetGroup:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: client_id
          description: "'Only for advertising agencies.' , ID of the client with the advertising account where the group will be created."
          schema:
            type: integer
        -
          in: query
          name: target_group_id
          description: 'Group ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/ads.getAccounts:
    get:
      responses:
        200:
          $ref: '#/components/schemas/ads_getAccounts_response'
  /method/ads.getAds:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: ad_ids
          description: 'Filter by ads. Serialized JSON array with ad IDs. If the parameter is null, all ads will be shown.'
          schema:
            type: string
        -
          in: query
          name: campaign_ids
          description: 'Filter by advertising campaigns. Serialized JSON array with campaign IDs. If the parameter is null, ads of all campaigns will be shown.'
          schema:
            type: string
        -
          in: query
          name: client_id
          description: "'Available and required for advertising agencies.' ID of the client ads are retrieved from."
          schema:
            type: integer
        -
          in: query
          name: include_deleted
          description: 'Flag that specifies whether archived ads shall be shown: *0 — show only active ads,, *1 — show all ads.'
          schema:
            type: boolean
        -
          in: query
          name: only_deleted
          description: 'Flag that specifies whether to show only archived ads: *0 — show all ads,, *1 — show only archived ads. Available when include_deleted flag is *1'
          schema:
            type: boolean
        -
          in: query
          name: limit
          description: "Limit of number of returned ads. Used only if ad_ids parameter is null, and 'campaign_ids' parameter contains ID of only one campaign."
          schema:
            type: integer
        -
          in: query
          name: offset
          description: "Offset. Used in the same cases as 'limit' parameter."
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/ads_getAds_response'
  /method/ads.getAdsLayout:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: client_id
          description: "'For advertising agencies.' ID of the client ads are retrieved from."
          schema:
            type: integer
        -
          in: query
          name: include_deleted
          description: 'Flag that specifies whether archived ads shall be shown. *0 — show only active ads,, *1 — show all ads.'
          schema:
            type: boolean
        -
          in: query
          name: only_deleted
          description: 'Flag that specifies whether to show only archived ads: *0 — show all ads,, *1 — show only archived ads. Available when include_deleted flag is *1'
          schema:
            type: boolean
        -
          in: query
          name: campaign_ids
          description: 'Filter by advertising campaigns. Serialized JSON array with campaign IDs. If the parameter is null, ads of all campaigns will be shown.'
          schema:
            type: string
        -
          in: query
          name: ad_ids
          description: 'Filter by ads. Serialized JSON array with ad IDs. If the parameter is null, all ads will be shown.'
          schema:
            type: string
        -
          in: query
          name: limit
          description: "Limit of number of returned ads. Used only if 'ad_ids' parameter is null, and 'campaign_ids' parameter contains ID of only one campaign."
          schema:
            type: integer
        -
          in: query
          name: offset
          description: "Offset. Used in the same cases as 'limit' parameter."
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/ads_getAdsLayout_response'
  /method/ads.getAdsTargeting:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: ad_ids
          description: 'Filter by ads. Serialized JSON array with ad IDs. If the parameter is null, all ads will be shown.'
          schema:
            type: string
        -
          in: query
          name: campaign_ids
          description: 'Filter by advertising campaigns. Serialized JSON array with campaign IDs. If the parameter is null, ads of all campaigns will be shown.'
          schema:
            type: string
        -
          in: query
          name: client_id
          description: "'For advertising agencies.' ID of the client ads are retrieved from."
          schema:
            type: integer
        -
          in: query
          name: include_deleted
          description: 'flag that specifies whether archived ads shall be shown: *0 — show only active ads,, *1 — show all ads.'
          schema:
            type: boolean
        -
          in: query
          name: limit
          description: "Limit of number of returned ads. Used only if 'ad_ids' parameter is null, and 'campaign_ids' parameter contains ID of only one campaign."
          schema:
            type: integer
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of results.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/ads_getAdsTargeting_response'
  /method/ads.getBudget:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/ads_getBudget_response'
  /method/ads.getCampaigns:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: client_id
          description: "'For advertising agencies'. ID of the client advertising campaigns are retrieved from."
          schema:
            type: integer
        -
          in: query
          name: include_deleted
          description: 'Flag that specifies whether archived ads shall be shown. *0 — show only active campaigns,, *1 — show all campaigns.'
          schema:
            type: boolean
        -
          in: query
          name: campaign_ids
          description: "Filter of advertising campaigns to show. Serialized JSON array with campaign IDs. Only campaigns that exist in 'campaign_ids' and belong to the specified advertising account will be shown. If the parameter is null, all campaigns will be shown."
          schema:
            type: string
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              type: string
              enum:
                - ads_count
      responses:
        200:
          $ref: '#/components/schemas/ads_getCampaigns_response'
  /method/ads.getCategories:
    get:
      parameters:
        -
          in: query
          name: lang
          description: 'Language. The full list of supported languages is [vk.com/dev/api_requests|here].'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_getCategories_response'
  /method/ads.getClients:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/ads_getClients_response'
  /method/ads.getDemographics:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: ids_type
          description: "Type of requested objects listed in 'ids' parameter: *ad — ads,, *campaign — campaigns."
          schema:
            type: string
            enum:
              - ad
              - campaign
        -
          in: query
          name: ids
          description: "IDs requested ads or campaigns, separated with a comma, depending on the value set in 'ids_type'. Maximum 2000 objects."
          schema:
            type: string
        -
          in: query
          name: period
          description: "Data grouping by dates: *day — statistics by days,, *month — statistics by months,, *overall — overall statistics. 'date_from' and 'date_to' parameters set temporary limits."
          schema:
            type: string
            enum:
              - day
              - month
              - overall
        -
          in: query
          name: date_from
          description: "Date to show statistics from. For different value of 'period' different date format is used: *day: YYYY-MM-DD, example: 2011-09-27 — September 27, 2011, **0 — day it was created on,, *month: YYYY-MM, example: 2011-09 — September 2011, **0 — month it was created in,, *overall: 0."
          schema:
            type: string
        -
          in: query
          name: date_to
          description: "Date to show statistics to. For different value of 'period' different date format is used: *day: YYYY-MM-DD, example: 2011-09-27 — September 27, 2011, **0 — current day,, *month: YYYY-MM, example: 2011-09 — September 2011, **0 — current month,, *overall: 0."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_getDemographics_response'
  /method/ads.getFloodStats:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/ads_getFloodStats_response'
  /method/ads.getLookalikeRequests:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: client_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: requests_ids
          description: ''
          schema:
            type: string
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: limit
          description: ''
          schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 200
        -
          in: query
          name: sort_by
          description: ''
          schema:
            type: string
            default: id
      responses:
        200:
          $ref: '#/components/schemas/ads_getLookalikeRequests_response'
  /method/ads.getMusicians:
    get:
      parameters:
        -
          in: query
          name: artist_name
          description: ''
          schema:
            type: string
            minLength: 3
      responses:
        200:
          $ref: '#/components/schemas/ads_getMusicians_response'
  /method/ads.getMusiciansByIds:
    get:
      parameters:
        -
          in: query
          name: ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 200
      responses:
        200:
          $ref: '#/components/schemas/ads_getMusicians_response'
  /method/ads.getOfficeUsers:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/ads_getOfficeUsers_response'
  /method/ads.getPostsReach:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: ids_type
          description: "Type of requested objects listed in 'ids' parameter: *ad — ads,, *campaign — campaigns."
          schema:
            type: string
            enum:
              - ad
              - campaign
        -
          in: query
          name: ids
          description: "IDs requested ads or campaigns, separated with a comma, depending on the value set in 'ids_type'. Maximum 100 objects."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_getPostsReach_response'
  /method/ads.getRejectionReason:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: ad_id
          description: 'Ad ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/ads_getRejectionReason_response'
  /method/ads.getStatistics:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: ids_type
          description: "Type of requested objects listed in 'ids' parameter: *ad — ads,, *campaign — campaigns,, *client — clients,, *office — account."
          schema:
            type: string
            enum:
              - ad
              - campaign
              - client
              - office
        -
          in: query
          name: ids
          description: "IDs requested ads, campaigns, clients or account, separated with a comma, depending on the value set in 'ids_type'. Maximum 2000 objects."
          schema:
            type: string
        -
          in: query
          name: period
          description: "Data grouping by dates: *day — statistics by days,, *month — statistics by months,, *overall — overall statistics. 'date_from' and 'date_to' parameters set temporary limits."
          schema:
            type: string
            enum:
              - day
              - month
              - overall
        -
          in: query
          name: date_from
          description: "Date to show statistics from. For different value of 'period' different date format is used: *day: YYYY-MM-DD, example: 2011-09-27 — September 27, 2011, **0 — day it was created on,, *month: YYYY-MM, example: 2011-09 — September 2011, **0 — month it was created in,, *overall: 0."
          schema:
            type: string
        -
          in: query
          name: date_to
          description: "Date to show statistics to. For different value of 'period' different date format is used: *day: YYYY-MM-DD, example: 2011-09-27 — September 27, 2011, **0 — current day,, *month: YYYY-MM, example: 2011-09 — September 2011, **0 — current month,, *overall: 0."
          schema:
            type: string
        -
          in: query
          name: stats_fields
          description: 'Additional fields to add to statistics'
          schema:
            type: array
            items:
              type: string
              enum:
                - views_times
      responses:
        200:
          $ref: '#/components/schemas/ads_getStatistics_response'
  /method/ads.getSuggestions:
    get:
      parameters:
        -
          in: query
          name: section
          description: "Section, suggestions are retrieved in. Available values: *countries — request of a list of countries. If q is not set or blank, a short list of countries is shown. Otherwise, a full list of countries is shown. *regions — requested list of regions. 'country' parameter is required. *cities — requested list of cities. 'country' parameter is required. *districts — requested list of districts. 'cities' parameter is required. *stations — requested list of subway stations. 'cities' parameter is required. *streets — requested list of streets. 'cities' parameter is required. *schools — requested list of educational organizations. 'cities' parameter is required. *interests — requested list of interests. *positions — requested list of positions (professions). *group_types — requested list of group types. *religions — requested list of religious commitments. *browsers — requested list of browsers and mobile devices."
          schema:
            type: string
            enum:
              - countries
              - regions
              - cities
              - districts
              - stations
              - streets
              - schools
              - interests
              - positions
              - group_types
              - religions
              - browsers
        -
          in: query
          name: ids
          description: "Objects IDs separated by commas. If the parameter is passed, 'q, country, cities' should not be passed."
          schema:
            type: string
        -
          in: query
          name: q
          description: 'Filter-line of the request (for countries, regions, cities, streets, schools, interests, positions).'
          schema:
            type: string
        -
          in: query
          name: country
          description: 'ID of the country objects are searched in.'
          schema:
            type: integer
        -
          in: query
          name: cities
          description: 'IDs of cities where objects are searched in, separated with a comma.'
          schema:
            type: string
        -
          in: query
          name: lang
          description: 'Language of the returned string values. Supported languages: *ru — Russian,, *ua — Ukrainian,, *en — English.'
          schema:
            type: string
            enum:
              - ru
              - ua
              - en
      responses:
        200:
          $ref: '#/components/schemas/ads_getSuggestions_response'
  /method/ads.getTargetGroups:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: client_id
          description: "'Only for advertising agencies.', ID of the client with the advertising account where the group will be created."
          schema:
            type: integer
        -
          in: query
          name: extended
          description: "'1' — to return pixel code."
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/ads_getTargetGroups_response'
  /method/ads.getTargetingStats:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: client_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: criteria
          description: "Serialized JSON object that describes targeting parameters. Description of 'criteria' object see below."
          schema:
            type: string
        -
          in: query
          name: ad_id
          description: 'ID of an ad which targeting parameters shall be analyzed.'
          schema:
            type: integer
        -
          in: query
          name: ad_format
          description: "Ad format. Possible values: *'1' — image and text,, *'2' — big image,, *'3' — exclusive format,, *'4' — community, square image,, *'7' — special app format,, *'8' — special community format,, *'9' — post in community,, *'10' — app board."
          schema:
            type: integer
            enum:
              - 1
              - 2
              - 3
              - 4
              - 7
              - 8
              - 9
              - 10
        -
          in: query
          name: ad_platform
          description: "Platforms to use for ad showing. Possible values: (for 'ad_format' = '1'), *'0' — VK and partner sites,, *'1' — VK only. (for 'ad_format' = '9'), *'all' — all platforms,, *'desktop' — desktop version,, *'mobile' — mobile version and apps."
          schema:
            type: string
        -
          in: query
          name: ad_platform_no_wall
          description: ''
          schema:
            type: string
        -
          in: query
          name: ad_platform_no_ad_network
          description: ''
          schema:
            type: string
        -
          in: query
          name: publisher_platforms
          description: ''
          schema:
            type: string
        -
          in: query
          name: link_url
          description: 'URL for the advertised object.'
          schema:
            type: string
        -
          in: query
          name: link_domain
          description: 'Domain of the advertised object.'
          schema:
            type: string
        -
          in: query
          name: need_precise
          description: 'Additionally return recommended cpc and cpm to reach 5,10..95 percents of audience.'
          schema:
            type: boolean
        -
          in: query
          name: impressions_limit_period
          description: 'Impressions limit period in seconds, must be a multiple of 86400(day)'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/ads_getTargetingStats_response'
  /method/ads.getUploadURL:
    get:
      parameters:
        -
          in: query
          name: ad_format
          description: 'Ad format: *1 — image and text,, *2 — big image,, *3 — exclusive format,, *4 — community, square image,, *7 — special app format.'
          schema:
            type: integer
            enum:
              - 1
              - 2
              - 3
              - 4
              - 7
        -
          in: query
          name: icon
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/ads_getUploadURL_response'
  /method/ads.getVideoUploadURL:
    get:
      responses:
        200:
          $ref: '#/components/schemas/ads_getVideoUploadURL_response'
  /method/ads.importTargetContacts:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: client_id
          description: "'Only for advertising agencies.' , ID of the client with the advertising account where the group will be created."
          schema:
            type: integer
        -
          in: query
          name: target_group_id
          description: 'Target group ID.'
          schema:
            type: integer
        -
          in: query
          name: contacts
          description: 'List of phone numbers, emails or user IDs separated with a comma.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_importTargetContacts_response'
  /method/ads.removeOfficeUsers:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: ids
          description: 'Serialized JSON array with IDs of deleted managers.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_removeOfficeUsers_response'
  /method/ads.updateAds:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: data
          description: "Serialized JSON array of objects that describe changes in ads. Description of 'ad_edit_specification' objects see below."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_updateAds_response'
  /method/ads.updateCampaigns:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: data
          description: "Serialized JSON array of objects that describe changes in campaigns. Description of 'campaign_mod' objects see below."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_updateCampaigns_response'
  /method/ads.updateClients:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: data
          description: "Serialized JSON array of objects that describe changes in clients. Description of 'client_mod' objects see below."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ads_updateClients_response'
  /method/ads.updateOfficeUsers:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: data
          description: "Serialized JSON array of objects that describe added managers. Description of 'user_specification' objects see below."
          schema:
            type: string
            items:
              $ref: '#/components/schemas/ads_user_specification'
            minItems: 1
            maxItems: 10
      responses:
        200:
          $ref: '#/components/schemas/ads_updateOfficeUsers_response'
  /method/ads.updateTargetGroup:
    get:
      parameters:
        -
          in: query
          name: account_id
          description: 'Advertising account ID.'
          schema:
            type: integer
        -
          in: query
          name: client_id
          description: "'Only for advertising agencies.' , ID of the client with the advertising account where the group will be created."
          schema:
            type: integer
        -
          in: query
          name: target_group_id
          description: 'Group ID.'
          schema:
            type: integer
        -
          in: query
          name: name
          description: 'New name of the target group — a string up to 64 characters long.'
          schema:
            type: string
        -
          in: query
          name: domain
          description: 'Domain of the site where user accounting code will be placed.'
          schema:
            type: string
        -
          in: query
          name: lifetime
          description: "'Only for the groups that get audience from sites with user accounting code.', Time in days when users added to a retarget group will be automatically excluded from it. '0' - automatic exclusion is off."
          schema:
            type: integer
            minimum: 1
            maximum: 720
        -
          in: query
          name: target_pixel_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: target_pixel_rules
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/adsweb.getAdCategories:
    get:
      parameters:
        -
          in: query
          name: office_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/adsweb_getAdCategories_response'
  /method/adsweb.getAdUnitCode:
    get:
      responses:
        200:
          $ref: '#/components/schemas/adsweb_getAdUnitCode_response'
  /method/adsweb.getAdUnits:
    get:
      parameters:
        -
          in: query
          name: office_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: sites_ids
          description: ''
          schema:
            type: string
        -
          in: query
          name: ad_units_ids
          description: ''
          schema:
            type: string
        -
          in: query
          name: fields
          description: ''
          schema:
            type: string
        -
          in: query
          name: limit
          description: ''
          schema:
            type: integer
            default: null
            minimum: 0
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/adsweb_getAdUnits_response'
  /method/adsweb.getFraudHistory:
    get:
      parameters:
        -
          in: query
          name: office_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: sites_ids
          description: ''
          schema:
            type: string
        -
          in: query
          name: limit
          description: ''
          schema:
            type: integer
            default: null
            minimum: 0
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/adsweb_getFraudHistory_response'
  /method/adsweb.getSites:
    get:
      parameters:
        -
          in: query
          name: office_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: sites_ids
          description: ''
          schema:
            type: string
        -
          in: query
          name: fields
          description: ''
          schema:
            type: string
        -
          in: query
          name: limit
          description: ''
          schema:
            type: integer
            default: null
            minimum: 0
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/adsweb_getSites_response'
  /method/adsweb.getStatistics:
    get:
      parameters:
        -
          in: query
          name: office_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: ids_type
          description: ''
          schema:
            type: string
        -
          in: query
          name: ids
          description: ''
          schema:
            type: string
        -
          in: query
          name: period
          description: ''
          schema:
            type: string
        -
          in: query
          name: date_from
          description: ''
          schema:
            type: string
        -
          in: query
          name: date_to
          description: ''
          schema:
            type: string
        -
          in: query
          name: fields
          description: ''
          schema:
            type: string
        -
          in: query
          name: limit
          description: ''
          schema:
            type: integer
            default: null
            minimum: 0
        -
          in: query
          name: page_id
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/adsweb_getStatistics_response'
  /method/appWidgets.getAppImageUploadServer:
    get:
      parameters:
        -
          in: query
          name: image_type
          description: ''
          schema:
            type: string
            enum:
              - 160x160
              - 160x240
              - 24x24
              - 50x50
              - 510x128
      responses:
        200:
          $ref: '#/components/schemas/appWidgets_getAppImageUploadServer_response'
  /method/appWidgets.getAppImages:
    get:
      parameters:
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of images.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Maximum count of results.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 100
        -
          in: query
          name: image_type
          description: ''
          schema:
            type: string
            enum:
              - 160x160
              - 160x240
              - 24x24
              - 50x50
              - 510x128
      responses:
        200:
          $ref: '#/components/schemas/appWidgets_getAppImages_response'
  /method/appWidgets.getGroupImageUploadServer:
    get:
      parameters:
        -
          in: query
          name: image_type
          description: ''
          schema:
            type: string
            enum:
              - 160x160
              - 160x240
              - 24x24
              - 50x50
              - 510x128
      responses:
        200:
          $ref: '#/components/schemas/appWidgets_getGroupImageUploadServer_response'
  /method/appWidgets.getGroupImages:
    get:
      parameters:
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of images.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Maximum count of results.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 100
        -
          in: query
          name: image_type
          description: ''
          schema:
            type: string
            enum:
              - 160x160
              - 160x240
              - 24x24
              - 50x50
              - 510x128
      responses:
        200:
          $ref: '#/components/schemas/appWidgets_getGroupImages_response'
  /method/appWidgets.getImagesById:
    get:
      parameters:
        -
          in: query
          name: images
          description: 'List of images IDs'
          schema:
            type: array
            items:
              type: string
            maxItems: 100
      responses:
        200:
          $ref: '#/components/schemas/appWidgets_getImagesById_response'
  /method/appWidgets.saveAppImage:
    get:
      parameters:
        -
          in: query
          name: hash
          description: 'Parameter returned when photo is uploaded to server'
          schema:
            type: string
        -
          in: query
          name: image
          description: 'Parameter returned when photo is uploaded to server'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/appWidgets_saveAppImage_response'
  /method/appWidgets.saveGroupImage:
    get:
      parameters:
        -
          in: query
          name: hash
          description: 'Parameter returned when photo is uploaded to server'
          schema:
            type: string
        -
          in: query
          name: image
          description: 'Parameter returned when photo is uploaded to server'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/appWidgets_saveGroupImage_response'
  /method/appWidgets.update:
    get:
      parameters:
        -
          in: query
          name: code
          description: ''
          schema:
            type: string
            maxLength: 100000
        -
          in: query
          name: type
          description: ''
          schema:
            type: string
            enum:
              - compact_list
              - cover_list
              - donation
              - list
              - match
              - matches
              - table
              - text
              - tiles
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/apps.deleteAppRequests:
    get:
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/apps.get:
    get:
      parameters:
        -
          in: query
          name: app_id
          description: 'Application ID'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: app_ids
          description: 'List of application ID'
          schema:
            type: array
            items:
              type: string
            maxItems: 100
        -
          in: query
          name: platform
          description: "platform. Possible values: *'ios' — iOS,, *'android' — Android,, *'winphone' — Windows Phone,, *'web' — приложения на vk.com. By default: 'web'."
          schema:
            type: string
            default: web
            enum:
              - android
              - ios
              - web
              - winphone
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
            default: 0
        -
          in: query
          name: return_friends
          description: ''
          schema:
            type: boolean
            default: 0
        -
          in: query
          name: fields
          description: "Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'contacts', 'education', 'online', 'counters', 'relation', 'last_seen', 'activity', 'can_write_private_message', 'can_see_all_posts', 'can_post', 'universities', (only if return_friends - 1)"
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: name_case
          description: "Case for declension of user name and surname: 'nom' — nominative (default),, 'gen' — genitive,, 'dat' — dative,, 'acc' — accusative,, 'ins' — instrumental,, 'abl' — prepositional. (only if 'return_friends' = '1')"
          schema:
            type: string
            enum:
              - nom
              - gen
              - dat
              - acc
              - ins
              - abl
      responses:
        200:
          $ref: '#/components/schemas/apps_get_response'
  /method/apps.getCatalog:
    get:
      parameters:
        -
          in: query
          name: sort
          description: "Sort order: 'popular_today' — popular for one day (default), 'visitors' — by visitors number , 'create_date' — by creation date, 'growth_rate' — by growth rate, 'popular_week' — popular for one week"
          schema:
            type: string
            enum:
              - popular_today
              - visitors
              - create_date
              - growth_rate
              - popular_week
        -
          in: query
          name: offset
          description: 'Offset required to return a specific subset of apps.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of apps to return.'
          schema:
            type: integer
            default: 100
            minimum: 0
        -
          in: query
          name: platform
          description: ''
          schema:
            type: string
        -
          in: query
          name: extended
          description: "'1' — to return additional fields 'screenshots', 'MAU', 'catalog_position', and 'international'. If set, 'count' must be less than or equal to '100'. '0' — not to return additional fields (default)."
          schema:
            type: boolean
        -
          in: query
          name: return_friends
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: name_case
          description: ''
          schema:
            type: string
        -
          in: query
          name: q
          description: 'Search query string.'
          schema:
            type: string
        -
          in: query
          name: genre_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: filter
          description: "'installed' — to return list of installed apps (only for mobile platform)."
          schema:
            type: string
            enum:
              - favorite
              - featured
              - installed
              - new
      responses:
        200:
          $ref: '#/components/schemas/apps_getCatalog_response'
  /method/apps.getFriendsList:
    get:
      parameters:
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
            default: 0
        -
          in: query
          name: count
          description: 'List size.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 5000
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: type
          description: "List type. Possible values: * 'invite' — available for invites (don't play the game),, * 'request' — available for request (play the game). By default: 'invite'."
          schema:
            type: string
            default: invite
            enum:
              - invite
              - request
        -
          in: query
          name: fields
          description: 'Additional profile fields, see [vk.com/dev/fields|description].'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
      responses:
        200:
          $ref: '#/components/schemas/apps_getFriendsList_response'
  /method/apps.getLeaderboard:
    get:
      parameters:
        -
          in: query
          name: type
          description: "Leaderboard type. Possible values: *'level' — by level,, *'points' — by mission points,, *'score' — by score ()."
          schema:
            type: string
            enum:
              - level
              - points
              - score
        -
          in: query
          name: global
          description: "Rating type. Possible values: *'1' — global rating among all players,, *'0' — rating among user friends."
          schema:
            type: boolean
            default: 1
        -
          in: query
          name: extended
          description: '1 — to return additional info about users'
          schema:
            type: boolean
            default: 0
      responses:
        200:
          $ref: '#/components/schemas/apps_getLeaderboard_response'
  /method/apps.getMiniAppPolicies:
    get:
      parameters:
        -
          in: query
          name: app_id
          description: 'Mini App ID'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/apps_getMiniAppPolicies_response'
  /method/apps.getScopes:
    get:
      parameters:
        -
          in: query
          name: type
          description: ''
          schema:
            type: string
            default: user
            enum:
              - group
              - user
      responses:
        200:
          $ref: '#/components/schemas/apps_getScopes_response'
  /method/apps.getScore:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/apps_getScore_response'
  /method/apps.promoHasActiveGift:
    get:
      parameters:
        -
          in: query
          name: promo_id
          description: 'Id of game promo action'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_bool_response'
  /method/apps.promoUseGift:
    get:
      parameters:
        -
          in: query
          name: promo_id
          description: 'Id of game promo action'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_bool_response'
  /method/apps.sendRequest:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'id of the user to send a request'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: text
          description: 'request text'
          schema:
            type: string
        -
          in: query
          name: type
          description: "request type. Values: 'invite' - if the request is sent to a user who does not have the app installed,, 'request' - if a user has already installed the app"
          schema:
            type: string
            default: request
            enum:
              - invite
              - request
        -
          in: query
          name: name
          description: ''
          schema:
            type: string
            maxLength: 128
        -
          in: query
          name: key
          description: 'special string key to be sent with the request'
          schema:
            type: string
        -
          in: query
          name: separate
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/apps_sendRequest_response'
  /method/auth.restore:
    get:
      parameters:
        -
          in: query
          name: phone
          description: 'User phone number.'
          schema:
            type: string
        -
          in: query
          name: last_name
          description: 'User last name.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/auth_restore_response'
  /method/board.addTopic:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the discussion board.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: title
          description: 'Topic title.'
          schema:
            type: string
        -
          in: query
          name: text
          description: 'Text of the topic.'
          schema:
            type: string
        -
          in: query
          name: from_group
          description: "For a community: '1' — to post the topic as by the community, '0' — to post the topic as by the user (default)"
          schema:
            type: boolean
        -
          in: query
          name: attachments
          description: "List of media objects attached to the topic, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media object: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media owner. '<media_id>' — Media ID. Example: \"photo100172_166443618,photo66748_265827614\", , \"NOTE: If you try to attach more than one reference, an error will be thrown.\","
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/board_addTopic_response'
  /method/board.closeTopic:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the discussion board.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: topic_id
          description: 'Topic ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/board.createComment:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the discussion board.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: topic_id
          description: 'ID of the topic to be commented on.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: message
          description: "(Required if 'attachments' is not set.) Text of the comment."
          schema:
            type: string
        -
          in: query
          name: attachments
          description: "(Required if 'text' is not set.) List of media objects attached to the comment, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media object: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media owner. '<media_id>' — Media ID."
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: from_group
          description: "'1' — to post the comment as by the community, '0' — to post the comment as by the user (default)"
          schema:
            type: boolean
        -
          in: query
          name: sticker_id
          description: 'Sticker ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: guid
          description: 'Unique identifier to avoid repeated comments.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/board_createComment_response'
  /method/board.deleteComment:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the discussion board.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: topic_id
          description: 'Topic ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/board.deleteTopic:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the discussion board.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: topic_id
          description: 'Topic ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/board.editComment:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the discussion board.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: topic_id
          description: 'Topic ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: comment_id
          description: 'ID of the comment on the topic.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: message
          description: "(Required if 'attachments' is not set). New comment text."
          schema:
            type: string
        -
          in: query
          name: attachments
          description: "(Required if 'message' is not set.) List of media objects attached to the comment, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media object: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media owner. '<media_id>' — Media ID. Example: \"photo100172_166443618,photo66748_265827614\""
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/board.editTopic:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the discussion board.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: topic_id
          description: 'Topic ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: title
          description: 'New title of the topic.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/board.fixTopic:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the discussion board.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: topic_id
          description: 'Topic ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/board.getComments:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the discussion board.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: topic_id
          description: 'Topic ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: need_likes
          description: "'1' — to return the 'likes' field, '0' — not to return the 'likes' field (default)"
          schema:
            type: boolean
        -
          in: query
          name: start_comment_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of comments.'
          schema:
            type: integer
        -
          in: query
          name: count
          description: 'Number of comments to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 100
        -
          in: query
          name: extended
          description: "'1' — to return information about users who posted comments, '0' — to return no additional fields (default)"
          schema:
            type: boolean
        -
          in: query
          name: sort
          description: "Sort order: 'asc' — by creation date in chronological order, 'desc' — by creation date in reverse chronological order,"
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        200:
          $ref: '#/components/schemas/board_getComments_response'
  /method/board.getTopics:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the discussion board.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: topic_ids
          description: "IDs of topics to be returned (100 maximum). By default, all topics are returned. If this parameter is set, the 'order', 'offset', and 'count' parameters are ignored."
          schema:
            type: array
            items:
              type: integer
        -
          in: query
          name: order
          description: "Sort order: '1' — by date updated in reverse chronological order. '2' — by date created in reverse chronological order. '-1' — by date updated in chronological order. '-2' — by date created in chronological order. If no sort order is specified, topics are returned in the order specified by the group administrator. Pinned topics are returned first, regardless of the sorting."
          schema:
            type: integer
            enum:
              - 1
              - 2
              - -1
              - -2
              - 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of topics.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of topics to return.'
          schema:
            type: integer
            default: 40
            minimum: 0
            maximum: 100
        -
          in: query
          name: extended
          description: "'1' — to return information about users who created topics or who posted there last, '0' — to return no additional fields (default)"
          schema:
            type: boolean
        -
          in: query
          name: preview
          description: "'1' — to return the first comment in each topic,, '2' — to return the last comment in each topic,, '0' — to return no comments. By default: '0'."
          schema:
            type: integer
            enum:
              - 1
              - 2
              - 0
        -
          in: query
          name: preview_length
          description: "Number of characters after which to truncate the previewed comment. To preview the full comment, specify '0'."
          schema:
            type: integer
            default: 90
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/board_getTopics_response'
  /method/board.openTopic:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the discussion board.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: topic_id
          description: 'Topic ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/board.restoreComment:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the discussion board.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: topic_id
          description: 'Topic ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/board.unfixTopic:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the discussion board.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: topic_id
          description: 'Topic ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/database.getChairs:
    get:
      parameters:
        -
          in: query
          name: faculty_id
          description: 'id of the faculty to get chairs from'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'offset required to get a certain subset of chairs'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'amount of chairs to get'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 10000
      responses:
        200:
          $ref: '#/components/schemas/database_getChairs_response'
  /method/database.getCities:
    get:
      parameters:
        -
          in: query
          name: country_id
          description: 'Country ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: region_id
          description: 'Region ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: q
          description: 'Search query.'
          schema:
            type: string
        -
          in: query
          name: need_all
          description: "'1' — to return all cities in the country, '0' — to return major cities in the country (default),"
          schema:
            type: boolean
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of cities.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of cities to return.'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 1000
      responses:
        200:
          $ref: '#/components/schemas/database_getCities_response'
  /method/database.getCitiesById:
    get:
      parameters:
        -
          in: query
          name: city_ids
          description: 'City IDs.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 1000
      responses:
        200:
          $ref: '#/components/schemas/database_getCitiesById_response'
  /method/database.getCountries:
    get:
      parameters:
        -
          in: query
          name: need_all
          description: "'1' — to return a full list of all countries, '0' — to return a list of countries near the current user's country (default)."
          schema:
            type: boolean
        -
          in: query
          name: code
          description: 'Country codes in [vk.com/dev/country_codes|ISO 3166-1 alpha-2] standard.'
          schema:
            type: string
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of countries.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of countries to return.'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 1000
      responses:
        200:
          $ref: '#/components/schemas/database_getCountries_response'
  /method/database.getCountriesById:
    get:
      parameters:
        -
          in: query
          name: country_ids
          description: 'Country IDs.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 1000
      responses:
        200:
          $ref: '#/components/schemas/database_getCountriesById_response'
  /method/database.getFaculties:
    get:
      parameters:
        -
          in: query
          name: university_id
          description: 'University ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of faculties.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of faculties to return.'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 10000
      responses:
        200:
          $ref: '#/components/schemas/database_getFaculties_response'
  /method/database.getMetroStations:
    get:
      parameters:
        -
          in: query
          name: city_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 500
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
            default: false
      responses:
        200:
          $ref: '#/components/schemas/database_getMetroStations_response'
  /method/database.getMetroStationsById:
    get:
      parameters:
        -
          in: query
          name: station_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 30
      responses:
        200:
          $ref: '#/components/schemas/database_getMetroStationsById_response'
  /method/database.getRegions:
    get:
      parameters:
        -
          in: query
          name: country_id
          description: 'Country ID, received in [vk.com/dev/database.getCountries|database.getCountries] method.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: q
          description: 'Search query.'
          schema:
            type: string
        -
          in: query
          name: offset
          description: 'Offset needed to return specific subset of regions.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of regions to return.'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 1000
      responses:
        200:
          $ref: '#/components/schemas/database_getRegions_response'
  /method/database.getSchoolClasses:
    get:
      parameters:
        -
          in: query
          name: country_id
          description: 'Country ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/database_getSchoolClasses_response'
  /method/database.getSchools:
    get:
      parameters:
        -
          in: query
          name: q
          description: 'Search query.'
          schema:
            type: string
        -
          in: query
          name: city_id
          description: 'City ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of schools.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of schools to return.'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 10000
      responses:
        200:
          $ref: '#/components/schemas/database_getSchools_response'
  /method/database.getUniversities:
    get:
      parameters:
        -
          in: query
          name: q
          description: 'Search query.'
          schema:
            type: string
        -
          in: query
          name: country_id
          description: 'Country ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: city_id
          description: 'City ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of universities.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of universities to return.'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 10000
      responses:
        200:
          $ref: '#/components/schemas/database_getUniversities_response'
  /method/docs.add:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the document. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: doc_id
          description: 'Document ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: access_key
          description: "Access key. This parameter is required if 'access_key' was returned with the document's data."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/docs_add_response'
  /method/docs.delete:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the document. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: doc_id
          description: 'Document ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/docs.edit:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'User ID or community ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: doc_id
          description: 'Document ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: title
          description: 'Document title.'
          schema:
            type: string
            maxLength: 128
        -
          in: query
          name: tags
          description: 'Document tags.'
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/docs.get:
    get:
      parameters:
        -
          in: query
          name: count
          description: 'Number of documents to return. By default, all documents.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of documents.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: type
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
              - 7
              - 8
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the documents. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: return_tags
          description: ''
          schema:
            type: boolean
            default: false
      responses:
        200:
          $ref: '#/components/schemas/docs_get_response'
  /method/docs.getById:
    get:
      parameters:
        -
          in: query
          name: docs
          description: 'Document IDs. Example: , "66748_91488,66748_91455",'
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: return_tags
          description: ''
          schema:
            type: boolean
            default: false
      responses:
        200:
          $ref: '#/components/schemas/docs_getById_response'
  /method/docs.getMessagesUploadServer:
    get:
      parameters:
        -
          in: query
          name: type
          description: 'Document type.'
          schema:
            type: string
            default: doc
            enum:
              - audio_message
              - doc
              - graffiti
        -
          in: query
          name: peer_id
          description: "Destination ID. \"For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'Chat ID', e.g. '2000000001'. For community: '- Community ID', e.g. '-12345'. \""
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/docs_getUploadServer_response'
  /method/docs.getTypes:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the documents. Use a negative value to designate a community ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/docs_getTypes_response'
  /method/docs.getUploadServer:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID (if the document will be uploaded to the community).'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/docs_getUploadServer_response'
  /method/docs.getWallUploadServer:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID (if the document will be uploaded to the community).'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_getUploadServer_response'
  /method/docs.save:
    get:
      parameters:
        -
          in: query
          name: file
          description: 'This parameter is returned when the file is [vk.com/dev/upload_files_2|uploaded to the server].'
          schema:
            type: string
        -
          in: query
          name: title
          description: 'Document title.'
          schema:
            type: string
        -
          in: query
          name: tags
          description: 'Document tags.'
          schema:
            type: string
        -
          in: query
          name: return_tags
          description: ''
          schema:
            type: boolean
            default: false
      responses:
        200:
          $ref: '#/components/schemas/docs_save_response'
  /method/docs.search:
    get:
      parameters:
        -
          in: query
          name: q
          description: 'Search query string.'
          schema:
            type: string
            maxLength: 512
        -
          in: query
          name: search_own
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: count
          description: 'Number of results to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of results.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: return_tags
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/docs_search_response'
  /method/donut.getFriends:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/groups_getMembers_fields_response'
  /method/donut.getSubscription:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/donut_getSubscription_response'
  /method/donut.getSubscriptions:
    get:
      parameters:
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
      responses:
        200:
          $ref: '#/components/schemas/donut_getSubscriptions_response'
  /method/donut.isDon:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_bool_response'
  /method/downloadedGames.getPaidStatus:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/downloadedGames_paid_status_response'
  /method/fave.addArticle:
    get:
      parameters:
        -
          in: query
          name: url
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.addLink:
    get:
      parameters:
        -
          in: query
          name: link
          description: 'Link URL.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.addPage:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.addPost:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: access_key
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.addProduct:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: access_key
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.addTag:
    get:
      parameters:
        -
          in: query
          name: name
          description: ''
          schema:
            type: string
            maxLength: 50
        -
          in: query
          name: position
          description: ''
          schema:
            type: string
            default: back
            enum:
              - back
              - front
      responses:
        200:
          $ref: '#/components/schemas/fave_addTag_response'
  /method/fave.addVideo:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: access_key
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.editTag:
    get:
      parameters:
        -
          in: query
          name: id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: name
          description: ''
          schema:
            type: string
            maxLength: 50
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.get:
    get:
      parameters:
        -
          in: query
          name: extended
          description: "'1' — to return additional 'wall', 'profiles', and 'groups' fields. By default: '0'."
          schema:
            type: boolean
            default: false
        -
          in: query
          name: item_type
          description: ''
          schema:
            type: string
            enum:
              - article
              - clip
              - link
              - narrative
              - page
              - podcast
              - post
              - product
              - video
              - youla_product
        -
          in: query
          name: tag_id
          description: 'Tag ID.'
          schema:
            type: integer
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of users.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of users to return.'
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        -
          in: query
          name: fields
          description: ''
          schema:
            type: string
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: is_from_snackbar
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/fave_get_response'
  /method/fave.getPages:
    get:
      parameters:
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 10000
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 500
        -
          in: query
          name: type
          description: ''
          schema:
            type: string
            enum:
              - groups
              - hints
              - users
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
        -
          in: query
          name: tag_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/fave_getPages_response'
  /method/fave.getTags:
    get:
      responses:
        200:
          $ref: '#/components/schemas/fave_getTags_response'
  /method/fave.markSeen:
    get:
      responses:
        200:
          $ref: '#/components/schemas/base_bool_response'
  /method/fave.removeArticle:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: article_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_bool_response'
  /method/fave.removeLink:
    get:
      parameters:
        -
          in: query
          name: link_id
          description: 'Link ID (can be obtained by [vk.com/dev/faves.getLinks|faves.getLinks] method).'
          schema:
            type: string
        -
          in: query
          name: link
          description: 'Link URL'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.removePage:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.removePost:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.removeProduct:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.removeTag:
    get:
      parameters:
        -
          in: query
          name: id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.removeVideo:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.reorderTags:
    get:
      parameters:
        -
          in: query
          name: ids
          description: ''
          schema:
            type: array
            items:
              type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.setPageTags:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: tag_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.setTags:
    get:
      parameters:
        -
          in: query
          name: item_type
          description: ''
          schema:
            type: string
            enum:
              - article
              - clip
              - link
              - narrative
              - page
              - podcast
              - post
              - product
              - video
              - youla_product
        -
          in: query
          name: item_owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: tag_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
        -
          in: query
          name: link_id
          description: ''
          schema:
            type: string
        -
          in: query
          name: link_url
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/fave.trackPageInteraction:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/friends.add:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'ID of the user whose friend request will be approved or to whom a friend request will be sent.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: text
          description: 'Text of the message (up to 500 characters) for the friend request, if any.'
          schema:
            type: string
        -
          in: query
          name: follow
          description: "'1' to pass an incoming request to followers list."
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/friends_add_response'
  /method/friends.addList:
    get:
      parameters:
        -
          in: query
          name: name
          description: 'Name of the friend list.'
          schema:
            type: string
        -
          in: query
          name: user_ids
          description: 'IDs of users to be added to the friend list.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/friends_addList_response'
  /method/friends.areFriends:
    get:
      parameters:
        -
          in: query
          name: user_ids
          description: 'IDs of the users whose friendship status to check.'
          schema:
            type: array
            items:
              type: integer
            maxItems: 1000
        -
          in: query
          name: need_sign
          description: "'1' — to return 'sign' field. 'sign' is md5(\"{id}_{user_id}_{friends_status}_{application_secret}\"), where id is current user ID. This field allows to check that data has not been modified by the client. By default: '0'."
          schema:
            type: boolean
        -
          in: query
          name: extended
          description: 'Return friend request read_state field'
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/friends_areFriends_response'
  /method/friends.delete:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: "ID of the user whose friend request is to be declined or who is to be deleted from the current user's friend list."
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/friends_delete_response'
  /method/friends.deleteAllRequests:
    get:
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/friends.deleteList:
    get:
      parameters:
        -
          in: query
          name: list_id
          description: 'ID of the friend list to delete.'
          schema:
            type: integer
            minimum: 0
            maximum: 24
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/friends.edit:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'ID of the user whose friend list is to be edited.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: list_ids
          description: 'IDs of the friend lists to which to add the user.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/friends.editList:
    get:
      parameters:
        -
          in: query
          name: name
          description: 'Name of the friend list.'
          schema:
            type: string
        -
          in: query
          name: list_id
          description: 'Friend list ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: user_ids
          description: 'IDs of users in the friend list.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: add_user_ids
          description: "(Applies if 'user_ids' parameter is not set.), User IDs to add to the friend list."
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: delete_user_ids
          description: "(Applies if 'user_ids' parameter is not set.), User IDs to delete from the friend list."
          schema:
            type: array
            items:
              type: integer
              minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/friends.get:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID. By default, the current user ID.'
          schema:
            type: integer
        -
          in: query
          name: order
          description: "Sort order: , 'name' — by name (enabled only if the 'fields' parameter is used), 'hints' — by rating, similar to how friends are sorted in My friends section, , This parameter is available only for [vk.com/dev/standalone|desktop applications]."
          schema:
            type: string
            enum:
              - hints
              - random
              - mobile
              - name
              - smart
        -
          in: query
          name: list_id
          description: 'ID of the friend list returned by the [vk.com/dev/friends.getLists|friends.getLists] method to be used as the source. This parameter is taken into account only when the uid parameter is set to the current user ID. This parameter is available only for [vk.com/dev/standalone|desktop applications].'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of friends to return.'
          schema:
            type: integer
            default: 5000
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of friends.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: fields
          description: "Profile fields to return. Sample values: 'uid', 'first_name', 'last_name', 'nickname', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'domain', 'has_mobile', 'rate', 'contacts', 'education'."
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: name_case
          description: "Case for declension of user name and surname: , 'nom' — nominative (default) , 'gen' — genitive , 'dat' — dative , 'acc' — accusative , 'ins' — instrumental , 'abl' — prepositional"
          schema:
            type: string
            enum:
              - nom
              - gen
              - dat
              - acc
              - ins
              - abl
        -
          in: query
          name: ref
          description: ''
          schema:
            type: string
            maxLength: 255
      responses:
        200:
          $ref: '#/components/schemas/friends_get_response'
  /method/friends.getAppUsers:
    get:
      responses:
        200:
          $ref: '#/components/schemas/friends_getAppUsers_response'
  /method/friends.getByPhones:
    get:
      parameters:
        -
          in: query
          name: phones
          description: 'List of phone numbers in MSISDN format (maximum 1000). Example: "+79219876543,+79111234567"'
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: fields
          description: "Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'rate', 'contacts', 'education', 'online, counters'."
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
      responses:
        200:
          $ref: '#/components/schemas/friends_getByPhones_response'
  /method/friends.getLists:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: return_system
          description: "'1' — to return system friend lists. By default: '0'."
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/friends_getLists_response'
  /method/friends.getMutual:
    get:
      parameters:
        -
          in: query
          name: source_uid
          description: "ID of the user whose friends will be checked against the friends of the user specified in 'target_uid'."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: target_uid
          description: "ID of the user whose friends will be checked against the friends of the user specified in 'source_uid'."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: target_uids
          description: "IDs of the users whose friends will be checked against the friends of the user specified in 'source_uid'."
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 100
        -
          in: query
          name: order
          description: "Sort order: 'random' — random order"
          schema:
            type: string
        -
          in: query
          name: count
          description: 'Number of mutual friends to return.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of mutual friends.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/friends_getMutual_response'
  /method/friends.getOnline:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: list_id
          description: 'Friend list ID. If this parameter is not set, information about all online friends is returned.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: online_mobile
          description: "'1' — to return an additional 'online_mobile' field, '0' — (default),"
          schema:
            type: boolean
        -
          in: query
          name: order
          description: "Sort order: 'random' — random order"
          schema:
            type: string
        -
          in: query
          name: count
          description: 'Number of friends to return.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of friends.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/friends_getOnline_response'
  /method/friends.getRecent:
    get:
      parameters:
        -
          in: query
          name: count
          description: 'Number of recently added friends to return.'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 1000
      responses:
        200:
          $ref: '#/components/schemas/friends_getRecent_response'
  /method/friends.getRequests:
    get:
      parameters:
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of friend requests.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of friend requests to return (default 100, maximum 1000).'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 1000
        -
          in: query
          name: extended
          description: "'1' — to return response messages from users who have sent a friend request or, if 'suggested' is set to '1', to return a list of suggested friends"
          schema:
            type: boolean
        -
          in: query
          name: need_mutual
          description: "'1' — to return a list of mutual friends (up to 20), if any"
          schema:
            type: boolean
        -
          in: query
          name: out
          description: "'1' — to return outgoing requests, '0' — to return incoming requests (default)"
          schema:
            type: boolean
        -
          in: query
          name: sort
          description: "Sort order: '1' — by number of mutual friends, '0' — by date"
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
        -
          in: query
          name: need_viewed
          description: ''
          schema:
            type: boolean
            default: 0
        -
          in: query
          name: suggested
          description: "'1' — to return a list of suggested friends, '0' — to return friend requests (default)"
          schema:
            type: boolean
        -
          in: query
          name: ref
          description: ''
          schema:
            type: string
            maxLength: 255
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
      responses:
        200:
          $ref: '#/components/schemas/friends_getRequests_response'
  /method/friends.getSuggestions:
    get:
      parameters:
        -
          in: query
          name: filter
          description: "Types of potential friends to return: 'mutual' — users with many mutual friends , 'contacts' — users found with the [vk.com/dev/account.importContacts|account.importContacts] method , 'mutual_contacts' — users who imported the same contacts as the current user with the [vk.com/dev/account.importContacts|account.importContacts] method"
          schema:
            type: array
            items:
              type: string
              enum:
                - mutual
                - contacts
                - mutual_contacts
        -
          in: query
          name: count
          description: 'Number of suggestions to return.'
          schema:
            type: integer
            default: 500
            minimum: 0
            maximum: 500
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of suggestions.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: fields
          description: "Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'rate', 'contacts', 'education', 'online', 'counters'."
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: name_case
          description: "Case for declension of user name and surname: , 'nom' — nominative (default) , 'gen' — genitive , 'dat' — dative , 'acc' — accusative , 'ins' — instrumental , 'abl' — prepositional"
          schema:
            type: string
            enum:
              - nom
              - gen
              - dat
              - acc
              - ins
              - abl
      responses:
        200:
          $ref: '#/components/schemas/friends_getSuggestions_response'
  /method/friends.search:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: q
          description: "Search query string (e.g., 'Vasya Babich')."
          schema:
            type: string
        -
          in: query
          name: fields
          description: "Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'rate', 'contacts', 'education', 'online',"
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: name_case
          description: "Case for declension of user name and surname: 'nom' — nominative (default), 'gen' — genitive , 'dat' — dative, 'acc' — accusative , 'ins' — instrumental , 'abl' — prepositional"
          schema:
            type: string
            default: Nom
            enum:
              - Nom
              - Gen
              - Dat
              - Acc
              - Ins
              - Abl
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of friends.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of friends to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 1000
      responses:
        200:
          $ref: '#/components/schemas/friends_search_response'
  /method/gifts.get:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of gifts to return.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of results.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/gifts_get_response'
  /method/groups.addAddress:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: title
          description: ''
          schema:
            type: string
            maxLength: 255
        -
          in: query
          name: address
          description: ''
          schema:
            type: string
            maxLength: 255
        -
          in: query
          name: additional_address
          description: ''
          schema:
            type: string
            maxLength: 400
        -
          in: query
          name: country_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: city_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: metro_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: latitude
          description: ''
          schema:
            type: number
            minimum: -90
            maximum: 90
        -
          in: query
          name: longitude
          description: ''
          schema:
            type: number
            minimum: -180
            maximum: 180
        -
          in: query
          name: phone
          description: ''
          schema:
            type: string
        -
          in: query
          name: work_info_status
          description: ''
          schema:
            type: string
            default: no_information
            enum:
              - always_opened
              - forever_closed
              - no_information
              - temporarily_closed
              - timetable
            description: 'Status of information about timetable'
        -
          in: query
          name: timetable
          description: ''
          schema:
            type: string
        -
          in: query
          name: is_main_address
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/groups_addAddress_response'
  /method/groups.addCallbackServer:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: url
          description: ''
          schema:
            type: string
        -
          in: query
          name: title
          description: ''
          schema:
            type: string
            maxLength: 14
        -
          in: query
          name: secret_key
          description: ''
          schema:
            type: string
            maxLength: 50
      responses:
        200:
          $ref: '#/components/schemas/groups_addCallbackServer_response'
  /method/groups.addLink:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: link
          description: 'Link URL.'
          schema:
            type: string
        -
          in: query
          name: text
          description: 'Description text for the link.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/groups_addLink_response'
  /method/groups.approveRequest:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.ban:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: end_date
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: reason
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: comment
          description: ''
          schema:
            type: string
        -
          in: query
          name: comment_visible
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.create:
    get:
      parameters:
        -
          in: query
          name: title
          description: 'Community title.'
          schema:
            type: string
        -
          in: query
          name: description
          description: "Community description (ignored for 'type' = 'public')."
          schema:
            type: string
        -
          in: query
          name: type
          description: "Community type. Possible values: *'group' - group,, *'event' - event,, *'public' - public page"
          schema:
            type: string
            default: group
            enum:
              - event
              - group
              - public
        -
          in: query
          name: public_category
          description: "Category ID (for 'type' = 'public' only)."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: public_subcategory
          description: 'Public page subcategory ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: subtype
          description: "Public page subtype. Possible values: *'1' - place or small business,, *'2' - company, organization or website,, *'3' - famous person or group of people,, *'4' - product or work of art."
          schema:
            type: integer
            minimum: 0
            enum:
              - 1
              - 2
              - 3
              - 4
      responses:
        200:
          $ref: '#/components/schemas/groups_create_response'
  /method/groups.deleteAddress:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: address_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.deleteCallbackServer:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: server_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.deleteLink:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: link_id
          description: 'Link ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.disableOnline:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.edit:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: title
          description: 'Community title.'
          schema:
            type: string
        -
          in: query
          name: description
          description: 'Community description.'
          schema:
            type: string
        -
          in: query
          name: screen_name
          description: 'Community screen name.'
          schema:
            type: string
        -
          in: query
          name: access
          description: "Community type. Possible values: *'0' - open,, *'1' - closed,, *'2' - private."
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
        -
          in: query
          name: website
          description: 'Website that will be displayed in the community information field.'
          schema:
            type: string
        -
          in: query
          name: subject
          description: "Community subject. Possible values: , *'1' - auto/moto,, *'2' - activity holidays,, *'3' - business,, *'4' - pets,, *'5' - health,, *'6' - dating and communication, , *'7' - games,, *'8' - IT (computers and software),, *'9' - cinema,, *'10' - beauty and fashion,, *'11' - cooking,, *'12' - art and culture,, *'13' - literature,, *'14' - mobile services and internet,, *'15' - music,, *'16' - science and technology,, *'17' - real estate,, *'18' - news and media,, *'19' - security,, *'20' - education,, *'21' - home and renovations,, *'22' - politics,, *'23' - food,, *'24' - industry,, *'25' - travel,, *'26' - work,, *'27' - entertainment,, *'28' - religion,, *'29' - family,, *'30' - sports,, *'31' - insurance,, *'32' - television,, *'33' - goods and services,, *'34' - hobbies,, *'35' - finance,, *'36' - photo,, *'37' - esoterics,, *'38' - electronics and appliances,, *'39' - erotic,, *'40' - humor,, *'41' - society, humanities,, *'42' - design and graphics."
          schema:
            type: string
            enum:
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
              - 7
              - 8
              - 9
              - 10
              - 11
              - 12
              - 13
              - 14
              - 15
              - 16
              - 17
              - 18
              - 19
              - 20
              - 21
              - 22
              - 23
              - 24
              - 25
              - 26
              - 27
              - 28
              - 29
              - 30
              - 31
              - 32
              - 33
              - 34
              - 35
              - 36
              - 37
              - 38
              - 39
              - 40
              - 41
              - 42
        -
          in: query
          name: email
          description: 'Organizer email (for events).'
          schema:
            type: string
        -
          in: query
          name: phone
          description: 'Organizer phone number (for events).'
          schema:
            type: string
        -
          in: query
          name: rss
          description: 'RSS feed address for import (available only to communities with special permission. Contact vk.com/support to get it.'
          schema:
            type: string
        -
          in: query
          name: event_start_date
          description: 'Event start date in Unixtime format.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: event_finish_date
          description: 'Event finish date in Unixtime format.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: event_group_id
          description: 'Organizer community ID (for events only).'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: public_category
          description: 'Public page category ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: public_subcategory
          description: 'Public page subcategory ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: public_date
          description: 'Founding date of a company or organization owning the community in "dd.mm.YYYY" format.'
          schema:
            type: string
        -
          in: query
          name: wall
          description: "Wall settings. Possible values: *'0' - disabled,, *'1' - open,, *'2' - limited (groups and events only),, *'3' - closed (groups and events only)."
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
              - 3
        -
          in: query
          name: topics
          description: "Board topics settings. Possbile values: , *'0' - disabled,, *'1' - open,, *'2' - limited (for groups and events only)."
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
        -
          in: query
          name: photos
          description: "Photos settings. Possible values: *'0' - disabled,, *'1' - open,, *'2' - limited (for groups and events only)."
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
        -
          in: query
          name: video
          description: "Video settings. Possible values: *'0' - disabled,, *'1' - open,, *'2' - limited (for groups and events only)."
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
        -
          in: query
          name: audio
          description: "Audio settings. Possible values: *'0' - disabled,, *'1' - open,, *'2' - limited (for groups and events only)."
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
        -
          in: query
          name: links
          description: "Links settings (for public pages only). Possible values: *'0' - disabled,, *'1' - enabled."
          schema:
            type: boolean
        -
          in: query
          name: events
          description: "Events settings (for public pages only). Possible values: *'0' - disabled,, *'1' - enabled."
          schema:
            type: boolean
        -
          in: query
          name: places
          description: "Places settings (for public pages only). Possible values: *'0' - disabled,, *'1' - enabled."
          schema:
            type: boolean
        -
          in: query
          name: contacts
          description: "Contacts settings (for public pages only). Possible values: *'0' - disabled,, *'1' - enabled."
          schema:
            type: boolean
        -
          in: query
          name: docs
          description: "Documents settings. Possible values: *'0' - disabled,, *'1' - open,, *'2' - limited (for groups and events only)."
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
        -
          in: query
          name: wiki
          description: "Wiki pages settings. Possible values: *'0' - disabled,, *'1' - open,, *'2' - limited (for groups and events only)."
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
        -
          in: query
          name: messages
          description: "Community messages. Possible values: *'0' — disabled,, *'1' — enabled."
          schema:
            type: boolean
        -
          in: query
          name: articles
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: addresses
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: age_limits
          description: "Community age limits. Possible values: *'1' — no limits,, *'2' — 16+,, *'3' — 18+."
          schema:
            type: integer
            default: 1
            minimum: 0
            enum:
              - 1
              - 2
              - 3
        -
          in: query
          name: market
          description: "Market settings. Possible values: *'0' - disabled,, *'1' - enabled."
          schema:
            type: boolean
        -
          in: query
          name: market_comments
          description: "market comments settings. Possible values: *'0' - disabled,, *'1' - enabled."
          schema:
            type: boolean
        -
          in: query
          name: market_country
          description: 'Market delivery countries.'
          schema:
            type: array
            items:
              type: integer
            maxItems: 10
        -
          in: query
          name: market_city
          description: 'Market delivery cities (if only one country is specified).'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 10
        -
          in: query
          name: market_currency
          description: "Market currency settings. Possbile values: , *'643' - Russian rubles,, *'980' - Ukrainian hryvnia,, *'398' - Kazakh tenge,, *'978' - Euro,, *'840' - US dollars"
          schema:
            type: integer
            minimum: 0
            enum:
              - 643
              - 980
              - 398
              - 978
              - 840
        -
          in: query
          name: market_contact
          description: "Seller contact for market. Set '0' for community messages."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: market_wiki
          description: 'ID of a wiki page with market description.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: obscene_filter
          description: "Obscene expressions filter in comments. Possible values: , *'0' - disabled,, *'1' - enabled."
          schema:
            type: boolean
        -
          in: query
          name: obscene_stopwords
          description: "Stopwords filter in comments. Possible values: , *'0' - disabled,, *'1' - enabled."
          schema:
            type: boolean
        -
          in: query
          name: obscene_words
          description: 'Keywords for stopwords filter.'
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: main_section
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: secondary_section
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: country
          description: 'Country of the community.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: city
          description: 'City of the community.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.editAddress:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: address_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: title
          description: ''
          schema:
            type: string
            maxLength: 255
        -
          in: query
          name: address
          description: ''
          schema:
            type: string
            maxLength: 255
        -
          in: query
          name: additional_address
          description: ''
          schema:
            type: string
            maxLength: 400
        -
          in: query
          name: country_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: city_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: metro_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: latitude
          description: ''
          schema:
            type: number
            minimum: -90
            maximum: 90
        -
          in: query
          name: longitude
          description: ''
          schema:
            type: number
            minimum: -180
            maximum: 180
        -
          in: query
          name: phone
          description: ''
          schema:
            type: string
        -
          in: query
          name: work_info_status
          description: ''
          schema:
            type: string
            enum:
              - always_opened
              - forever_closed
              - no_information
              - temporarily_closed
              - timetable
            description: 'Status of information about timetable'
        -
          in: query
          name: timetable
          description: ''
          schema:
            type: string
        -
          in: query
          name: is_main_address
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/groups_editAddress_response'
  /method/groups.editCallbackServer:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: server_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: url
          description: ''
          schema:
            type: string
        -
          in: query
          name: title
          description: ''
          schema:
            type: string
            maxLength: 14
        -
          in: query
          name: secret_key
          description: ''
          schema:
            type: string
            maxLength: 50
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.editLink:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: link_id
          description: 'Link ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: text
          description: 'New description text for the link.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.editManager:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: role
          description: "Manager role. Possible values: *'moderator',, *'editor',, *'administrator',, *'advertiser'."
          schema:
            type: string
            enum:
              - moderator
              - editor
              - administrator
              - advertiser
        -
          in: query
          name: is_contact
          description: "'1' — to show the manager in Contacts block of the community."
          schema:
            type: boolean
        -
          in: query
          name: contact_position
          description: 'Position to show in Contacts block.'
          schema:
            type: string
        -
          in: query
          name: contact_phone
          description: 'Contact phone.'
          schema:
            type: string
        -
          in: query
          name: contact_email
          description: 'Contact e-mail.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.enableOnline:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.get:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: extended
          description: "'1' — to return complete information about a user's communities, '0' — to return a list of community IDs without any additional fields (default),"
          schema:
            type: boolean
        -
          in: query
          name: filter
          description: "Types of communities to return: 'admin' — to return communities administered by the user , 'editor' — to return communities where the user is an administrator or editor, 'moder' — to return communities where the user is an administrator, editor, or moderator, 'groups' — to return only groups, 'publics' — to return only public pages, 'events' — to return only events"
          schema:
            type: array
            items:
              $ref: '#/components/schemas/groups_filter'
        -
          in: query
          name: fields
          description: 'Profile fields to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/groups_fields'
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of communities.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of communities to return.'
          schema:
            type: integer
            minimum: 0
            maximum: 1000
      responses:
        200:
          $ref: '#/components/schemas/groups_get_response'
  /method/groups.getAddresses:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID or screen name of the community.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: address_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 100
        -
          in: query
          name: latitude
          description: 'Latitude of  the user geo position.'
          schema:
            type: number
            minimum: -90
            maximum: 90
        -
          in: query
          name: longitude
          description: 'Longitude of the user geo position.'
          schema:
            type: number
            minimum: -180
            maximum: 180
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of community addresses.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of community addresses to return.'
          schema:
            type: integer
            default: 10
            minimum: 0
        -
          in: query
          name: fields
          description: 'Address fields'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/addresses_fields'
      responses:
        200:
          $ref: '#/components/schemas/groups_getAddresses_response'
  /method/groups.getBanned:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of users.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of users to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 200
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/groups_getBanned_response'
  /method/groups.getById:
    get:
      parameters:
        -
          in: query
          name: group_ids
          description: 'IDs or screen names of communities.'
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: group_id
          description: 'ID or screen name of the community.'
          schema:
            type: string
        -
          in: query
          name: fields
          description: 'Group fields to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/groups_fields'
      responses:
        200:
          $ref: '#/components/schemas/groups_getById_object_legacy_response'
  /method/groups.getCallbackConfirmationCode:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/groups_getCallbackConfirmationCode_response'
  /method/groups.getCallbackServers:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: server_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/groups_getCallbackServers_response'
  /method/groups.getCallbackSettings:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: server_id
          description: 'Server ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/groups_getCallbackSettings_response'
  /method/groups.getCatalog:
    get:
      parameters:
        -
          in: query
          name: category_id
          description: 'Category id received from [vk.com/dev/groups.getCatalogInfo|groups.getCatalogInfo].'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: subcategory_id
          description: 'Subcategory id received from [vk.com/dev/groups.getCatalogInfo|groups.getCatalogInfo].'
          schema:
            type: integer
            minimum: 0
            maximum: 99
      responses:
        200:
          $ref: '#/components/schemas/groups_getCatalog_response'
  /method/groups.getCatalogInfo:
    get:
      parameters:
        -
          in: query
          name: extended
          description: '1 - to return communities count and three communities for preview. By default: 0.'
          schema:
            type: boolean
            default: 0
        -
          in: query
          name: subcategories
          description: '1 - to return subcategories info. By default: 0.'
          schema:
            type: boolean
            default: 0
      responses:
        200:
          $ref: '#/components/schemas/groups_getCatalogInfo_response'
  /method/groups.getInvitedUsers:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Group ID to return invited users for.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of results.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of results to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
        -
          in: query
          name: fields
          description: "List of additional fields to be returned. Available values: 'sex, bdate, city, country, photo_50, photo_100, photo_200_orig, photo_200, photo_400_orig, photo_max, photo_max_orig, online, online_mobile, lists, domain, has_mobile, contacts, connections, site, education, universities, schools, can_post, can_see_all_posts, can_see_audio, can_write_private_message, status, last_seen, common_count, relation, relatives, counters'."
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: name_case
          description: "Case for declension of user name and surname. Possible values: *'nom' — nominative (default),, *'gen' — genitive,, *'dat' — dative,, *'acc' — accusative, , *'ins' — instrumental,, *'abl' — prepositional."
          schema:
            type: string
            enum:
              - nom
              - gen
              - dat
              - acc
              - ins
              - abl
      responses:
        200:
          $ref: '#/components/schemas/groups_getInvitedUsers_response'
  /method/groups.getInvites:
    get:
      parameters:
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of invitations.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of invitations to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
        -
          in: query
          name: extended
          description: "'1' — to return additional [vk.com/dev/fields_groups|fields] for communities.."
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/groups_getInvites_response'
  /method/groups.getLongPollServer:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/groups_getLongPollServer_response'
  /method/groups.getLongPollSettings:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/groups_getLongPollSettings_response'
  /method/groups.getMembers:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID or screen name of the community.'
          schema:
            type: string
        -
          in: query
          name: sort
          description: "Sort order. Available values: 'id_asc', 'id_desc', 'time_asc', 'time_desc'. 'time_asc' and 'time_desc' are availavle only if the method is called by the group's 'moderator'."
          schema:
            type: string
            default: id_asc
            enum:
              - id_asc
              - id_desc
              - time_asc
              - time_desc
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of community members.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of community members to return.'
          schema:
            type: integer
            default: 1000
            minimum: 0
        -
          in: query
          name: fields
          description: "List of additional fields to be returned. Available values: 'sex, bdate, city, country, photo_50, photo_100, photo_200_orig, photo_200, photo_400_orig, photo_max, photo_max_orig, online, online_mobile, lists, domain, has_mobile, contacts, connections, site, education, universities, schools, can_post, can_see_all_posts, can_see_audio, can_write_private_message, status, last_seen, common_count, relation, relatives, counters'."
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: filter
          description: "*'friends' - only friends in this community will be returned,, *'unsure' - only those who pressed 'I may attend' will be returned (if it's an event)."
          schema:
            type: string
            enum:
              - friends
              - unsure
              - managers
              - donut
      responses:
        200:
          $ref: '#/components/schemas/groups_getMembers_response'
  /method/groups.getRequests:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of results.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of results to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 200
        -
          in: query
          name: fields
          description: 'Profile fields to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
      responses:
        200:
          $ref: '#/components/schemas/groups_getRequests_response'
  /method/groups.getSettings:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/groups_getSettings_response'
  /method/groups.getTagList:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/groups_getTagList_response'
  /method/groups.getTokenPermissions:
    get:
      responses:
        200:
          $ref: '#/components/schemas/groups_getTokenPermissions_response'
  /method/groups.invite:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.isMember:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID or screen name of the community.'
          schema:
            type: string
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: user_ids
          description: 'User IDs.'
          schema:
            type: array
            items:
              type: integer
              minimum: 1
        -
          in: query
          name: extended
          description: "'1' — to return an extended response with additional fields. By default: '0'."
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/groups_isMember_response'
  /method/groups.join:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID or screen name of the community.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: not_sure
          description: "Optional parameter which is taken into account when 'gid' belongs to the event: '1' — Perhaps I will attend, '0' — I will be there for sure (default), ,"
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.leave:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID or screen name of the community.'
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.removeUser:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.reorderLink:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: link_id
          description: 'Link ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: after
          description: "ID of the link after which to place the link with 'link_id'."
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.search:
    get:
      parameters:
        -
          in: query
          name: q
          description: 'Search query string.'
          schema:
            type: string
        -
          in: query
          name: type
          description: "Community type. Possible values: 'group, page, event.'"
          schema:
            type: string
            enum:
              - group
              - page
              - event
        -
          in: query
          name: country_id
          description: 'Country ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: city_id
          description: 'City ID. If this parameter is transmitted, country_id is ignored.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: future
          description: "'1' — to return only upcoming events. Works with the 'type' = 'event' only."
          schema:
            type: boolean
        -
          in: query
          name: market
          description: "'1' — to return communities with enabled market only."
          schema:
            type: boolean
        -
          in: query
          name: sort
          description: "Sort order. Possible values: *'0' — default sorting (similar the full version of the site),, *'1' — by growth speed,, *'2'— by the \"day attendance/members number\" ratio,, *'3' — by the \"Likes number/members number\" ratio,, *'4' — by the \"comments number/members number\" ratio,, *'5' — by the \"boards entries number/members number\" ratio."
          schema:
            type: integer
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of results.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: "Number of communities to return. \"Note that you can not receive more than first thousand of results, regardless of 'count' and 'offset' values.\""
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 1000
      responses:
        200:
          $ref: '#/components/schemas/groups_search_response'
  /method/groups.setCallbackSettings:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: server_id
          description: 'Server ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: api_version
          description: ''
          schema:
            type: string
        -
          in: query
          name: message_new
          description: "A new incoming message has been received ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: message_reply
          description: "A new outcoming message has been received ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: message_allow
          description: "Allowed messages notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: message_edit
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: message_deny
          description: "Denied messages notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: message_typing_state
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: photo_new
          description: "New photos notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: audio_new
          description: "New audios notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: video_new
          description: "New videos notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: wall_reply_new
          description: "New wall replies notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: wall_reply_edit
          description: "Wall replies edited notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: wall_reply_delete
          description: "A wall comment has been deleted ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: wall_reply_restore
          description: "A wall comment has been restored ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: wall_post_new
          description: "New wall posts notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: wall_repost
          description: "New wall posts notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: board_post_new
          description: "New board posts notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: board_post_edit
          description: "Board posts edited notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: board_post_restore
          description: "Board posts restored notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: board_post_delete
          description: "Board posts deleted notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: photo_comment_new
          description: "New comment to photo notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: photo_comment_edit
          description: "A photo comment has been edited ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: photo_comment_delete
          description: "A photo comment has been deleted ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: photo_comment_restore
          description: "A photo comment has been restored ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: video_comment_new
          description: "New comment to video notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: video_comment_edit
          description: "A video comment has been edited ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: video_comment_delete
          description: "A video comment has been deleted ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: video_comment_restore
          description: "A video comment has been restored ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: market_comment_new
          description: "New comment to market item notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: market_comment_edit
          description: "A market comment has been edited ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: market_comment_delete
          description: "A market comment has been deleted ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: market_comment_restore
          description: "A market comment has been restored ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: market_order_new
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: market_order_edit
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: poll_vote_new
          description: "A vote in a public poll has been added ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: group_join
          description: "Joined community notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: group_leave
          description: "Left community notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: group_change_settings
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: group_change_photo
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: group_officers_edit
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: user_block
          description: 'User added to community blacklist'
          schema:
            type: boolean
        -
          in: query
          name: user_unblock
          description: 'User removed from community blacklist'
          schema:
            type: boolean
        -
          in: query
          name: lead_forms_new
          description: 'New form in lead forms'
          schema:
            type: boolean
        -
          in: query
          name: like_add
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: like_remove
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: message_event
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_subscription_create
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_subscription_prolonged
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_subscription_cancelled
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_subscription_price_changed
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_subscription_expired
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_money_withdraw
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_money_withdraw_error
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.setLongPollSettings:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: enabled
          description: "Sets whether Long Poll is enabled ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: api_version
          description: ''
          schema:
            type: string
        -
          in: query
          name: message_new
          description: "A new incoming message has been received ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: message_reply
          description: "A new outcoming message has been received ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: message_allow
          description: "Allowed messages notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: message_deny
          description: "Denied messages notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: message_edit
          description: "A message has been edited ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: message_typing_state
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: photo_new
          description: "New photos notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: audio_new
          description: "New audios notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: video_new
          description: "New videos notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: wall_reply_new
          description: "New wall replies notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: wall_reply_edit
          description: "Wall replies edited notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: wall_reply_delete
          description: "A wall comment has been deleted ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: wall_reply_restore
          description: "A wall comment has been restored ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: wall_post_new
          description: "New wall posts notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: wall_repost
          description: "New wall posts notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: board_post_new
          description: "New board posts notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: board_post_edit
          description: "Board posts edited notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: board_post_restore
          description: "Board posts restored notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: board_post_delete
          description: "Board posts deleted notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: photo_comment_new
          description: "New comment to photo notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: photo_comment_edit
          description: "A photo comment has been edited ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: photo_comment_delete
          description: "A photo comment has been deleted ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: photo_comment_restore
          description: "A photo comment has been restored ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: video_comment_new
          description: "New comment to video notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: video_comment_edit
          description: "A video comment has been edited ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: video_comment_delete
          description: "A video comment has been deleted ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: video_comment_restore
          description: "A video comment has been restored ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: market_comment_new
          description: "New comment to market item notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: market_comment_edit
          description: "A market comment has been edited ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: market_comment_delete
          description: "A market comment has been deleted ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: market_comment_restore
          description: "A market comment has been restored ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: poll_vote_new
          description: "A vote in a public poll has been added ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: group_join
          description: "Joined community notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: group_leave
          description: "Left community notifications ('0' — disabled, '1' — enabled)."
          schema:
            type: boolean
        -
          in: query
          name: group_change_settings
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: group_change_photo
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: group_officers_edit
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: user_block
          description: 'User added to community blacklist'
          schema:
            type: boolean
        -
          in: query
          name: user_unblock
          description: 'User removed from community blacklist'
          schema:
            type: boolean
        -
          in: query
          name: like_add
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: like_remove
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: message_event
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_subscription_create
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_subscription_prolonged
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_subscription_cancelled
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_subscription_price_changed
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_subscription_expired
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_money_withdraw
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_money_withdraw_error
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.setSettings:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: messages
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: bots_capabilities
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: bots_start_button
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: bots_add_to_chat
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.setUserNote:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: note
          description: 'Note body'
          schema:
            type: string
            maxLength: 96
      responses:
        200:
          $ref: '#/components/schemas/base_bool_response'
  /method/groups.tagAdd:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: tag_name
          description: ''
          schema:
            type: string
            maxLength: 20
        -
          in: query
          name: tag_color
          description: ''
          schema:
            type: string
            enum:
              - '454647'
              - 45678f
              - 4bb34b
              - 5181b8
              - 539b9c
              - 5c9ce6
              - 63b9ba
              - 6bc76b
              - 76787a
              - 792ec0
              - 7a6c4f
              - 7ececf
              - 9e8d6b
              - a162de
              - aaaeb3
              - bbaa84
              - e64646
              - ff5c5c
              - ffa000
              - ffc107
      responses:
        200:
          $ref: '#/components/schemas/base_bool_response'
  /method/groups.tagBind:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: tag_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 1
            maximum: 2000000000
        -
          in: query
          name: act
          description: 'Describe the action'
          schema:
            type: string
            enum:
              - bind
              - unbind
      responses:
        200:
          $ref: '#/components/schemas/base_bool_response'
  /method/groups.tagDelete:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: tag_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_bool_response'
  /method/groups.tagUpdate:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: tag_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: tag_name
          description: ''
          schema:
            type: string
            maxLength: 20
      responses:
        200:
          $ref: '#/components/schemas/base_bool_response'
  /method/groups.toggleMarket:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: state
          description: ''
          schema:
            type: string
            enum:
              - advanced
              - basic
              - none
            description: 'Declares state if market is enabled in group.'
        -
          in: query
          name: ref
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/groups.unban:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/leadForms.create:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: name
          description: ''
          schema:
            type: string
            maxLength: 100
        -
          in: query
          name: title
          description: ''
          schema:
            type: string
            maxLength: 60
        -
          in: query
          name: description
          description: ''
          schema:
            type: string
            maxLength: 600
        -
          in: query
          name: questions
          description: ''
          schema:
            type: string
        -
          in: query
          name: policy_link_url
          description: ''
          schema:
            type: string
            maxLength: 200
        -
          in: query
          name: photo
          description: ''
          schema:
            type: string
        -
          in: query
          name: confirmation
          description: ''
          schema:
            type: string
            maxLength: 300
        -
          in: query
          name: site_link_url
          description: ''
          schema:
            type: string
            maxLength: 200
        -
          in: query
          name: active
          description: ''
          schema:
            type: boolean
            default: 0
        -
          in: query
          name: once_per_user
          description: ''
          schema:
            type: boolean
            default: 0
        -
          in: query
          name: pixel_code
          description: ''
          schema:
            type: string
        -
          in: query
          name: notify_admins
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: notify_emails
          description: ''
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/leadForms_create_response'
  /method/leadForms.delete:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: form_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/leadForms_delete_response'
  /method/leadForms.get:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: form_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/leadForms_get_response'
  /method/leadForms.getLeads:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: form_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: limit
          description: ''
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 1000
        -
          in: query
          name: next_page_token
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/leadForms_getLeads_response'
  /method/leadForms.getUploadURL:
    get:
      responses:
        200:
          $ref: '#/components/schemas/leadForms_uploadUrl_response'
  /method/leadForms.list:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/leadForms_list_response'
  /method/leadForms.update:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: form_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: name
          description: ''
          schema:
            type: string
            maxLength: 100
        -
          in: query
          name: title
          description: ''
          schema:
            type: string
            maxLength: 60
        -
          in: query
          name: description
          description: ''
          schema:
            type: string
            maxLength: 600
        -
          in: query
          name: questions
          description: ''
          schema:
            type: string
        -
          in: query
          name: policy_link_url
          description: ''
          schema:
            type: string
            maxLength: 200
        -
          in: query
          name: photo
          description: ''
          schema:
            type: string
        -
          in: query
          name: confirmation
          description: ''
          schema:
            type: string
            maxLength: 300
        -
          in: query
          name: site_link_url
          description: ''
          schema:
            type: string
            maxLength: 200
        -
          in: query
          name: active
          description: ''
          schema:
            type: boolean
            default: 0
        -
          in: query
          name: once_per_user
          description: ''
          schema:
            type: boolean
            default: 0
        -
          in: query
          name: pixel_code
          description: ''
          schema:
            type: string
        -
          in: query
          name: notify_admins
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: notify_emails
          description: ''
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/leadForms_create_response'
  /method/likes.add:
    get:
      parameters:
        -
          in: query
          name: type
          description: "Object type: 'post' — post on user or community wall, 'comment' — comment on a wall post, 'photo' — photo, 'audio' — audio, 'video' — video, 'note' — note, 'photo_comment' — comment on the photo, 'video_comment' — comment on the video, 'topic_comment' — comment in the discussion, 'sitepage' — page of the site where the [vk.com/dev/Like|Like widget] is installed"
          schema:
            type: string
            enum:
              - post
              - comment
              - photo
              - audio
              - video
              - note
              - market
              - photo_comment
              - video_comment
              - topic_comment
              - market_comment
              - sitepage
              - textpost
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the object.'
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: 'Object ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: access_key
          description: 'Access key required for an object owned by a private entity.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/likes_add_response'
  /method/likes.delete:
    get:
      parameters:
        -
          in: query
          name: type
          description: "Object type: 'post' — post on user or community wall, 'comment' — comment on a wall post, 'photo' — photo, 'audio' — audio, 'video' — video, 'note' — note, 'photo_comment' — comment on the photo, 'video_comment' — comment on the video, 'topic_comment' — comment in the discussion, 'sitepage' — page of the site where the [vk.com/dev/Like|Like widget] is installed"
          schema:
            type: string
            enum:
              - post
              - comment
              - photo
              - audio
              - video
              - note
              - market
              - photo_comment
              - video_comment
              - topic_comment
              - market_comment
              - sitepage
              - textpost
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the object.'
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: 'Object ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: access_key
          description: 'Access key required for an object owned by a private entity.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/likes_delete_response'
  /method/likes.getList:
    get:
      parameters:
        -
          in: query
          name: type
          description: ", Object type: 'post' — post on user or community wall, 'comment' — comment on a wall post, 'photo' — photo, 'audio' — audio, 'video' — video, 'note' — note, 'photo_comment' — comment on the photo, 'video_comment' — comment on the video, 'topic_comment' — comment in the discussion, 'sitepage' — page of the site where the [vk.com/dev/Like|Like widget] is installed"
          schema:
            type: string
            enum:
              - post
              - comment
              - photo
              - audio
              - video
              - note
              - market
              - photo_comment
              - video_comment
              - topic_comment
              - market_comment
              - sitepage
              - textpost
        -
          in: query
          name: owner_id
          description: "ID of the user, community, or application that owns the object. If the 'type' parameter is set as 'sitepage', the application ID is passed as 'owner_id'. Use negative value for a community id. If the 'type' parameter is not set, the 'owner_id' is assumed to be either the current user or the same application ID as if the 'type' parameter was set to 'sitepage'."
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: "Object ID. If 'type' is set as 'sitepage', 'item_id' can include the 'page_id' parameter value used during initialization of the [vk.com/dev/Like|Like widget]."
          schema:
            type: integer
        -
          in: query
          name: page_url
          description: "URL of the page where the [vk.com/dev/Like|Like widget] is installed. Used instead of the 'item_id' parameter."
          schema:
            type: string
        -
          in: query
          name: filter
          description: "Filters to apply: 'likes' — returns information about all users who liked the object (default), 'copies' — returns information only about users who told their friends about the object"
          schema:
            type: string
            enum:
              - likes
              - copies
        -
          in: query
          name: friends_only
          description: "Specifies which users are returned: '1' — to return only the current user's friends, '0' — to return all users (default)"
          schema:
            type: integer
            default: 0
            enum:
              - 0
              - 1
              - 2
              - 3
        -
          in: query
          name: extended
          description: "Specifies whether extended information will be returned. '1' — to return extended information about users and communities from the 'Likes' list, '0' — to return no additional information (default)"
          schema:
            type: boolean
        -
          in: query
          name: offset
          description: 'Offset needed to select a specific subset of users.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: "Number of user IDs to return (maximum '1000'). Default is '100' if 'friends_only' is set to '0', otherwise, the default is '10' if 'friends_only' is set to '1'."
          schema:
            type: integer
            minimum: 0
            maximum: 1000
        -
          in: query
          name: skip_own
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/likes_getList_response'
  /method/likes.isLiked:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: type
          description: "Object type: 'post' — post on user or community wall, 'comment' — comment on a wall post, 'photo' — photo, 'audio' — audio, 'video' — video, 'note' — note, 'photo_comment' — comment on the photo, 'video_comment' — comment on the video, 'topic_comment' — comment in the discussion"
          schema:
            type: string
            enum:
              - post
              - comment
              - photo
              - audio
              - video
              - note
              - market
              - photo_comment
              - video_comment
              - topic_comment
              - market_comment
              - sitepage
              - textpost
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the object.'
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: 'Object ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/likes_isLiked_response'
  /method/market.add:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an item owner community.'
          schema:
            type: integer
        -
          in: query
          name: name
          description: 'Item name.'
          schema:
            type: string
            minLength: 4
            maxLength: 100
        -
          in: query
          name: description
          description: 'Item description.'
          schema:
            type: string
            minLength: 10
        -
          in: query
          name: category_id
          description: 'Item category ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: price
          description: 'Item price.'
          schema:
            type: number
            minimum: 0
        -
          in: query
          name: old_price
          description: ''
          schema:
            type: number
            minimum: 0.01
        -
          in: query
          name: deleted
          description: "Item status ('1' — deleted, '0' — not deleted)."
          schema:
            type: boolean
        -
          in: query
          name: main_photo_id
          description: 'Cover photo ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: photo_ids
          description: 'IDs of additional photos.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 4
        -
          in: query
          name: url
          description: 'Url for button in market item.'
          schema:
            type: string
            minLength: 0
            maxLength: 320
        -
          in: query
          name: dimension_width
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 100000
        -
          in: query
          name: dimension_height
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 100000
        -
          in: query
          name: dimension_length
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 100000
        -
          in: query
          name: weight
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 100000000
        -
          in: query
          name: sku
          description: ''
          schema:
            type: string
            maxLength: 50
      responses:
        200:
          $ref: '#/components/schemas/market_add_response'
  /method/market.addAlbum:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an item owner community.'
          schema:
            type: integer
        -
          in: query
          name: title
          description: 'Collection title.'
          schema:
            type: string
            maxLength: 128
        -
          in: query
          name: photo_id
          description: 'Cover photo ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: main_album
          description: "Set as main ('1' - set, '0' - no)."
          schema:
            type: boolean
        -
          in: query
          name: is_hidden
          description: 'Set as hidden'
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/market_addAlbum_response'
  /method/market.addToAlbum:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an item owner community.'
          schema:
            type: integer
        -
          in: query
          name: item_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: album_ids
          description: 'Collections IDs to add item to.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/market.createComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an item owner community.'
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: 'Item ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: message
          description: "Comment text (required if 'attachments' parameter is not specified)"
          schema:
            type: string
        -
          in: query
          name: attachments
          description: "Comma-separated list of objects attached to a comment. The field is submitted the following way: , \"'<owner_id>_<media_id>,<owner_id>_<media_id>'\", , '' - media attachment type: \"'photo' - photo, 'video' - video, 'audio' - audio, 'doc' - document\", , '<owner_id>' - media owner id, '<media_id>' - media attachment id, , For example: \"photo100172_166443618,photo66748_265827614\","
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: from_group
          description: "'1' - comment will be published on behalf of a community, '0' - on behalf of a user (by default)."
          schema:
            type: boolean
        -
          in: query
          name: reply_to_comment
          description: 'ID of a comment to reply with current comment to.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: sticker_id
          description: 'Sticker ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: guid
          description: 'Random value to avoid resending one comment.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/market_createComment_response'
  /method/market.delete:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an item owner community.'
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: 'Item ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/market.deleteAlbum:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an collection owner community.'
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: 'Collection ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/market.deleteComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: "identifier of an item owner community, \"Note that community id in the 'owner_id' parameter should be negative number. For example 'owner_id'=-1 matches the [vk.com/apiclub|VK API] community \""
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'comment id'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/market_deleteComment_response'
  /method/market.edit:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an item owner community.'
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: 'Item ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: name
          description: 'Item name.'
          schema:
            type: string
            minLength: 4
            maxLength: 100
        -
          in: query
          name: description
          description: 'Item description.'
          schema:
            type: string
            minLength: 10
        -
          in: query
          name: category_id
          description: 'Item category ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: price
          description: 'Item price.'
          schema:
            type: number
            minimum: 0
        -
          in: query
          name: old_price
          description: ''
          schema:
            type: number
            minimum: 0.01
        -
          in: query
          name: deleted
          description: "Item status ('1' — deleted, '0' — not deleted)."
          schema:
            type: boolean
        -
          in: query
          name: main_photo_id
          description: 'Cover photo ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: photo_ids
          description: 'IDs of additional photos.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 4
        -
          in: query
          name: url
          description: 'Url for button in market item.'
          schema:
            type: string
            minLength: 0
            maxLength: 320
        -
          in: query
          name: dimension_width
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 100000
        -
          in: query
          name: dimension_height
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 100000
        -
          in: query
          name: dimension_length
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 100000
        -
          in: query
          name: weight
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 100000000
        -
          in: query
          name: sku
          description: ''
          schema:
            type: string
            maxLength: 50
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/market.editAlbum:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an collection owner community.'
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: 'Collection ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: title
          description: 'Collection title.'
          schema:
            type: string
            maxLength: 128
        -
          in: query
          name: photo_id
          description: 'Cover photo id'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: main_album
          description: "Set as main ('1' - set, '0' - no)."
          schema:
            type: boolean
        -
          in: query
          name: is_hidden
          description: 'Set as hidden'
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/market.editComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an item owner community.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: message
          description: "New comment text (required if 'attachments' are not specified), , 2048 symbols maximum."
          schema:
            type: string
        -
          in: query
          name: attachments
          description: "Comma-separated list of objects attached to a comment. The field is submitted the following way: , \"'<owner_id>_<media_id>,<owner_id>_<media_id>'\", , '' - media attachment type: \"'photo' - photo, 'video' - video, 'audio' - audio, 'doc' - document\", , '<owner_id>' - media owner id, '<media_id>' - media attachment id, , For example: \"photo100172_166443618,photo66748_265827614\","
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/market.editOrder:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: order_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: merchant_comment
          description: ''
          schema:
            type: string
            maxLength: 800
        -
          in: query
          name: status
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: track_number
          description: ''
          schema:
            type: string
            maxLength: 60
        -
          in: query
          name: payment_status
          description: ''
          schema:
            type: string
            enum:
              - not_paid
              - paid
              - returned
        -
          in: query
          name: delivery_price
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: width
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 100000
        -
          in: query
          name: length
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 100000
        -
          in: query
          name: height
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 100000
        -
          in: query
          name: weight
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 100000000
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/market.get:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: "ID of an item owner community, \"Note that community id in the 'owner_id' parameter should be negative number. For example 'owner_id'=-1 matches the [vk.com/apiclub|VK API] community \""
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of items to return.'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 200
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of results.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: extended
          description: "'1' - method will return additional fields: 'likes, can_comment, car_repost, photos'. These parameters are not returned by default."
          schema:
            type: boolean
        -
          in: query
          name: date_from
          description: 'Items update date from (format: yyyy-mm-dd)'
          schema:
            type: string
        -
          in: query
          name: date_to
          description: 'Items update date to (format: yyyy-mm-dd)'
          schema:
            type: string
        -
          in: query
          name: need_variants
          description: 'Add variants to response if exist'
          schema:
            type: boolean
        -
          in: query
          name: with_disabled
          description: 'Add disabled items to response'
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/market_get_response'
  /method/market.getAlbumById:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: "identifier of an album owner community, \"Note that community id in the 'owner_id' parameter should be negative number. For example 'owner_id'=-1 matches the [vk.com/apiclub|VK API] community \""
          schema:
            type: integer
        -
          in: query
          name: album_ids
          description: 'collections identifiers to obtain data from'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/market_getAlbumById_response'
  /method/market.getAlbums:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an items owner community.'
          schema:
            type: integer
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of results.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of items to return.'
          schema:
            type: integer
            default: 50
            minimum: 0
            maximum: 100
      responses:
        200:
          $ref: '#/components/schemas/market_getAlbums_response'
  /method/market.getById:
    get:
      parameters:
        -
          in: query
          name: item_ids
          description: "Comma-separated ids list: {user id}_{item id}. If an item belongs to a community -{community id} is used. \" 'Videos' value example: , '-4363_136089719,13245770_137352259'\""
          schema:
            type: array
            items:
              type: string
            maxItems: 100
        -
          in: query
          name: extended
          description: "'1' - to return additional fields: 'likes, can_comment, car_repost, photos'. By default: '0'."
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/market_getById_response'
  /method/market.getCategories:
    get:
      parameters:
        -
          in: query
          name: count
          description: 'Number of results to return.'
          schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 1000
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of results.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/market_getCategories_response'
  /method/market.getComments:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an item owner community'
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: 'Item ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: need_likes
          description: "'1' — to return likes info."
          schema:
            type: boolean
        -
          in: query
          name: start_comment_id
          description: 'ID of a comment to start a list from (details below).'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of results to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 100
        -
          in: query
          name: sort
          description: "Sort order ('asc' — from old to new, 'desc' — from new to old)"
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          in: query
          name: extended
          description: "'1' — comments will be returned as numbered objects, in addition lists of 'profiles' and 'groups' objects will be returned."
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: 'List of additional profile fields to return. See the [vk.com/dev/fields|details]'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
      responses:
        200:
          $ref: '#/components/schemas/market_getComments_response'
  /method/market.getGroupOrders:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
      responses:
        200:
          $ref: '#/components/schemas/market_getGroupOrders_response'
  /method/market.getOrderById:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: order_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/market_getOrderById_response'
  /method/market.getOrderItems:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: order_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 50
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/market_getOrderItems_response'
  /method/market.getOrders:
    get:
      parameters:
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 10
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: date_from
          description: 'Orders status updated date from (format: yyyy-mm-dd)'
          schema:
            type: string
        -
          in: query
          name: date_to
          description: 'Orders status updated date to (format: yyyy-mm-dd)'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/market_getOrders_response'
  /method/market.removeFromAlbum:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an item owner community.'
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: 'Item ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: album_ids
          description: 'Collections IDs to remove item from.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/market.reorderAlbums:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an item owner community.'
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: 'Collection ID.'
          schema:
            type: integer
        -
          in: query
          name: before
          description: 'ID of a collection to place current collection before it.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: after
          description: 'ID of a collection to place current collection after it.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/market.reorderItems:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an item owner community.'
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: 'ID of a collection to reorder items in. Set 0 to reorder full items list.'
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: 'Item ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: before
          description: 'ID of an item to place current item before it.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: after
          description: 'ID of an item to place current item after it.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/market.report:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an item owner community.'
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: 'Item ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: reason
          description: "Complaint reason. Possible values: *'0' — spam,, *'1' — child porn,, *'2' — extremism,, *'3' — violence,, *'4' — drugs propaganda,, *'5' — adult materials,, *'6' — insult."
          schema:
            type: integer
            default: 0
            minimum: 0
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/market.reportComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an item owner community.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: reason
          description: "Complaint reason. Possible values: *'0' — spam,, *'1' — child porn,, *'2' — extremism,, *'3' — violence,, *'4' — drugs propaganda,, *'5' — adult materials,, *'6' — insult."
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/market.restore:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an item owner community.'
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: 'Deleted item ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/market.restoreComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: "identifier of an item owner community, \"Note that community id in the 'owner_id' parameter should be negative number. For example 'owner_id'=-1 matches the [vk.com/apiclub|VK API] community \""
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'deleted comment id'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/market_restoreComment_response'
  /method/market.search:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of an items owner community.'
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: q
          description: 'Search query, for example "pink slippers".'
          schema:
            type: string
        -
          in: query
          name: price_from
          description: 'Minimum item price value.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: price_to
          description: 'Maximum item price value.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: sort
          description: ''
          schema:
            type: integer
            default: 0
            enum:
              - 0
              - 1
              - 2
              - 3
        -
          in: query
          name: rev
          description: "'0' — do not use reverse order, '1' — use reverse order"
          schema:
            type: integer
            default: 1
            minimum: 0
            enum:
              - 0
              - 1
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of results.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of items to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 200
        -
          in: query
          name: extended
          description: "'1' - to return additional fields: 'likes, can_comment, car_repost, photos'. By default: '0'."
          schema:
            type: boolean
            default: '0'
        -
          in: query
          name: status
          description: ''
          schema:
            type: array
            items:
              type: integer
            maxItems: 2
        -
          in: query
          name: need_variants
          description: 'Add variants to response if exist'
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/market_search_response'
  /method/market.searchItems:
    get:
      parameters:
        -
          in: query
          name: q
          description: ''
          schema:
            type: string
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 30
            minimum: 0
            maximum: 300
        -
          in: query
          name: category_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: price_from
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: price_to
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: sort_by
          description: ''
          schema:
            type: integer
            default: 3
            enum:
              - 1
              - 2
              - 3
        -
          in: query
          name: sort_direction
          description: ''
          schema:
            type: integer
            default: 1
            enum:
              - 0
              - 1
        -
          in: query
          name: country
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: city
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/market_search_response'
  /method/messages.addChatUser:
    get:
      parameters:
        -
          in: query
          name: chat_id
          description: 'Chat ID.'
          schema:
            type: integer
            minimum: 0
            maximum: 100000000
        -
          in: query
          name: user_id
          description: 'ID of the user to be added to the chat.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: visible_messages_count
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 1000
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/messages.allowMessagesFromGroup:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Group ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: key
          description: ''
          schema:
            type: string
            maxLength: 256
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/messages.createChat:
    get:
      parameters:
        -
          in: query
          name: user_ids
          description: 'IDs of the users to be added to the chat.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: title
          description: 'Chat title.'
          schema:
            type: string
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_createChat_response'
  /method/messages.delete:
    get:
      parameters:
        -
          in: query
          name: message_ids
          description: 'Message IDs.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 1000
        -
          in: query
          name: spam
          description: "'1' — to mark message as spam."
          schema:
            type: boolean
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with user access token)'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: delete_for_all
          description: "'1' — delete message for for all."
          schema:
            type: boolean
            default: false
        -
          in: query
          name: peer_id
          description: "Destination ID. \"For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. \""
          schema:
            type: integer
        -
          in: query
          name: cmids
          description: 'Conversation message IDs.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 100
      responses:
        200:
          $ref: '#/components/schemas/messages_delete_response'
  /method/messages.deleteChatPhoto:
    get:
      parameters:
        -
          in: query
          name: chat_id
          description: 'Chat ID.'
          schema:
            type: integer
            minimum: 0
            maximum: 100000000
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_deleteChatPhoto_response'
  /method/messages.deleteConversation:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: "User ID. To clear a chat history use 'chat_id'"
          schema:
            type: integer
        -
          in: query
          name: peer_id
          description: "Destination ID. \"For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. \""
          schema:
            type: integer
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with user access token)'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_deleteConversation_response'
  /method/messages.denyMessagesFromGroup:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Group ID.'
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/messages.edit:
    get:
      parameters:
        -
          in: query
          name: peer_id
          description: "Destination ID. \"For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. \""
          schema:
            type: integer
        -
          in: query
          name: message
          description: "(Required if 'attachments' is not set.) Text of the message."
          schema:
            type: string
            maxLength: 9000
        -
          in: query
          name: lat
          description: 'Geographical latitude of a check-in, in degrees (from -90 to 90).'
          schema:
            type: number
        -
          in: query
          name: long
          description: 'Geographical longitude of a check-in, in degrees (from -180 to 180).'
          schema:
            type: number
        -
          in: query
          name: attachment
          description: "(Required if 'message' is not set.) List of objects attached to the message, separated by commas, in the following format: \"<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, 'wall' — wall post, '<owner_id>' — ID of the media attachment owner. '<media_id>' — media attachment ID. Example: \"photo100172_166443618\""
          schema:
            type: string
        -
          in: query
          name: keep_forward_messages
          description: "'1' — to keep forwarded, messages."
          schema:
            type: boolean
        -
          in: query
          name: keep_snippets
          description: "'1' — to keep attached snippets."
          schema:
            type: boolean
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with user access token)'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: dont_parse_links
          description: ''
          schema:
            type: boolean
            default: false
        -
          in: query
          name: disable_mentions
          description: ''
          schema:
            type: boolean
            default: false
        -
          in: query
          name: message_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: conversation_message_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: template
          description: ''
          schema:
            type: string
        -
          in: query
          name: keyboard
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/messages_edit_response'
  /method/messages.editChat:
    get:
      parameters:
        -
          in: query
          name: chat_id
          description: 'Chat ID.'
          schema:
            type: integer
            minimum: 0
            maximum: 100000000
        -
          in: query
          name: title
          description: 'New title of the chat.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/messages.getByConversationMessageId:
    get:
      parameters:
        -
          in: query
          name: peer_id
          description: "Destination ID. \"For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. \""
          schema:
            type: integer
        -
          in: query
          name: conversation_message_ids
          description: 'Conversation message IDs.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 100
        -
          in: query
          name: extended
          description: 'Information whether the response should be extended'
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: 'Profile fields to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with group access token)'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_getByConversationMessageId_response'
  /method/messages.getById:
    get:
      parameters:
        -
          in: query
          name: message_ids
          description: 'Message IDs.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 100
        -
          in: query
          name: preview_length
          description: 'Number of characters after which to truncate a previewed message. To preview the full message, specify ''0''. "NOTE: Messages are not truncated by default. Messages are truncated by words."'
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: extended
          description: 'Information whether the response should be extended'
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: 'Profile fields to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with group access token)'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_getById_response'
  /method/messages.getChatPreview:
    get:
      parameters:
        -
          in: query
          name: peer_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: link
          description: 'Invitation link.'
          schema:
            type: string
        -
          in: query
          name: fields
          description: 'Profile fields to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
      responses:
        200:
          $ref: '#/components/schemas/messages_getChatPreview_response'
  /method/messages.getConversationMembers:
    get:
      parameters:
        -
          in: query
          name: peer_id
          description: 'Peer ID.'
          schema:
            type: integer
        -
          in: query
          name: fields
          description: 'Profile fields to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with group access token)'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_getConversationMembers_response'
  /method/messages.getConversations:
    get:
      parameters:
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of conversations.'
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of conversations to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 200
        -
          in: query
          name: filter
          description: "Filter to apply: 'all' — all conversations, 'unread' — conversations with unread messages, 'important' — conversations, marked as important (only for community messages), 'unanswered' — conversations, marked as unanswered (only for community messages)"
          schema:
            type: string
            default: all
            enum:
              - all
              - archive
              - important
              - unanswered
              - unread
        -
          in: query
          name: extended
          description: "'1' — return extra information about users and communities"
          schema:
            type: boolean
        -
          in: query
          name: start_message_id
          description: 'ID of the message from what to return dialogs.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: fields
          description: 'Profile and communities fields to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with group access token)'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_getConversations_response'
  /method/messages.getConversationsById:
    get:
      parameters:
        -
          in: query
          name: peer_ids
          description: "Destination IDs. \"For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. \""
          schema:
            type: array
            items:
              type: integer
            maxItems: 100
        -
          in: query
          name: extended
          description: 'Return extended properties'
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: 'Profile and communities fields to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with group access token)'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_getConversationsById_response'
  /method/messages.getHistory:
    get:
      parameters:
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of messages.'
          schema:
            type: integer
        -
          in: query
          name: count
          description: 'Number of messages to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 200
        -
          in: query
          name: user_id
          description: 'ID of the user whose message history you want to return.'
          schema:
            type: integer
        -
          in: query
          name: peer_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: start_message_id
          description: 'Starting message ID from which to return history.'
          schema:
            type: integer
        -
          in: query
          name: rev
          description: "Sort order: '1' — return messages in chronological order. '0' — return messages in reverse chronological order."
          schema:
            type: integer
            enum:
              - 1
              - 0
        -
          in: query
          name: extended
          description: 'Information whether the response should be extended'
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: 'Profile fields to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with group access token)'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_getHistory_response'
  /method/messages.getHistoryAttachments:
    get:
      parameters:
        -
          in: query
          name: peer_id
          description: "Peer ID. \", For group chat: '2000000000 + chat ID' , , For community: '-community ID'\""
          schema:
            type: integer
        -
          in: query
          name: media_type
          description: "Type of media files to return: *'photo',, *'video',, *'audio',, *'doc',, *'link'.,*'market'.,*'wall'.,*'share'"
          schema:
            type: string
            default: photo
            enum:
              - audio
              - audio_message
              - doc
              - graffiti
              - link
              - market
              - photo
              - share
              - video
              - wall
        -
          in: query
          name: start_from
          description: 'Message ID to start return results from.'
          schema:
            type: string
        -
          in: query
          name: count
          description: 'Number of objects to return.'
          schema:
            type: integer
            default: 30
            minimum: 0
            maximum: 200
        -
          in: query
          name: photo_sizes
          description: "'1' — to return photo sizes in a"
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: 'Additional profile [vk.com/dev/fields|fields] to return. '
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with group access token)'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: preserve_order
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: max_forwards_level
          description: ''
          schema:
            type: integer
            default: 45
            minimum: 0
            maximum: 45
      responses:
        200:
          $ref: '#/components/schemas/messages_getHistoryAttachments_response'
  /method/messages.getImportantMessages:
    get:
      parameters:
        -
          in: query
          name: count
          description: 'Amount of needed important messages.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 200
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: start_message_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: preview_length
          description: 'Maximum length of messages body.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: fields
          description: 'Actors fields to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
        -
          in: query
          name: extended
          description: 'Return extended properties'
          schema:
            type: boolean
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with group access token)'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_getImportantMessages_response'
  /method/messages.getIntentUsers:
    get:
      parameters:
        -
          in: query
          name: intent
          description: ''
          schema:
            type: string
            enum:
              - confirmed_notification
              - non_promo_newsletter
              - promo_newsletter
        -
          in: query
          name: subscribe_id
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 100
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 200
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: name_case
          description: ''
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/messages_getIntentUsers_response'
  /method/messages.getInviteLink:
    get:
      parameters:
        -
          in: query
          name: peer_id
          description: 'Destination ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: reset
          description: '1 — to generate new link (revoke previous), 0 — to return previous link.'
          schema:
            type: boolean
            default: false
        -
          in: query
          name: group_id
          description: 'Group ID'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_getInviteLink_response'
  /method/messages.getLastActivity:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/messages_getLastActivity_response'
  /method/messages.getLongPollHistory:
    get:
      parameters:
        -
          in: query
          name: ts
          description: "Last value of the 'ts' parameter returned from the Long Poll server or by using [vk.com/dev/messages.getLongPollHistory|messages.getLongPollHistory] method."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: pts
          description: "Last value of 'pts' parameter returned from the Long Poll server or by using [vk.com/dev/messages.getLongPollHistory|messages.getLongPollHistory] method."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: preview_length
          description: 'Number of characters after which to truncate a previewed message. To preview the full message, specify ''0''. "NOTE: Messages are not truncated by default. Messages are truncated by words."'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: onlines
          description: "'1' — to return history with online users only."
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: 'Additional profile [vk.com/dev/fields|fields] to return.'
          schema:
            type: array
            default: 'photo,photo_medium_rec,sex,online,screen_name'
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: events_limit
          description: 'Maximum number of events to return.'
          schema:
            type: integer
            default: 1000
            minimum: 1000
        -
          in: query
          name: msgs_limit
          description: 'Maximum number of messages to return.'
          schema:
            type: integer
            default: 200
            minimum: 200
        -
          in: query
          name: max_msg_id
          description: 'Maximum ID of the message among existing ones in the local copy. Both messages received with API methods (for example, , ), and data received from a Long Poll server (events with code 4) are taken into account.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with user access token)'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: lp_version
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: last_n
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 2000
        -
          in: query
          name: credentials
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
            default: false
      responses:
        200:
          $ref: '#/components/schemas/messages_getLongPollHistory_response'
  /method/messages.getLongPollServer:
    get:
      parameters:
        -
          in: query
          name: need_pts
          description: "'1' — to return the 'pts' field, needed for the [vk.com/dev/messages.getLongPollHistory|messages.getLongPollHistory] method."
          schema:
            type: boolean
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with user access token)'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: lp_version
          description: 'Long poll version'
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_getLongPollServer_response'
  /method/messages.isMessagesFromGroupAllowed:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Group ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/messages_isMessagesFromGroupAllowed_response'
  /method/messages.joinChatByInviteLink:
    get:
      parameters:
        -
          in: query
          name: link
          description: 'Invitation link.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/messages_joinChatByInviteLink_response'
  /method/messages.markAsAnsweredConversation:
    get:
      parameters:
        -
          in: query
          name: peer_id
          description: 'ID of conversation to mark as important.'
          schema:
            type: integer
        -
          in: query
          name: answered
          description: "'1' — to mark as answered, '0' — to remove the mark"
          schema:
            type: boolean
            default: 1
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with group access token)'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/messages.markAsImportant:
    get:
      parameters:
        -
          in: query
          name: message_ids
          description: 'IDs of messages to mark as important.'
          schema:
            type: array
            default: {  }
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: important
          description: "'1' — to add a star (mark as important), '0' — to remove the star"
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_markAsImportant_response'
  /method/messages.markAsImportantConversation:
    get:
      parameters:
        -
          in: query
          name: peer_id
          description: 'ID of conversation to mark as important.'
          schema:
            type: integer
        -
          in: query
          name: important
          description: "'1' — to add a star (mark as important), '0' — to remove the star"
          schema:
            type: boolean
            default: 1
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with group access token)'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/messages.markAsRead:
    get:
      parameters:
        -
          in: query
          name: message_ids
          description: 'IDs of messages to mark as read.'
          schema:
            type: array
            default: {  }
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: peer_id
          description: "Destination ID. \"For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. \""
          schema:
            type: integer
        -
          in: query
          name: start_message_id
          description: 'Message ID to start from.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with user access token)'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: mark_conversation_as_read
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/messages.pin:
    get:
      parameters:
        -
          in: query
          name: peer_id
          description: "Destination ID. \"For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'Chat ID', e.g. '2000000001'. For community: '- Community ID', e.g. '-12345'. \""
          schema:
            type: integer
        -
          in: query
          name: message_id
          description: 'Message ID'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: conversation_message_id
          description: 'Conversation message ID'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_pin_response'
  /method/messages.removeChatUser:
    get:
      parameters:
        -
          in: query
          name: chat_id
          description: 'Chat ID.'
          schema:
            type: integer
            minimum: 0
            maximum: 100000000
        -
          in: query
          name: user_id
          description: 'ID of the user to be removed from the chat.'
          schema:
            type: integer
        -
          in: query
          name: member_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/messages.restore:
    get:
      parameters:
        -
          in: query
          name: message_id
          description: 'ID of a previously-deleted message to restore.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with user access token)'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/messages.search:
    get:
      parameters:
        -
          in: query
          name: q
          description: 'Search query string.'
          schema:
            type: string
            maxLength: 9000
        -
          in: query
          name: peer_id
          description: "Destination ID. \"For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. \""
          schema:
            type: integer
        -
          in: query
          name: date
          description: 'Date to search message before in Unixtime.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: preview_length
          description: 'Number of characters after which to truncate a previewed message. To preview the full message, specify ''0''. "NOTE: Messages are not truncated by default. Messages are truncated by words."'
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of messages.'
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of messages to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 100
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with group access token)'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_search_response'
  /method/messages.searchConversations:
    get:
      parameters:
        -
          in: query
          name: q
          description: 'Search query string.'
          schema:
            type: string
        -
          in: query
          name: count
          description: 'Maximum number of results.'
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 255
        -
          in: query
          name: extended
          description: "'1' — return extra information about users and communities"
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: 'Profile fields to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with user access token)'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/messages_searchConversations_response'
  /method/messages.send:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID (by default — current user).'
          schema:
            type: integer
        -
          in: query
          name: random_id
          description: 'Unique identifier to avoid resending the message.'
          schema:
            type: integer
        -
          in: query
          name: peer_id
          description: "Destination ID. \"For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. \""
          schema:
            type: integer
        -
          in: query
          name: peer_ids
          description: 'IDs of message recipients. (See peer_id)'
          schema:
            type: array
            items:
              type: integer
            maxItems: 100
        -
          in: query
          name: domain
          description: "User's short address (for example, 'illarionov')."
          schema:
            type: string
        -
          in: query
          name: chat_id
          description: 'ID of conversation the message will relate to.'
          schema:
            type: integer
            minimum: 0
            maximum: 100000000
        -
          in: query
          name: user_ids
          description: 'IDs of message recipients (if new conversation shall be started).'
          schema:
            type: array
            items:
              type: integer
            maxItems: 100
        -
          in: query
          name: message
          description: "(Required if 'attachments' is not set.) Text of the message."
          schema:
            type: string
            maxLength: 9000
        -
          in: query
          name: lat
          description: 'Geographical latitude of a check-in, in degrees (from -90 to 90).'
          schema:
            type: number
        -
          in: query
          name: long
          description: 'Geographical longitude of a check-in, in degrees (from -180 to 180).'
          schema:
            type: number
        -
          in: query
          name: attachment
          description: "(Required if 'message' is not set.) List of objects attached to the message, separated by commas, in the following format: \"<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, 'wall' — wall post, '<owner_id>' — ID of the media attachment owner. '<media_id>' — media attachment ID. Example: \"photo100172_166443618\""
          schema:
            type: string
            maxLength: 9000
        -
          in: query
          name: reply_to
          description: ''
          schema:
            type: integer
        -
          in: query
          name: forward_messages
          description: 'ID of forwarded messages, separated with a comma. Listed messages of the sender will be shown in the message body at the recipient''s. Example: "123,431,544"'
          schema:
            type: array
            items:
              type: integer
            maxItems: 1000
        -
          in: query
          name: forward
          description: 'JSON describing the forwarded message or reply'
          schema:
            type: string
            properties:
              owner_id:
                type: integer
                description: 'Messages owner_id'
                entity: owner
                format: int64
              peer_id:
                type: integer
                description: 'Messages peer_id'
              conversation_message_ids:
                type: array
                items:
                  type: integer
                  description: 'Message conversation_message_id'
              message_ids:
                type: array
                items:
                  type: integer
                  description: 'Message message_id'
              is_reply:
                type: boolean
                description: 'If you need to reply to a message'
            additionalProperties: false
        -
          in: query
          name: sticker_id
          description: 'Sticker id.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with group access token)'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: keyboard
          description: ''
          schema:
            type: string
            properties:
              one_time:
                type: boolean
                description: 'Should this keyboard disappear on first use'
                required: true
              buttons:
                type: array
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/messages_keyboard_button'
                required: true
              author_id:
                type: integer
                format: int64
                entity: owner
                description: 'Community or bot, which set this keyboard'
              inline:
                type: boolean
            additionalProperties: false
        -
          in: query
          name: template
          description: ''
          schema:
            type: string
        -
          in: query
          name: payload
          description: ''
          schema:
            type: string
            maxLength: 1000
        -
          in: query
          name: content_source
          description: 'JSON describing the content source in the message'
          schema:
            type: string
        -
          in: query
          name: dont_parse_links
          description: ''
          schema:
            type: boolean
            default: false
        -
          in: query
          name: disable_mentions
          description: ''
          schema:
            type: boolean
            default: false
        -
          in: query
          name: intent
          description: ''
          schema:
            type: string
            default: default
            enum:
              - account_update
              - bot_ad_invite
              - bot_ad_promo
              - confirmed_notification
              - customer_support
              - default
              - game_notification
              - moderated_newsletter
              - non_promo_newsletter
              - promo_newsletter
              - purchase_update
        -
          in: query
          name: subscribe_id
          description: ''
          schema:
            type: integer
            minimum: 0
            maximum: 100
      responses:
        200:
          $ref: '#/components/schemas/messages_send_response'
  /method/messages.sendMessageEventAnswer:
    get:
      parameters:
        -
          in: query
          name: event_id
          description: ''
          schema:
            type: string
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: peer_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: event_data
          description: ''
          schema:
            type: string
            maxLength: 1000
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/messages.setActivity:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
        -
          in: query
          name: type
          description: "'typing' — user has started to type."
          schema:
            type: string
            enum:
              - audiomessage
              - file
              - photo
              - typing
              - video
        -
          in: query
          name: peer_id
          description: "Destination ID. \"For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'chat_id', e.g. '2000000001'. For community: '- community ID', e.g. '-12345'. \""
          schema:
            type: integer
        -
          in: query
          name: group_id
          description: 'Group ID (for group messages with group access token)'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/messages.setChatPhoto:
    get:
      parameters:
        -
          in: query
          name: file
          description: "Upload URL from the 'response' field returned by the [vk.com/dev/photos.getChatUploadServer|photos.getChatUploadServer] method upon successfully uploading an image."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/messages_setChatPhoto_response'
  /method/messages.unpin:
    get:
      parameters:
        -
          in: query
          name: peer_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/newsfeed.addBan:
    get:
      parameters:
        -
          in: query
          name: user_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
        -
          in: query
          name: group_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/newsfeed.deleteBan:
    get:
      parameters:
        -
          in: query
          name: user_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: group_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/newsfeed.deleteList:
    get:
      parameters:
        -
          in: query
          name: list_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/newsfeed.get:
    get:
      parameters:
        -
          in: query
          name: filters
          description: "Filters to apply: 'post' — new wall posts, 'photo' — new photos, 'photo_tag' — new photo tags, 'wall_photo' — new wall photos, 'friend' — new friends"
          schema:
            type: array
            items:
              $ref: '#/components/schemas/newsfeed_newsfeed_item_type'
        -
          in: query
          name: return_banned
          description: "'1' — to return news items from banned sources"
          schema:
            type: boolean
        -
          in: query
          name: start_time
          description: 'Earliest timestamp (in Unix time) of a news item to return. By default, 24 hours ago.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: end_time
          description: 'Latest timestamp (in Unix time) of a news item to return. By default, the current time.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: max_photos
          description: "Maximum number of photos to return. By default, '5'."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: source_ids
          description: "Sources to obtain news from, separated by commas. User IDs can be specified in formats '' or 'u' , where '' is the user's friend ID. Community IDs can be specified in formats '-' or 'g' , where '' is the community ID. If the parameter is not set, all of the user's friends and communities are returned, except for banned sources, which can be obtained with the [vk.com/dev/newsfeed.getBanned|newsfeed.getBanned] method."
          schema:
            type: string
        -
          in: query
          name: start_from
          description: "identifier required to get the next page of results. Value for this parameter is returned in 'next_from' field in a reply."
          schema:
            type: string
        -
          in: query
          name: count
          description: "Number of news items to return (default 50, maximum 100). For auto feed, you can use the 'new_offset' parameter returned by this method."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: fields
          description: 'Additional fields of [vk.com/dev/fields|profiles] and [vk.com/dev/fields_groups|communities] to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
        -
          in: query
          name: section
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/newsfeed_generic_response'
  /method/newsfeed.getBanned:
    get:
      parameters:
        -
          in: query
          name: extended
          description: "'1' — return extra information about users and communities"
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: 'Profile fields to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: name_case
          description: "Case for declension of user name and surname: 'nom' — nominative (default), 'gen' — genitive , 'dat' — dative, 'acc' — accusative , 'ins' — instrumental , 'abl' — prepositional"
          schema:
            type: string
            enum:
              - nom
              - gen
              - dat
              - acc
              - ins
              - abl
      responses:
        200:
          $ref: '#/components/schemas/newsfeed_getBanned_response'
  /method/newsfeed.getComments:
    get:
      parameters:
        -
          in: query
          name: count
          description: "Number of comments to return. For auto feed, you can use the 'new_offset' parameter returned by this method."
          schema:
            type: integer
            default: 30
            minimum: 0
            maximum: 100
        -
          in: query
          name: filters
          description: "Filters to apply: 'post' — new comments on wall posts, 'photo' — new comments on photos, 'video' — new comments on videos, 'topic' — new comments on discussions, 'note' — new comments on notes,"
          schema:
            type: array
            items:
              $ref: '#/components/schemas/newsfeed_comments_filters'
        -
          in: query
          name: reposts
          description: "Object ID, comments on repost of which shall be returned, e.g. 'wall1_45486'. (If the parameter is set, the 'filters' parameter is optional.),"
          schema:
            type: string
        -
          in: query
          name: start_time
          description: 'Earliest timestamp (in Unix time) of a comment to return. By default, 24 hours ago.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: end_time
          description: 'Latest timestamp (in Unix time) of a comment to return. By default, the current time.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: last_comments_count
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 10
        -
          in: query
          name: start_from
          description: "Identificator needed to return the next page with results. Value for this parameter returns in 'next_from' field."
          schema:
            type: string
        -
          in: query
          name: fields
          description: 'Additional fields of [vk.com/dev/fields|profiles] and [vk.com/dev/fields_groups|communities] to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/newsfeed_getComments_response'
  /method/newsfeed.getLists:
    get:
      parameters:
        -
          in: query
          name: list_ids
          description: 'numeric list identifiers.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: extended
          description: 'Return additional list info'
          schema:
            type: boolean
            default: 0
      responses:
        200:
          $ref: '#/components/schemas/newsfeed_getLists_response'
  /method/newsfeed.getMentions:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'Owner ID.'
          schema:
            type: integer
        -
          in: query
          name: start_time
          description: 'Earliest timestamp (in Unix time) of a post to return. By default, 24 hours ago.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: end_time
          description: 'Latest timestamp (in Unix time) of a post to return. By default, the current time.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of posts.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of posts to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 50
      responses:
        200:
          $ref: '#/components/schemas/newsfeed_getMentions_response'
  /method/newsfeed.getRecommended:
    get:
      parameters:
        -
          in: query
          name: start_time
          description: 'Earliest timestamp (in Unix time) of a news item to return. By default, 24 hours ago.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: end_time
          description: 'Latest timestamp (in Unix time) of a news item to return. By default, the current time.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: max_photos
          description: "Maximum number of photos to return. By default, '5'."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: start_from
          description: "'new_from' value obtained in previous call."
          schema:
            type: string
        -
          in: query
          name: count
          description: 'Number of news items to return.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: fields
          description: 'Additional fields of [vk.com/dev/fields|profiles] and [vk.com/dev/fields_groups|communities] to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/newsfeed_generic_response'
  /method/newsfeed.getSuggestedSources:
    get:
      parameters:
        -
          in: query
          name: offset
          description: 'offset required to choose a particular subset of communities or users.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'amount of communities or users to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 1000
        -
          in: query
          name: shuffle
          description: 'shuffle the returned list or not.'
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: 'list of extra fields to be returned. See available fields for [vk.com/dev/fields|users] and [vk.com/dev/fields_groups|communities].'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/newsfeed_getSuggestedSources_response'
  /method/newsfeed.ignoreItem:
    get:
      parameters:
        -
          in: query
          name: type
          description: "Item type. Possible values: *'wall' - post on the wall,, *'tag' - tag on a photo,, *'profilephoto' - profile photo,, *'video' - video,, *'audio' - audio."
          schema:
            type: string
            enum:
              - wall
              - tag
              - profilephoto
              - video
              - photo
              - audio
        -
          in: query
          name: owner_id
          description: "Item owner's identifier (user or community), \"Note that community id must be negative. 'owner_id=1' - user , 'owner_id=-1' - community \""
          schema:
            type: integer
            default: 0
        -
          in: query
          name: item_id
          description: 'Item identifier'
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/newsfeed.saveList:
    get:
      parameters:
        -
          in: query
          name: list_id
          description: 'numeric list identifier (if not sent, will be set automatically).'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: title
          description: 'list name.'
          schema:
            type: string
        -
          in: query
          name: source_ids
          description: 'users and communities identifiers to be added to the list. Community identifiers must be negative numbers.'
          schema:
            type: array
            items:
              type: integer
        -
          in: query
          name: no_reposts
          description: "reposts display on and off ('1' is for off)."
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/newsfeed_saveList_response'
  /method/newsfeed.search:
    get:
      parameters:
        -
          in: query
          name: q
          description: "Search query string (e.g., 'New Year')."
          schema:
            type: string
        -
          in: query
          name: extended
          description: "'1' — to return additional information about the user or community that placed the post."
          schema:
            type: boolean
        -
          in: query
          name: count
          description: 'Number of posts to return.'
          schema:
            type: integer
            default: 30
            minimum: 0
            maximum: 200
        -
          in: query
          name: latitude
          description: 'Geographical latitude point (in degrees, -90 to 90) within which to search.'
          schema:
            type: number
        -
          in: query
          name: longitude
          description: 'Geographical longitude point (in degrees, -180 to 180) within which to search.'
          schema:
            type: number
        -
          in: query
          name: start_time
          description: 'Earliest timestamp (in Unix time) of a news item to return. By default, 24 hours ago.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: end_time
          description: 'Latest timestamp (in Unix time) of a news item to return. By default, the current time.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: start_from
          description: ''
          schema:
            type: string
        -
          in: query
          name: fields
          description: 'Additional fields of [vk.com/dev/fields|profiles] and [vk.com/dev/fields_groups|communities] to return.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/newsfeed_search_response'
  /method/newsfeed.unignoreItem:
    get:
      parameters:
        -
          in: query
          name: type
          description: "Item type. Possible values: *'wall' - post on the wall,, *'tag' - tag on a photo,, *'profilephoto' - profile photo,, *'video' - video,, *'audio' - audio."
          schema:
            type: string
            enum:
              - wall
              - tag
              - profilephoto
              - video
              - photo
              - audio
        -
          in: query
          name: owner_id
          description: "Item owner's identifier (user or community), \"Note that community id must be negative. 'owner_id=1' - user , 'owner_id=-1' - community \""
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: 'Item identifier'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: track_code
          description: 'Track code of unignored item'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/newsfeed.unsubscribe:
    get:
      parameters:
        -
          in: query
          name: type
          description: "Type of object from which to unsubscribe: 'note' — note, 'photo' — photo, 'post' — post on user wall or community wall, 'topic' — topic, 'video' — video"
          schema:
            type: string
            enum:
              - note
              - photo
              - post
              - topic
              - video
        -
          in: query
          name: owner_id
          description: 'Object owner ID.'
          schema:
            type: integer
        -
          in: query
          name: item_id
          description: 'Object ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/notes.add:
    get:
      parameters:
        -
          in: query
          name: title
          description: 'Note title.'
          schema:
            type: string
        -
          in: query
          name: text
          description: 'Note text.'
          schema:
            type: string
        -
          in: query
          name: privacy_view
          description: ''
          schema:
            type: array
            default: all
            items:
              type: string
        -
          in: query
          name: privacy_comment
          description: ''
          schema:
            type: array
            default: all
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/notes_add_response'
  /method/notes.createComment:
    get:
      parameters:
        -
          in: query
          name: note_id
          description: 'Note ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: owner_id
          description: 'Note owner ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: reply_to
          description: 'ID of the user to whom the reply is addressed (if the comment is a reply to another comment).'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: message
          description: 'Comment text.'
          schema:
            type: string
        -
          in: query
          name: guid
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/notes_createComment_response'
  /method/notes.delete:
    get:
      parameters:
        -
          in: query
          name: note_id
          description: 'Note ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/notes.deleteComment:
    get:
      parameters:
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: owner_id
          description: 'Note owner ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/notes.edit:
    get:
      parameters:
        -
          in: query
          name: note_id
          description: 'Note ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: title
          description: 'Note title.'
          schema:
            type: string
        -
          in: query
          name: text
          description: 'Note text.'
          schema:
            type: string
        -
          in: query
          name: privacy_view
          description: ''
          schema:
            type: array
            default: all
            items:
              type: string
        -
          in: query
          name: privacy_comment
          description: ''
          schema:
            type: array
            default: all
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/notes.editComment:
    get:
      parameters:
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: owner_id
          description: 'Note owner ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: message
          description: 'New comment text.'
          schema:
            type: string
            minLength: 2
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/notes.get:
    get:
      parameters:
        -
          in: query
          name: note_ids
          description: 'Note IDs.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: user_id
          description: 'Note owner ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of notes to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 100
        -
          in: query
          name: sort
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
            enum:
              - 0
              - 1
      responses:
        200:
          $ref: '#/components/schemas/notes_get_response'
  /method/notes.getById:
    get:
      parameters:
        -
          in: query
          name: note_id
          description: 'Note ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: owner_id
          description: 'Note owner ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: need_wiki
          description: ''
          schema:
            type: boolean
            default: 0
      responses:
        200:
          $ref: '#/components/schemas/notes_getById_response'
  /method/notes.getComments:
    get:
      parameters:
        -
          in: query
          name: note_id
          description: 'Note ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: owner_id
          description: 'Note owner ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: sort
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
            enum:
              - 0
              - 1
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of comments to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 100
      responses:
        200:
          $ref: '#/components/schemas/notes_getComments_response'
  /method/notes.restoreComment:
    get:
      parameters:
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: owner_id
          description: 'Note owner ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/notifications.get:
    get:
      parameters:
        -
          in: query
          name: count
          description: 'Number of notifications to return.'
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 100
        -
          in: query
          name: start_from
          description: ''
          schema:
            type: string
        -
          in: query
          name: filters
          description: "Type of notifications to return: 'wall' — wall posts, 'mentions' — mentions in wall posts, comments, or topics, 'comments' — comments to wall posts, photos, and videos, 'likes' — likes, 'reposted' — wall posts that are copied from the current user's wall, 'followers' — new followers, 'friends' — accepted friend requests"
          schema:
            type: array
            items:
              type: string
              enum:
                - wall
                - mentions
                - comments
                - likes
                - reposted
                - followers
                - friends
        -
          in: query
          name: start_time
          description: 'Earliest timestamp (in Unix time) of a notification to return. By default, 24 hours ago.'
          schema:
            type: integer
        -
          in: query
          name: end_time
          description: 'Latest timestamp (in Unix time) of a notification to return. By default, the current time.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/notifications_get_response'
  /method/notifications.markAsViewed:
    get:
      parameters: {  }
      responses:
        200:
          $ref: '#/components/schemas/notifications_markAsViewed_response'
  /method/notifications.sendMessage:
    get:
      parameters:
        -
          in: query
          name: user_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            minItems: 1
            maxItems: 100
        -
          in: query
          name: message
          description: ''
          schema:
            type: string
            maxLength: 254
        -
          in: query
          name: fragment
          description: ''
          schema:
            type: string
            maxLength: 2047
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: random_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: sending_mode
          description: "Type of sending (delivering) notifications: 'immediately' — push and bell notifications will be delivered as soon as possible, 'delayed' — push and bell notifications will be delivered in the most comfortable time for the user, 'delayed_push' — only push notifications will be delivered in the most comfortable time, while the bell notifications will be delivered as soon as possible"
          schema:
            type: string
            default: immediately
            enum:
              - delayed
              - delayed_push
              - immediately
      responses:
        200:
          $ref: '#/components/schemas/notifications_sendMessage_response'
  /method/orders.cancelSubscription:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: subscription_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: pending_cancel
          description: ''
          schema:
            type: boolean
            default: 0
      responses:
        200:
          $ref: '#/components/schemas/orders_cancelSubscription_response'
  /method/orders.changeState:
    get:
      parameters:
        -
          in: query
          name: order_id
          description: 'order ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: action
          description: 'action to be done with the order. Available actions: *cancel — to cancel unconfirmed order. *charge — to confirm unconfirmed order. Applies only if processing of [vk.com/dev/payments_status|order_change_state] notification failed. *refund — to cancel confirmed order.'
          schema:
            type: string
            enum:
              - cancel
              - charge
              - refund
        -
          in: query
          name: app_order_id
          description: 'internal ID of the order in the application.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: test_mode
          description: 'if this parameter is set to 1, this method returns a list of test mode orders. By default — 0.'
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/orders_changeState_response'
  /method/orders.get:
    get:
      parameters:
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: 'number of returned orders.'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 1000
        -
          in: query
          name: test_mode
          description: 'if this parameter is set to 1, this method returns a list of test mode orders. By default — 0.'
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/orders_get_response'
  /method/orders.getAmount:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: votes
          description: ''
          schema:
            type: array
            items:
              type: string
            maxItems: 100
      responses:
        200:
          $ref: '#/components/schemas/orders_getAmount_response'
  /method/orders.getById:
    get:
      parameters:
        -
          in: query
          name: order_id
          description: 'order ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: order_ids
          description: 'order IDs (when information about several orders is requested).'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 500
        -
          in: query
          name: test_mode
          description: 'if this parameter is set to 1, this method returns a list of test mode orders. By default — 0.'
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/orders_getById_response'
  /method/orders.getUserSubscriptionById:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: subscription_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/orders_getUserSubscriptionById_response'
  /method/orders.getUserSubscriptions:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/orders_getUserSubscriptions_response'
  /method/orders.updateSubscription:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: subscription_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: price
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/orders_updateSubscription_response'
  /method/pages.clearCache:
    get:
      parameters:
        -
          in: query
          name: url
          description: 'Address of the page where you need to refesh the cached version'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/pages.get:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'Page owner ID.'
          schema:
            type: integer
        -
          in: query
          name: page_id
          description: 'Wiki page ID.'
          schema:
            type: integer
        -
          in: query
          name: global
          description: "'1' — to return information about a global wiki page"
          schema:
            type: boolean
        -
          in: query
          name: site_preview
          description: "'1' — resulting wiki page is a preview for the attached link"
          schema:
            type: boolean
        -
          in: query
          name: title
          description: 'Wiki page title.'
          schema:
            type: string
        -
          in: query
          name: need_source
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: need_html
          description: "'1' — to return the page as HTML,"
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/pages_get_response'
  /method/pages.getHistory:
    get:
      parameters:
        -
          in: query
          name: page_id
          description: 'Wiki page ID.'
          schema:
            type: integer
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the wiki page.'
          schema:
            type: integer
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/pages_getHistory_response'
  /method/pages.getTitles:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the wiki page.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/pages_getTitles_response'
  /method/pages.getVersion:
    get:
      parameters:
        -
          in: query
          name: version_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the wiki page.'
          schema:
            type: integer
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: need_html
          description: "'1' — to return the page as HTML"
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/pages_getVersion_response'
  /method/pages.parseWiki:
    get:
      parameters:
        -
          in: query
          name: text
          description: 'Text of the wiki page.'
          schema:
            type: string
        -
          in: query
          name: group_id
          description: 'ID of the group in the context of which this markup is interpreted.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/pages_parseWiki_response'
  /method/pages.save:
    get:
      parameters:
        -
          in: query
          name: text
          description: 'Text of the wiki page in wiki-format.'
          schema:
            type: string
        -
          in: query
          name: page_id
          description: "Wiki page ID. The 'title' parameter can be passed instead of 'pid'."
          schema:
            type: integer
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the wiki page.'
          schema:
            type: integer
        -
          in: query
          name: user_id
          description: 'User ID'
          schema:
            type: integer
        -
          in: query
          name: title
          description: 'Wiki page title.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/pages_save_response'
  /method/pages.saveAccess:
    get:
      parameters:
        -
          in: query
          name: page_id
          description: 'Wiki page ID.'
          schema:
            type: integer
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the wiki page.'
          schema:
            type: integer
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: view
          description: "Who can view the wiki page: '1' — only community members, '2' — all users can view the page, '0' — only community managers"
          schema:
            type: integer
            enum:
              - 0
              - 1
              - 2
        -
          in: query
          name: edit
          description: "Who can edit the wiki page: '1' — only community members, '2' — all users can edit the page, '0' — only community managers"
          schema:
            type: integer
            enum:
              - 0
              - 1
              - 2
      responses:
        200:
          $ref: '#/components/schemas/pages_saveAccess_response'
  /method/photos.confirmTag:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: photo_id
          description: 'Photo ID.'
          schema:
            type: string
        -
          in: query
          name: tag_id
          description: 'Tag ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/photos.copy:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: "photo's owner ID"
          schema:
            type: integer
        -
          in: query
          name: photo_id
          description: 'photo ID'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: access_key
          description: 'for private photos'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/photos_copy_response'
  /method/photos.createAlbum:
    get:
      parameters:
        -
          in: query
          name: title
          description: 'Album title.'
          schema:
            type: string
            minLength: 2
        -
          in: query
          name: group_id
          description: 'ID of the community in which the album will be created.'
          schema:
            type: integer
        -
          in: query
          name: description
          description: 'Album description.'
          schema:
            type: string
        -
          in: query
          name: privacy_view
          description: ''
          schema:
            type: array
            default: all
            items:
              type: string
        -
          in: query
          name: privacy_comment
          description: ''
          schema:
            type: array
            default: all
            items:
              type: string
        -
          in: query
          name: upload_by_admins_only
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: comments_disabled
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/photos_createAlbum_response'
  /method/photos.createComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: photo_id
          description: 'Photo ID.'
          schema:
            type: integer
        -
          in: query
          name: message
          description: 'Comment text.'
          schema:
            type: string
        -
          in: query
          name: attachments
          description: "(Required if 'message' is not set.) List of objects attached to the post, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — Media attachment owner ID. '<media_id>' — Media attachment ID. Example: \"photo100172_166443618,photo66748_265827614\""
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: from_group
          description: "'1' — to post a comment from the community"
          schema:
            type: boolean
        -
          in: query
          name: reply_to_comment
          description: ''
          schema:
            type: integer
        -
          in: query
          name: sticker_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: access_key
          description: ''
          schema:
            type: string
        -
          in: query
          name: guid
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/photos_createComment_response'
  /method/photos.delete:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: photo_id
          description: 'Photo ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/photos.deleteAlbum:
    get:
      parameters:
        -
          in: query
          name: album_id
          description: 'Album ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: group_id
          description: 'ID of the community that owns the album.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/photos.deleteComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/photos_deleteComment_response'
  /method/photos.edit:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: photo_id
          description: 'Photo ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: caption
          description: 'New caption for the photo. If this parameter is not set, it is considered to be equal to an empty string.'
          schema:
            type: string
        -
          in: query
          name: latitude
          description: ''
          schema:
            type: number
        -
          in: query
          name: longitude
          description: ''
          schema:
            type: number
        -
          in: query
          name: place_str
          description: ''
          schema:
            type: string
        -
          in: query
          name: foursquare_id
          description: ''
          schema:
            type: string
        -
          in: query
          name: delete_place
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/photos.editAlbum:
    get:
      parameters:
        -
          in: query
          name: album_id
          description: 'ID of the photo album to be edited.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: title
          description: 'New album title.'
          schema:
            type: string
        -
          in: query
          name: description
          description: 'New album description.'
          schema:
            type: string
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the album.'
          schema:
            type: integer
        -
          in: query
          name: privacy_view
          description: ''
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: privacy_comment
          description: ''
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: upload_by_admins_only
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: comments_disabled
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/photos.editComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
        -
          in: query
          name: message
          description: 'New text of the comment.'
          schema:
            type: string
        -
          in: query
          name: attachments
          description: "(Required if 'message' is not set.) List of objects attached to the post, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — Media attachment owner ID. '<media_id>' — Media attachment ID. Example: \"photo100172_166443618,photo66748_265827614\""
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/photos.get:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photos. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: "Photo album ID. To return information about photos from service albums, use the following string values: 'profile, wall, saved'."
          schema:
            type: string
        -
          in: query
          name: photo_ids
          description: 'Photo IDs.'
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: rev
          description: "Sort order: '1' — reverse chronological, '0' — chronological"
          schema:
            type: boolean
        -
          in: query
          name: extended
          description: "'1' — to return additional 'likes', 'comments', and 'tags' fields, '0' — (default)"
          schema:
            type: boolean
        -
          in: query
          name: feed_type
          description: "Type of feed obtained in 'feed' field of the method."
          schema:
            type: string
        -
          in: query
          name: feed
          description: "unixtime, that can be obtained with [vk.com/dev/newsfeed.get|newsfeed.get] method in date field to get all photos uploaded by the user on a specific day, or photos the user has been tagged on. Also, 'uid' parameter of the user the event happened with shall be specified."
          schema:
            type: integer
        -
          in: query
          name: photo_sizes
          description: "'1' — to return photo sizes in a [vk.com/dev/photo_sizes|special format]"
          schema:
            type: boolean
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 50
            minimum: 0
            maximum: 1000
      responses:
        200:
          $ref: '#/components/schemas/photos_get_response'
  /method/photos.getAlbums:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the albums.'
          schema:
            type: integer
        -
          in: query
          name: album_ids
          description: 'Album IDs.'
          schema:
            type: array
            items:
              type: integer
            maxItems: 1000
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of albums.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of albums to return.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: need_system
          description: "'1' — to return system albums with negative IDs"
          schema:
            type: boolean
        -
          in: query
          name: need_covers
          description: "'1' — to return an additional 'thumb_src' field, '0' — (default)"
          schema:
            type: boolean
        -
          in: query
          name: photo_sizes
          description: "'1' — to return photo sizes in a"
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/photos_getAlbums_response'
  /method/photos.getAlbumsCount:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/photos_getAlbumsCount_response'
  /method/photos.getAll:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of a user or community that owns the photos. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: extended
          description: "'1' — to return detailed information about photos"
          schema:
            type: boolean
        -
          in: query
          name: offset
          description: "Offset needed to return a specific subset of photos. By default, '0'."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of photos to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 200
        -
          in: query
          name: photo_sizes
          description: "'1' - to return image sizes in [vk.com/dev/photo_sizes|special format]."
          schema:
            type: boolean
        -
          in: query
          name: no_service_albums
          description: "'1' - to return photos only from standard albums, '0' - to return all photos including those in service albums, e.g., 'My wall photos' (default)"
          schema:
            type: boolean
        -
          in: query
          name: need_hidden
          description: "'1' - to show information about photos being hidden from the block above the wall."
          schema:
            type: boolean
        -
          in: query
          name: skip_hidden
          description: "'1' - not to return photos being hidden from the block above the wall. Works only with owner_id>0, no_service_albums is ignored."
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/photos_getAll_response'
  /method/photos.getAllComments:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the album(s).'
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: "Album ID. If the parameter is not set, comments on all of the user's albums will be returned."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: need_likes
          description: "'1' — to return an additional 'likes' field, '0' — (default)"
          schema:
            type: boolean
        -
          in: query
          name: offset
          description: "Offset needed to return a specific subset of comments. By default, '0'."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: "Number of comments to return. By default, '20'. Maximum value, '100'."
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/photos_getAllComments_response'
  /method/photos.getById:
    get:
      parameters:
        -
          in: query
          name: photos
          description: 'IDs separated with a comma, that are IDs of users who posted photos and IDs of photos themselves with an underscore character between such IDs. To get information about a photo in the group album, you shall specify group ID instead of user ID. Example: "1_129207899,6492_135055734, , -20629724_271945303"'
          schema:
            type: array
            items:
              owner_id:
                type: integer
              photo_id:
                type: integer
                minimum: 0
              access_key:
                type: string
            maxItems: 500
        -
          in: query
          name: extended
          description: "'1' — to return additional fields, '0' — (default)"
          schema:
            type: boolean
        -
          in: query
          name: photo_sizes
          description: "'1' — to return photo sizes in a"
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/photos_getById_response'
  /method/photos.getChatUploadServer:
    get:
      parameters:
        -
          in: query
          name: chat_id
          description: 'ID of the chat for which you want to upload a cover photo.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: crop_x
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: crop_y
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: crop_width
          description: 'Width (in pixels) of the photo after cropping.'
          schema:
            type: integer
            minimum: 200
      responses:
        200:
          $ref: '#/components/schemas/base_getUploadServer_response'
  /method/photos.getComments:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: photo_id
          description: 'Photo ID.'
          schema:
            type: integer
        -
          in: query
          name: need_likes
          description: "'1' — to return an additional 'likes' field, '0' — (default)"
          schema:
            type: boolean
        -
          in: query
          name: start_comment_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: "Offset needed to return a specific subset of comments. By default, '0'."
          schema:
            type: integer
        -
          in: query
          name: count
          description: 'Number of comments to return.'
          schema:
            type: integer
            default: '20'
            minimum: 0
            maximum: 100
        -
          in: query
          name: sort
          description: "Sort order: 'asc' — old first, 'desc' — new first"
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          in: query
          name: access_key
          description: ''
          schema:
            type: string
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
      responses:
        200:
          $ref: '#/components/schemas/photos_getComments_response'
  /method/photos.getMarketAlbumUploadServer:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/base_getUploadServer_response'
  /method/photos.getMarketUploadServer:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: main_photo
          description: "'1' if you want to upload the main item photo."
          schema:
            type: boolean
        -
          in: query
          name: crop_x
          description: 'X coordinate of the crop left upper corner.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: crop_y
          description: 'Y coordinate of the crop left upper corner.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: crop_width
          description: 'Width of the cropped photo in px.'
          schema:
            type: integer
            minimum: 400
      responses:
        200:
          $ref: '#/components/schemas/photos_getMarketUploadServer_response'
  /method/photos.getMessagesUploadServer:
    get:
      parameters:
        -
          in: query
          name: peer_id
          description: "Destination ID. \"For user: 'User ID', e.g. '12345'. For chat: '2000000000' + 'Chat ID', e.g. '2000000001'. For community: '- Community ID', e.g. '-12345'. \""
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/photos_getMessagesUploadServer_response'
  /method/photos.getNewTags:
    get:
      parameters:
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of photos.'
          schema:
            type: integer
        -
          in: query
          name: count
          description: 'Number of photos to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 100
      responses:
        200:
          $ref: '#/components/schemas/photos_getNewTags_response'
  /method/photos.getOwnerCoverPhotoUploadServer:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of community that owns the album (if the photo will be uploaded to a community album).'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: crop_x
          description: 'X coordinate of the left-upper corner'
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: crop_y
          description: 'Y coordinate of the left-upper corner'
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: crop_x2
          description: 'X coordinate of the right-bottom corner'
          schema:
            type: integer
            default: 795
            minimum: 0
        -
          in: query
          name: crop_y2
          description: 'Y coordinate of the right-bottom corner'
          schema:
            type: integer
            default: 200
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_getUploadServer_response'
  /method/photos.getOwnerPhotoUploadServer:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: "identifier of a community or current user. \"Note that community id must be negative. 'owner_id=1' - user, 'owner_id=-1' - community, \""
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_getUploadServer_response'
  /method/photos.getTags:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: photo_id
          description: 'Photo ID.'
          schema:
            type: integer
        -
          in: query
          name: access_key
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/photos_getTags_response'
  /method/photos.getUploadServer:
    get:
      parameters:
        -
          in: query
          name: album_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: group_id
          description: 'ID of community that owns the album (if the photo will be uploaded to a community album).'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/photos_getUploadServer_response'
  /method/photos.getUserPhotos:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: "Offset needed to return a specific subset of photos. By default, '0'."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of photos to return. Maximum value is 1000.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 1000
        -
          in: query
          name: extended
          description: "'1' — to return an additional 'likes' field, '0' — (default)"
          schema:
            type: boolean
        -
          in: query
          name: sort
          description: "Sort order: '1' — by date the tag was added in ascending order, '0' — by date the tag was added in descending order"
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/photos_getUserPhotos_response'
  /method/photos.getWallUploadServer:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'ID of community to whose wall the photo will be uploaded.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/photos_getWallUploadServer_response'
  /method/photos.makeCover:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: photo_id
          description: 'Photo ID.'
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: 'Album ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/photos.move:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: target_album_id
          description: 'ID of the album to which the photo will be moved.'
          schema:
            type: integer
        -
          in: query
          name: photo_ids
          description: ''
          schema:
            type: integer
            maxItems: 100
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/photos.putTag:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: photo_id
          description: 'Photo ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: user_id
          description: 'ID of the user to be tagged.'
          schema:
            type: integer
        -
          in: query
          name: x
          description: "Upper left-corner coordinate of the tagged area (as a percentage of the photo's width)."
          schema:
            type: number
        -
          in: query
          name: 'y'
          description: "Upper left-corner coordinate of the tagged area (as a percentage of the photo's height)."
          schema:
            type: number
        -
          in: query
          name: x2
          description: "Lower right-corner coordinate of the tagged area (as a percentage of the photo's width)."
          schema:
            type: number
        -
          in: query
          name: y2
          description: "Lower right-corner coordinate of the tagged area (as a percentage of the photo's height)."
          schema:
            type: number
      responses:
        200:
          $ref: '#/components/schemas/photos_putTag_response'
  /method/photos.removeTag:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: photo_id
          description: 'Photo ID.'
          schema:
            type: integer
        -
          in: query
          name: tag_id
          description: 'Tag ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/photos.reorderAlbums:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the album.'
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: 'Album ID.'
          schema:
            type: integer
        -
          in: query
          name: before
          description: 'ID of the album before which the album in question shall be placed.'
          schema:
            type: integer
        -
          in: query
          name: after
          description: 'ID of the album after which the album in question shall be placed.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/photos.reorderPhotos:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: photo_id
          description: 'Photo ID.'
          schema:
            type: integer
        -
          in: query
          name: before
          description: 'ID of the photo before which the photo in question shall be placed.'
          schema:
            type: integer
        -
          in: query
          name: after
          description: 'ID of the photo after which the photo in question shall be placed.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/photos.report:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: photo_id
          description: 'Photo ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: reason
          description: "Reason for the complaint: '0' - spam, '1' - child pornography, '2' - extremism, '3' - violence, '4' - drug propaganda, '5' - adult material, '6' - insult, abuse"
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/photos.reportComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'ID of the comment being reported.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: reason
          description: "Reason for the complaint: '0' - spam, '1' - child pornography, '2' - extremism, '3' - violence, '4' - drug propaganda, '5' - adult material, '6' - insult, abuse"
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/photos.restore:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: photo_id
          description: 'Photo ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/photos.restoreComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the photo.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'ID of the deleted comment.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/photos_restoreComment_response'
  /method/photos.save:
    get:
      parameters:
        -
          in: query
          name: album_id
          description: 'ID of the album to save photos to.'
          schema:
            type: integer
        -
          in: query
          name: group_id
          description: 'ID of the community to save photos to.'
          schema:
            type: integer
        -
          in: query
          name: server
          description: 'Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].'
          schema:
            type: integer
        -
          in: query
          name: photos_list
          description: 'Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].'
          schema:
            type: string
        -
          in: query
          name: hash
          description: 'Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].'
          schema:
            type: string
        -
          in: query
          name: latitude
          description: "Geographical latitude, in degrees (from '-90' to '90')."
          schema:
            type: number
        -
          in: query
          name: longitude
          description: "Geographical longitude, in degrees (from '-180' to '180')."
          schema:
            type: number
        -
          in: query
          name: caption
          description: 'Text describing the photo. 2048 digits max.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/photos_save_response'
  /method/photos.saveMarketAlbumPhoto:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: photo
          description: 'Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].'
          schema:
            type: string
        -
          in: query
          name: server
          description: 'Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: hash
          description: 'Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/photos_saveMarketAlbumPhoto_response'
  /method/photos.saveMarketPhoto:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: photo
          description: 'Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].'
          schema:
            type: string
        -
          in: query
          name: server
          description: 'Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].'
          schema:
            type: integer
        -
          in: query
          name: hash
          description: 'Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].'
          schema:
            type: string
        -
          in: query
          name: crop_data
          description: 'Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].'
          schema:
            type: string
        -
          in: query
          name: crop_hash
          description: 'Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/photos_saveMarketPhoto_response'
  /method/photos.saveMessagesPhoto:
    get:
      parameters:
        -
          in: query
          name: photo
          description: 'Parameter returned when the photo is [vk.com/dev/upload_files|uploaded to the server].'
          schema:
            type: string
        -
          in: query
          name: server
          description: ''
          schema:
            type: integer
        -
          in: query
          name: hash
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/photos_saveMessagesPhoto_response'
  /method/photos.saveOwnerCoverPhoto:
    get:
      parameters:
        -
          in: query
          name: hash
          description: 'Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].'
          schema:
            type: string
        -
          in: query
          name: photo
          description: 'Parameter returned when photos are [vk.com/dev/upload_files|uploaded to server].'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/photos_saveOwnerCoverPhoto_response'
  /method/photos.saveOwnerPhoto:
    get:
      parameters:
        -
          in: query
          name: server
          description: 'parameter returned after [vk.com/dev/upload_files|photo upload].'
          schema:
            type: string
        -
          in: query
          name: hash
          description: 'parameter returned after [vk.com/dev/upload_files|photo upload].'
          schema:
            type: string
        -
          in: query
          name: photo
          description: 'parameter returned after [vk.com/dev/upload_files|photo upload].'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/photos_saveOwnerPhoto_response'
  /method/photos.saveWallPhoto:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'ID of the user on whose wall the photo will be saved.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: group_id
          description: 'ID of community on whose wall the photo will be saved.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: photo
          description: 'Parameter returned when the the photo is [vk.com/dev/upload_files|uploaded to the server].'
          schema:
            type: string
        -
          in: query
          name: server
          description: ''
          schema:
            type: integer
        -
          in: query
          name: hash
          description: ''
          schema:
            type: string
        -
          in: query
          name: latitude
          description: "Geographical latitude, in degrees (from '-90' to '90')."
          schema:
            type: number
        -
          in: query
          name: longitude
          description: "Geographical longitude, in degrees (from '-180' to '180')."
          schema:
            type: number
        -
          in: query
          name: caption
          description: 'Text describing the photo. 2048 digits max.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/photos_saveWallPhoto_response'
  /method/photos.search:
    get:
      parameters:
        -
          in: query
          name: q
          description: 'Search query string.'
          schema:
            type: string
        -
          in: query
          name: lat
          description: "Geographical latitude, in degrees (from '-90' to '90')."
          schema:
            type: number
        -
          in: query
          name: long
          description: "Geographical longitude, in degrees (from '-180' to '180')."
          schema:
            type: number
        -
          in: query
          name: start_time
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: end_time
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: sort
          description: 'Sort order:'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of photos.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of photos to return.'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 1000
        -
          in: query
          name: radius
          description: "Radius of search in meters (works very approximately). Available values: '10', '100', '800', '6000', '50000'."
          schema:
            type: integer
            default: 5000
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/photos_search_response'
  /method/podcasts.searchPodcast:
    get:
      parameters:
        -
          in: query
          name: search_string
          description: ''
          schema:
            type: string
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 1000
      responses:
        200:
          $ref: '#/components/schemas/podcasts_searchPodcast_response'
  /method/polls.addVote:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the poll. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: poll_id
          description: 'Poll ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: answer_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: is_board
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/polls_addVote_response'
  /method/polls.create:
    get:
      parameters:
        -
          in: query
          name: question
          description: 'question text'
          schema:
            type: string
        -
          in: query
          name: is_anonymous
          description: "'1' - anonymous poll, participants list is hidden,, '0' - public poll, participants list is available,, Default value is '0'."
          schema:
            type: boolean
        -
          in: query
          name: is_multiple
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: end_date
          description: ''
          schema:
            type: integer
            minimum: 1550700000
        -
          in: query
          name: owner_id
          description: 'If a poll will be added to a communty it is required to send a negative group identifier. Current user by default.'
          schema:
            type: integer
        -
          in: query
          name: app_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: add_answers
          description: 'available answers list, for example: " ["yes","no","maybe"]", There can be from 1 to 10 answers.'
          schema:
            type: string
        -
          in: query
          name: photo_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: background_id
          description: ''
          schema:
            type: string
            enum:
              - 1
              - 2
              - 3
              - 4
              - 6
              - 8
              - 9
        -
          in: query
          name: disable_unvote
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/polls_create_response'
  /method/polls.deleteVote:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the poll. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: poll_id
          description: 'Poll ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: answer_id
          description: 'Answer ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: is_board
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/polls_deleteVote_response'
  /method/polls.edit:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'poll owner id'
          schema:
            type: integer
        -
          in: query
          name: poll_id
          description: "edited poll's id"
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: question
          description: 'new question text'
          schema:
            type: string
        -
          in: query
          name: add_answers
          description: 'answers list, for example: , "["yes","no","maybe"]"'
          schema:
            type: string
        -
          in: query
          name: edit_answers
          description: 'object containing answers that need to be edited,, key - answer id, value - new answer text. Example: {"382967099":"option1", "382967103":"option2"}"'
          schema:
            type: string
        -
          in: query
          name: delete_answers
          description: 'list of answer ids to be deleted. For example: "[382967099, 382967103]"'
          schema:
            type: string
        -
          in: query
          name: end_date
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: photo_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: background_id
          description: ''
          schema:
            type: string
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 6
              - 8
              - 9
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/polls.getBackgrounds:
    get:
      responses:
        200:
          $ref: '#/components/schemas/polls_getBackgrounds_response'
  /method/polls.getById:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the poll. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: is_board
          description: "'1' - poll is in a board, '0' - poll is on a wall. '0' by default."
          schema:
            type: boolean
        -
          in: query
          name: poll_id
          description: 'Poll ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: friends_count
          description: ''
          schema:
            type: integer
            default: 3
            minimum: 0
            maximum: 100
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: name_case
          description: ''
          schema:
            type: string
            default: nom
            enum:
              - abl
              - acc
              - dat
              - gen
              - ins
              - nom
      responses:
        200:
          $ref: '#/components/schemas/polls_getById_response'
  /method/polls.getPhotoUploadServer:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_getUploadServer_response'
  /method/polls.getVoters:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the poll. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: poll_id
          description: 'Poll ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: answer_ids
          description: 'Answer IDs.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: is_board
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: friends_only
          description: "'1' — to return only current user's friends, '0' — to return all users (default),"
          schema:
            type: boolean
        -
          in: query
          name: offset
          description: "Offset needed to return a specific subset of voters. '0' — (default)"
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: "Number of user IDs to return (if the 'friends_only' parameter is not set, maximum '1000', otherwise '10'). '100' — (default)"
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: fields
          description: "Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate (birthdate)', 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'rate', 'contacts', 'education', 'online', 'counters'."
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: name_case
          description: "Case for declension of user name and surname: , 'nom' — nominative (default) , 'gen' — genitive , 'dat' — dative , 'acc' — accusative , 'ins' — instrumental , 'abl' — prepositional"
          schema:
            type: string
            enum:
              - nom
              - gen
              - dat
              - acc
              - ins
              - abl
      responses:
        200:
          $ref: '#/components/schemas/polls_getVoters_response'
  /method/polls.savePhoto:
    get:
      parameters:
        -
          in: query
          name: photo
          description: ''
          schema:
            type: string
        -
          in: query
          name: hash
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/polls_savePhoto_response'
  /method/prettyCards.create:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: photo
          description: ''
          schema:
            type: string
        -
          in: query
          name: title
          description: ''
          schema:
            type: string
        -
          in: query
          name: link
          description: ''
          schema:
            type: string
            maxLength: 2000
        -
          in: query
          name: price
          description: ''
          schema:
            type: string
            maxLength: 20
        -
          in: query
          name: price_old
          description: ''
          schema:
            type: string
            maxLength: 20
        -
          in: query
          name: button
          description: ''
          schema:
            type: string
            maxLength: 255
      responses:
        200:
          $ref: '#/components/schemas/prettyCards_create_response'
  /method/prettyCards.delete:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: card_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/prettyCards_delete_response'
  /method/prettyCards.edit:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: card_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: photo
          description: ''
          schema:
            type: string
        -
          in: query
          name: title
          description: ''
          schema:
            type: string
        -
          in: query
          name: link
          description: ''
          schema:
            type: string
            maxLength: 2000
        -
          in: query
          name: price
          description: ''
          schema:
            type: string
            maxLength: 20
        -
          in: query
          name: price_old
          description: ''
          schema:
            type: string
            maxLength: 20
        -
          in: query
          name: button
          description: ''
          schema:
            type: string
            maxLength: 255
      responses:
        200:
          $ref: '#/components/schemas/prettyCards_edit_response'
  /method/prettyCards.get:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
      responses:
        200:
          $ref: '#/components/schemas/prettyCards_get_response'
  /method/prettyCards.getById:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: card_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
            maxItems: 10
      responses:
        200:
          $ref: '#/components/schemas/prettyCards_getById_response'
  /method/prettyCards.getUploadURL:
    get:
      responses:
        200:
          $ref: '#/components/schemas/prettyCards_getUploadURL_response'
  /method/search.getHints:
    get:
      parameters:
        -
          in: query
          name: q
          description: 'Search query string.'
          schema:
            type: string
            maxLength: 9000
        -
          in: query
          name: offset
          description: 'Offset for querying specific result subset'
          schema:
            type: integer
            minimum: 0
            maximum: 200
        -
          in: query
          name: limit
          description: 'Maximum number of results to return.'
          schema:
            type: integer
            default: 9
            minimum: 0
            maximum: 200
        -
          in: query
          name: filters
          description: ''
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: search_global
          description: ''
          schema:
            type: boolean
            default: 1
      responses:
        200:
          $ref: '#/components/schemas/search_getHints_response'
  /method/secure.addAppEvent:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'ID of a user to save the data'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: activity_id
          description: 'there are 2 default activities: , * 1 - level. Works similar to ,, * 2 - points, saves points amount, Any other value is for saving completed missions'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: value
          description: "depends on activity_id: * 1 - number, current level number,, * 2 - number, current user's points amount, , Any other value is ignored"
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/secure.checkToken:
    get:
      parameters:
        -
          in: query
          name: token
          description: "client 'access_token'"
          schema:
            type: string
        -
          in: query
          name: ip
          description: "user 'ip address'. Note that user may access using the 'ipv6' address, in this case it is required to transmit the 'ipv6' address. If not transmitted, the address will not be checked."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/secure_checkToken_response'
  /method/secure.getAppBalance:
    get:
      responses:
        200:
          $ref: '#/components/schemas/secure_getAppBalance_response'
  /method/secure.getSMSHistory:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: date_from
          description: 'filter by start date. It is set as UNIX-time.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: date_to
          description: 'filter by end date. It is set as UNIX-time.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: limit
          description: 'number of returned posts. By default — 1000.'
          schema:
            type: integer
            default: 1000
            minimum: 0
            maximum: 1000
      responses:
        200:
          $ref: '#/components/schemas/secure_getSMSHistory_response'
  /method/secure.getTransactionsHistory:
    get:
      parameters:
        -
          in: query
          name: type
          description: ''
          schema:
            type: integer
        -
          in: query
          name: uid_from
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: uid_to
          description: ''
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: date_from
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: date_to
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: limit
          description: ''
          schema:
            type: integer
            default: 1000
            minimum: 0
            maximum: 1000
      responses:
        200:
          $ref: '#/components/schemas/secure_getTransactionsHistory_response'
  /method/secure.getUserLevel:
    get:
      parameters:
        -
          in: query
          name: user_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 1
      responses:
        200:
          $ref: '#/components/schemas/secure_getUserLevel_response'
  /method/secure.giveEventSticker:
    get:
      parameters:
        -
          in: query
          name: user_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 1
        -
          in: query
          name: achievement_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/secure_giveEventSticker_response'
  /method/secure.sendNotification:
    get:
      parameters:
        -
          in: query
          name: user_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 1
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: message
          description: "notification text which should be sent in 'UTF-8' encoding ('254' characters maximum)."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/secure_sendNotification_response'
  /method/secure.sendSMSNotification:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'ID of the user to whom SMS notification is sent. The user shall allow the application to send him/her notifications (, +1).'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: message
          description: "'SMS' text to be sent in 'UTF-8' encoding. Only Latin letters and numbers are allowed. Maximum size is '160' characters."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/secure.setCounter:
    get:
      parameters:
        -
          in: query
          name: counters
          description: ''
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: counter
          description: 'counter value.'
          schema:
            type: integer
        -
          in: query
          name: increment
          description: ''
          schema:
            type: boolean
      responses:
        200:
          description: null
  /method/stats.get:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: app_id
          description: 'Application ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: timestamp_from
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: timestamp_to
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: interval
          description: ''
          schema:
            type: string
            default: day
            enum:
              - all
              - day
              - month
              - week
              - year
        -
          in: query
          name: intervals_count
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: filters
          description: ''
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: stats_groups
          description: ''
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
            default: true
      responses:
        200:
          $ref: '#/components/schemas/stats_get_response'
  /method/stats.getPostReach:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'post owner community id. Specify with "-" sign.'
          schema:
            type: string
        -
          in: query
          name: post_ids
          description: 'wall posts id'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 30
      responses:
        200:
          $ref: '#/components/schemas/stats_getPostReach_response'
  /method/stats.trackVisitor:
    get:
      parameters: {  }
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/status.get:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID or community ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/status_get_response'
  /method/status.set:
    get:
      parameters:
        -
          in: query
          name: text
          description: 'Text of the new status.'
          schema:
            type: string
        -
          in: query
          name: group_id
          description: 'Identifier of a community to set a status in. If left blank the status is set to current user.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/storage.get:
    get:
      parameters:
        -
          in: query
          name: key
          description: ''
          schema:
            type: string
            maxLength: 100
        -
          in: query
          name: keys
          description: ''
          schema:
            type: array
            items:
              type: string
            maxItems: 1000
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/storage_get_response'
  /method/storage.getKeys:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'user id, whose variables names are returned if they were requested with a server method.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: 'amount of variable names the info needs to be collected from.'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 1000
      responses:
        200:
          $ref: '#/components/schemas/storage_getKeys_response'
  /method/storage.set:
    get:
      parameters:
        -
          in: query
          name: key
          description: ''
          schema:
            type: string
            maxLength: 100
        -
          in: query
          name: value
          description: ''
          schema:
            type: string
        -
          in: query
          name: user_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/store.addStickersToFavorite:
    get:
      parameters:
        -
          in: query
          name: sticker_ids
          description: 'Sticker IDs to be added'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/store.getFavoriteStickers:
    get:
      responses:
        200:
          $ref: '#/components/schemas/store_getFavoriteStickers_response'
  /method/store.getProducts:
    get:
      parameters:
        -
          in: query
          name: type
          description: ''
          schema:
            type: string
        -
          in: query
          name: merchant
          description: ''
          schema:
            type: string
        -
          in: query
          name: section
          description: ''
          schema:
            type: string
        -
          in: query
          name: product_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: filters
          description: ''
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
            default: 0
      responses:
        200:
          $ref: '#/components/schemas/store_getProducts_response'
  /method/store.getStickersKeywords:
    get:
      parameters:
        -
          in: query
          name: stickers_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: products_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: aliases
          description: ''
          schema:
            type: boolean
            default: true
        -
          in: query
          name: all_products
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: need_stickers
          description: ''
          schema:
            type: boolean
            default: true
      responses:
        200:
          $ref: '#/components/schemas/store_getStickersKeywords_response'
  /method/store.removeStickersFromFavorite:
    get:
      parameters:
        -
          in: query
          name: sticker_ids
          description: 'Sticker IDs to be removed'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/stories.banOwner:
    get:
      parameters:
        -
          in: query
          name: owners_ids
          description: 'List of sources IDs'
          schema:
            type: array
            items:
              type: integer
            maxItems: 200
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/stories.delete:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: "Story owner's ID. Current user id is used by default."
          schema:
            type: integer
        -
          in: query
          name: story_id
          description: 'Story ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: stories
          description: ''
          schema:
            type: array
            items:
              type: string
            maxItems: 100
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/stories.get:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'Owner ID.'
          schema:
            type: integer
        -
          in: query
          name: extended
          description: "'1' — to return additional fields for users and communities. Default value is 0."
          schema:
            type: boolean
            default: false
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/stories_get_V5113_response'
  /method/stories.getBanned:
    get:
      parameters:
        -
          in: query
          name: extended
          description: "'1' — to return additional fields for users and communities. Default value is 0."
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: 'Additional fields to return'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/stories_getBanned_response'
  /method/stories.getById:
    get:
      parameters:
        -
          in: query
          name: stories
          description: "Stories IDs separated by commas. Use format {owner_id}+'_'+{story_id}, for example, 12345_54331."
          schema:
            type: array
            items:
              type: string
            maxItems: 100
        -
          in: query
          name: extended
          description: "'1' — to return additional fields for users and communities. Default value is 0."
          schema:
            type: boolean
            default: false
        -
          in: query
          name: fields
          description: 'Additional fields to return'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/stories_getById_extended_response'
  /method/stories.getPhotoUploadServer:
    get:
      parameters:
        -
          in: query
          name: add_to_news
          description: "1 — to add the story to friend's feed."
          schema:
            type: boolean
        -
          in: query
          name: user_ids
          description: 'List of users IDs who can see the story.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: reply_to_story
          description: 'ID of the story to reply with the current.'
          schema:
            type: string
        -
          in: query
          name: link_text
          description: "Link text (for community's stories only)."
          schema:
            type: string
            enum:
              - to_store
              - vote
              - more
              - book
              - order
              - enroll
              - fill
              - signup
              - buy
              - ticket
              - write
              - open
              - learn_more
              - view
              - go_to
              - contact
              - watch
              - play
              - install
              - read
              - calendar
        -
          in: query
          name: link_url
          description: 'Link URL. Internal links on https://vk.com only.'
          schema:
            type: string
            maxLength: 2048
        -
          in: query
          name: group_id
          description: 'ID of the community to upload the story (should be verified or with the "fire" icon).'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: clickable_stickers
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/stories_getPhotoUploadServer_response'
  /method/stories.getReplies:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'Story owner ID.'
          schema:
            type: integer
        -
          in: query
          name: story_id
          description: 'Story ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: access_key
          description: 'Access key for the private object.'
          schema:
            type: string
        -
          in: query
          name: extended
          description: "'1' — to return additional fields for users and communities. Default value is 0."
          schema:
            type: boolean
            default: false
        -
          in: query
          name: fields
          description: 'Additional fields to return'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/stories_get_V5113_response'
  /method/stories.getStats:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'Story owner ID. '
          schema:
            type: integer
        -
          in: query
          name: story_id
          description: 'Story ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/stories_getStats_response'
  /method/stories.getVideoUploadServer:
    get:
      parameters:
        -
          in: query
          name: add_to_news
          description: "1 — to add the story to friend's feed."
          schema:
            type: boolean
        -
          in: query
          name: user_ids
          description: 'List of users IDs who can see the story.'
          schema:
            type: array
            items:
              type: integer
              minimum: 0
        -
          in: query
          name: reply_to_story
          description: 'ID of the story to reply with the current.'
          schema:
            type: string
        -
          in: query
          name: link_text
          description: "Link text (for community's stories only)."
          schema:
            type: string
            enum:
              - to_store
              - vote
              - more
              - book
              - order
              - enroll
              - fill
              - signup
              - buy
              - ticket
              - write
              - open
              - learn_more
              - view
              - go_to
              - contact
              - watch
              - play
              - install
              - read
              - calendar
        -
          in: query
          name: link_url
          description: 'Link URL. Internal links on https://vk.com only.'
          schema:
            type: string
            maxLength: 2048
        -
          in: query
          name: group_id
          description: 'ID of the community to upload the story (should be verified or with the "fire" icon).'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: clickable_stickers
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/stories_getVideoUploadServer_response'
  /method/stories.getViewers:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'Story owner ID.'
          schema:
            type: integer
        -
          in: query
          name: story_id
          description: 'Story ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Maximum number of results.'
          schema:
            type: integer
            default: 100
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of results.'
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: extended
          description: "'1' — to return detailed information about photos"
          schema:
            type: boolean
            default: 0
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/stories_getViewers_extended_V5115_response'
  /method/stories.hideAllReplies:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user whose replies should be hidden.'
          schema:
            type: integer
        -
          in: query
          name: group_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/stories.hideReply:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user whose replies should be hidden.'
          schema:
            type: integer
        -
          in: query
          name: story_id
          description: 'Story ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/stories.save:
    get:
      parameters:
        -
          in: query
          name: upload_results
          description: ''
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/stories_save_response'
  /method/stories.search:
    get:
      parameters:
        -
          in: query
          name: q
          description: ''
          schema:
            type: string
            maxLength: 255
        -
          in: query
          name: place_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: latitude
          description: ''
          schema:
            type: number
        -
          in: query
          name: longitude
          description: ''
          schema:
            type: number
        -
          in: query
          name: radius
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: mentioned_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 1000
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/stories_get_V5113_response'
  /method/stories.sendInteraction:
    get:
      parameters:
        -
          in: query
          name: access_key
          description: ''
          schema:
            type: string
        -
          in: query
          name: message
          description: ''
          schema:
            type: string
            maxLength: 1000
        -
          in: query
          name: is_broadcast
          description: ''
          schema:
            type: boolean
            default: false
        -
          in: query
          name: is_anonymous
          description: ''
          schema:
            type: boolean
            default: false
        -
          in: query
          name: unseen_marker
          description: ''
          schema:
            type: boolean
            default: false
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/stories.unbanOwner:
    get:
      parameters:
        -
          in: query
          name: owners_ids
          description: 'List of hidden sources to show stories from.'
          schema:
            type: array
            items:
              type: integer
            maxItems: 200
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/streaming.getServerUrl:
    get:
      responses:
        200:
          $ref: '#/components/schemas/streaming_getServerUrl_response'
  /method/streaming.setSettings:
    get:
      parameters:
        -
          in: query
          name: monthly_tier
          description: ''
          schema:
            type: string
            enum:
              - tier_1
              - tier_2
              - tier_3
              - tier_4
              - tier_5
              - tier_6
              - unlimited
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/users.get:
    get:
      parameters:
        -
          in: query
          name: user_ids
          description: "User IDs or screen names ('screen_name'). By default, current user ID."
          schema:
            type: array
            items:
              type: string
            maxItems: 1000
        -
          in: query
          name: fields
          description: "Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'contacts', 'education', 'online', 'counters', 'relation', 'last_seen', 'activity', 'can_write_private_message', 'can_see_all_posts', 'can_post', 'universities', 'can_invite_to_chats'"
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: name_case
          description: "Case for declension of user name and surname: 'nom' — nominative (default), 'gen' — genitive , 'dat' — dative, 'acc' — accusative , 'ins' — instrumental , 'abl' — prepositional"
          schema:
            type: string
            enum:
              - nom
              - gen
              - dat
              - acc
              - ins
              - abl
      responses:
        200:
          $ref: '#/components/schemas/users_get_response'
  /method/users.getFollowers:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of followers.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of followers to return.'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 1000
        -
          in: query
          name: fields
          description: "Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'rate', 'contacts', 'education', 'online'."
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: name_case
          description: "Case for declension of user name and surname: 'nom' — nominative (default), 'gen' — genitive , 'dat' — dative, 'acc' — accusative , 'ins' — instrumental , 'abl' — prepositional"
          schema:
            type: string
            enum:
              - nom
              - gen
              - dat
              - acc
              - ins
              - abl
      responses:
        200:
          $ref: '#/components/schemas/users_getFollowers_response'
  /method/users.getSubscriptions:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'User ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: extended
          description: "'1' — to return a combined list of users and communities, '0' — to return separate lists of users and communities (default)"
          schema:
            type: boolean
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of subscriptions.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of users and communities to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 200
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
      responses:
        200:
          $ref: '#/components/schemas/users_getSubscriptions_response'
  /method/users.report:
    get:
      parameters:
        -
          in: query
          name: user_id
          description: 'ID of the user about whom a complaint is being made.'
          schema:
            type: integer
            minimum: 1
        -
          in: query
          name: type
          description: "Type of complaint: 'porn' - pornography, 'spam' - spamming, 'insult' - abusive behavior, 'advertisement' - disruptive advertisements"
          schema:
            type: string
            enum:
              - porn
              - spam
              - insult
              - advertisement
        -
          in: query
          name: comment
          description: 'Comment describing the complaint.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/users.search:
    get:
      parameters:
        -
          in: query
          name: q
          description: "Search query string (e.g., 'Vasya Babich')."
          schema:
            type: string
        -
          in: query
          name: sort
          description: "Sort order: '1' — by date registered, '0' — by rating"
          schema:
            type: integer
            enum:
              - 0
              - 1
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of users.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of users to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 1000
        -
          in: query
          name: fields
          description: "Profile fields to return. Sample values: 'nickname', 'screen_name', 'sex', 'bdate' (birthdate), 'city', 'country', 'timezone', 'photo', 'photo_medium', 'photo_big', 'has_mobile', 'rate', 'contacts', 'education', 'online',"
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: city
          description: 'City ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: country
          description: 'Country ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: hometown
          description: 'City name in a string.'
          schema:
            type: string
        -
          in: query
          name: university_country
          description: 'ID of the country where the user graduated.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: university
          description: 'ID of the institution of higher education.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: university_year
          description: 'Year of graduation from an institution of higher education.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: university_faculty
          description: 'Faculty ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: university_chair
          description: 'Chair ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: sex
          description: "'1' — female, '2' — male, '0' — any (default)"
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
        -
          in: query
          name: status
          description: "Relationship status: '1' — Not married, '2' — In a relationship, '3' — Engaged, '4' — Married, '5' — It's complicated, '6' — Actively searching, '7' — In love"
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
              - 7
        -
          in: query
          name: age_from
          description: 'Minimum age.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: age_to
          description: 'Maximum age.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: birth_day
          description: 'Day of birth.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: birth_month
          description: 'Month of birth.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: birth_year
          description: 'Year of birth.'
          schema:
            type: integer
            minimum: 1900
            maximum: 2100
        -
          in: query
          name: online
          description: "'1' — online only, '0' — all users"
          schema:
            type: boolean
        -
          in: query
          name: has_photo
          description: "'1' — with photo only, '0' — all users"
          schema:
            type: boolean
        -
          in: query
          name: school_country
          description: 'ID of the country where users finished school.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: school_city
          description: 'ID of the city where users finished school.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: school_class
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: school
          description: 'ID of the school.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: school_year
          description: 'School graduation year.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: religion
          description: "Users' religious affiliation."
          schema:
            type: string
        -
          in: query
          name: company
          description: 'Name of the company where users work.'
          schema:
            type: string
        -
          in: query
          name: position
          description: 'Job position.'
          schema:
            type: string
        -
          in: query
          name: group_id
          description: 'ID of a community to search in communities.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: from_list
          description: ''
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/users_search_response'
  /method/utils.checkLink:
    get:
      parameters:
        -
          in: query
          name: url
          description: "Link to check (e.g., 'http://google.com')."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/utils_checkLink_response'
  /method/utils.deleteFromLastShortened:
    get:
      parameters:
        -
          in: query
          name: key
          description: 'Link key (characters after vk.cc/).'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/utils.getLastShortenedLinks:
    get:
      parameters:
        -
          in: query
          name: count
          description: 'Number of links to return.'
          schema:
            type: integer
            default: 10
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of links.'
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/utils_getLastShortenedLinks_response'
  /method/utils.getLinkStats:
    get:
      parameters:
        -
          in: query
          name: key
          description: 'Link key (characters after vk.cc/).'
          schema:
            type: string
        -
          in: query
          name: source
          description: 'Source of scope'
          schema:
            type: string
            default: vk_cc
            enum:
              - vk_cc
              - vk_link
        -
          in: query
          name: access_key
          description: 'Access key for private link stats.'
          schema:
            type: string
        -
          in: query
          name: interval
          description: Interval.
          schema:
            type: string
            default: day
            enum:
              - day
              - forever
              - hour
              - month
              - week
        -
          in: query
          name: intervals_count
          description: 'Number of intervals to return.'
          schema:
            type: integer
            default: 1
            minimum: 0
            maximum: 100
        -
          in: query
          name: extended
          description: '1 — to return extended stats data (sex, age, geo). 0 — to return views number only.'
          schema:
            type: boolean
            default: false
      responses:
        200:
          $ref: '#/components/schemas/utils_getLinkStats_response'
  /method/utils.getServerTime:
    get:
      responses:
        200:
          $ref: '#/components/schemas/utils_getServerTime_response'
  /method/utils.getShortLink:
    get:
      parameters:
        -
          in: query
          name: url
          description: 'URL to be shortened.'
          schema:
            type: string
        -
          in: query
          name: private
          description: '1 — private stats, 0 — public stats.'
          schema:
            type: boolean
            default: false
      responses:
        200:
          $ref: '#/components/schemas/utils_getShortLink_response'
  /method/utils.resolveScreenName:
    get:
      parameters:
        -
          in: query
          name: screen_name
          description: "Screen name of the user, community (e.g., 'apiclub,' 'andrew', or 'rules_of_war'), or application."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/utils_resolveScreenName_response'
  /method/video.add:
    get:
      parameters:
        -
          in: query
          name: target_id
          description: 'identifier of a user or community to add a video to. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: video_id
          description: 'Video ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the video. Use a negative value to designate a community ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/video.addAlbum:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID (if the album will be created in a community).'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: title
          description: 'Album title.'
          schema:
            type: string
        -
          in: query
          name: privacy
          description: "new access permissions for the album. Possible values: , *'0' - all users,, *'1' - friends only,, *'2' - friends and friends of friends,, *'3' - \"only me\"."
          schema:
            type: array
            items:
              type: string
              enum:
                - '0'
                - '1'
                - '2'
                - '3'
      responses:
        200:
          $ref: '#/components/schemas/video_addAlbum_response'
  /method/video.addToAlbum:
    get:
      parameters:
        -
          in: query
          name: target_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: album_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: video_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/video.createComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the video.'
          schema:
            type: integer
        -
          in: query
          name: video_id
          description: 'Video ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: message
          description: 'New comment text.'
          schema:
            type: string
        -
          in: query
          name: attachments
          description: "List of objects attached to the comment, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media attachment owner. '<media_id>' — Media attachment ID. Example: \"photo100172_166443618,photo66748_265827614\""
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: from_group
          description: "'1' — to post the comment from a community name (only if 'owner_id'<0)"
          schema:
            type: boolean
        -
          in: query
          name: reply_to_comment
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: sticker_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: guid
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/video_createComment_response'
  /method/video.delete:
    get:
      parameters:
        -
          in: query
          name: video_id
          description: 'Video ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the video.'
          schema:
            type: integer
        -
          in: query
          name: target_id
          description: ''
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/video.deleteAlbum:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID (if the album is owned by a community).'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: album_id
          description: 'Album ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/video.deleteComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the video.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'ID of the comment to be deleted.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/video.edit:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the video.'
          schema:
            type: integer
        -
          in: query
          name: video_id
          description: 'Video ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: name
          description: 'New video title.'
          schema:
            type: string
        -
          in: query
          name: desc
          description: 'New video description.'
          schema:
            type: string
        -
          in: query
          name: privacy_view
          description: 'Privacy settings in a [vk.com/dev/privacy_setting|special format]. Privacy setting is available for videos uploaded to own profile by user.'
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: privacy_comment
          description: 'Privacy settings for comments in a [vk.com/dev/privacy_setting|special format].'
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: no_comments
          description: 'Disable comments for the group video.'
          schema:
            type: boolean
        -
          in: query
          name: repeat
          description: "'1' — to repeat the playback of the video, '0' — to play the video once,"
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/video.editAlbum:
    get:
      parameters:
        -
          in: query
          name: group_id
          description: 'Community ID (if the album edited is owned by a community).'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: album_id
          description: 'Album ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: title
          description: 'New album title.'
          schema:
            type: string
        -
          in: query
          name: privacy
          description: "new access permissions for the album. Possible values: , *'0' - all users,, *'1' - friends only,, *'2' - friends and friends of friends,, *'3' - \"only me\"."
          schema:
            type: array
            items:
              type: string
              enum:
                - '0'
                - '1'
                - '2'
                - '3'
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/video.editComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the video.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
        -
          in: query
          name: message
          description: 'New comment text.'
          schema:
            type: string
        -
          in: query
          name: attachments
          description: "List of objects attached to the comment, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media attachment owner. '<media_id>' — Media attachment ID. Example: \"photo100172_166443618,photo66748_265827614\""
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/video.get:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the video(s).'
          schema:
            type: integer
        -
          in: query
          name: videos
          description: 'Video IDs, in the following format: "<owner_id>_<media_id>,<owner_id>_<media_id>", Use a negative value to designate a community ID. Example: "-4363_136089719,13245770_137352259"'
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: album_id
          description: 'ID of the album containing the video(s).'
          schema:
            type: integer
        -
          in: query
          name: count
          description: 'Number of videos to return.'
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 200
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of videos.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: extended
          description: "'1' — to return an extended response with additional fields"
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/video_get_response'
  /method/video.getAlbumById:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'identifier of a user or community to add a video to. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: 'Album ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/video_getAlbumById_response'
  /method/video.getAlbums:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the video album(s).'
          schema:
            type: integer
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of video albums.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of video albums to return.'
          schema:
            type: integer
            default: 50
            minimum: 0
            maximum: 100
        -
          in: query
          name: extended
          description: "'1' — to return additional information about album privacy settings for the current user"
          schema:
            type: boolean
        -
          in: query
          name: need_system
          description: ''
          schema:
            type: boolean
            default: 0
      responses:
        200:
          $ref: '#/components/schemas/video_getAlbums_response'
  /method/video.getAlbumsByVideo:
    get:
      parameters:
        -
          in: query
          name: target_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: video_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
            default: 0
      responses:
        200:
          $ref: '#/components/schemas/video_getAlbumsByVideo_response'
  /method/video.getComments:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the video.'
          schema:
            type: integer
        -
          in: query
          name: video_id
          description: 'Video ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: need_likes
          description: "'1' — to return an additional 'likes' field"
          schema:
            type: boolean
        -
          in: query
          name: start_comment_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of comments.'
          schema:
            type: integer
        -
          in: query
          name: count
          description: 'Number of comments to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 100
        -
          in: query
          name: sort
          description: "Sort order: 'asc' — oldest comment first, 'desc' — newest comment first"
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/video_getComments_response'
  /method/video.removeFromAlbum:
    get:
      parameters:
        -
          in: query
          name: target_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: album_ids
          description: ''
          schema:
            type: array
            items:
              type: integer
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: video_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/video.reorderAlbums:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the albums..'
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: 'Album ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: before
          description: 'ID of the album before which the album in question shall be placed.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: after
          description: 'ID of the album after which the album in question shall be placed.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/video.reorderVideos:
    get:
      parameters:
        -
          in: query
          name: target_id
          description: 'ID of the user or community that owns the album with videos.'
          schema:
            type: integer
        -
          in: query
          name: album_id
          description: 'ID of the video album.'
          schema:
            type: integer
            default: -2
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the video.'
          schema:
            type: integer
        -
          in: query
          name: video_id
          description: 'ID of the video.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: before_owner_id
          description: 'ID of the user or community that owns the video before which the video in question shall be placed.'
          schema:
            type: integer
        -
          in: query
          name: before_video_id
          description: 'ID of the video before which the video in question shall be placed.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: after_owner_id
          description: 'ID of the user or community that owns the video after which the photo in question shall be placed.'
          schema:
            type: integer
        -
          in: query
          name: after_video_id
          description: 'ID of the video after which the photo in question shall be placed.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/video.report:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the video.'
          schema:
            type: integer
        -
          in: query
          name: video_id
          description: 'Video ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: reason
          description: "Reason for the complaint: '0' - spam, '1' - child pornography, '2' - extremism, '3' - violence, '4' - drug propaganda, '5' - adult material, '6' - insult, abuse"
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
        -
          in: query
          name: comment
          description: 'Comment describing the complaint.'
          schema:
            type: string
        -
          in: query
          name: search_query
          description: '(If the video was found in search results.) Search query string.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/video.reportComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the video.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'ID of the comment being reported.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: reason
          description: 'Reason for the complaint: , 0 - spam , 1 - child pornography , 2 - extremism , 3 - violence , 4 - drug propaganda , 5 - adult material , 6 - insult, abuse'
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/video.restore:
    get:
      parameters:
        -
          in: query
          name: video_id
          description: 'Video ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the video.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/video.restoreComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the video.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'ID of the deleted comment.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/video_restoreComment_response'
  /method/video.save:
    get:
      parameters:
        -
          in: query
          name: name
          description: 'Name of the video.'
          schema:
            type: string
        -
          in: query
          name: description
          description: 'Description of the video.'
          schema:
            type: string
        -
          in: query
          name: is_private
          description: "'1' — to designate the video as private (send it via a private message), the video will not appear on the user's video list and will not be available by ID for other users, '0' — not to designate the video as private"
          schema:
            type: boolean
        -
          in: query
          name: wallpost
          description: "'1' — to post the saved video on a user's wall, '0' — not to post the saved video on a user's wall"
          schema:
            type: boolean
        -
          in: query
          name: link
          description: 'URL for embedding the video from an external website.'
          schema:
            type: string
        -
          in: query
          name: group_id
          description: "ID of the community in which the video will be saved. By default, the current user's page."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: album_id
          description: 'ID of the album to which the saved video will be added.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: privacy_view
          description: ''
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: privacy_comment
          description: ''
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: no_comments
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: repeat
          description: "'1' — to repeat the playback of the video, '0' — to play the video once,"
          schema:
            type: boolean
        -
          in: query
          name: compression
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/video_save_response'
  /method/video.search:
    get:
      parameters:
        -
          in: query
          name: q
          description: "Search query string (e.g., 'The Beatles')."
          schema:
            type: string
        -
          in: query
          name: sort
          description: "Sort order: '1' — by duration, '2' — by relevance, '0' — by date added"
          schema:
            type: integer
            enum:
              - 1
              - 2
              - 0
        -
          in: query
          name: hd
          description: 'If not null, only searches for high-definition videos.'
          schema:
            type: integer
        -
          in: query
          name: adult
          description: "'1' — to disable the Safe Search filter, '0' — to enable the Safe Search filter"
          schema:
            type: boolean
        -
          in: query
          name: live
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: filters
          description: "Filters to apply: 'youtube' — return YouTube videos only, 'vimeo' — return Vimeo videos only, 'short' — return short videos only, 'long' — return long videos only"
          schema:
            type: array
            items:
              type: string
              enum:
                - youtube
                - vimeo
                - short
                - long
        -
          in: query
          name: search_own
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of videos.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: longer
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: shorter
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of videos to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 200
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
            default: 0
      responses:
        200:
          $ref: '#/components/schemas/video_search_response'
  /method/wall.checkCopyrightLink:
    get:
      parameters:
        -
          in: query
          name: link
          description: ''
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_bool_response'
  /method/wall.closeComments:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: post_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_bool_response'
  /method/wall.createComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'User ID or community ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: post_id
          description: 'Post ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: from_group
          description: 'Group ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: message
          description: "(Required if 'attachments' is not set.) Text of the comment."
          schema:
            type: string
        -
          in: query
          name: reply_to_comment
          description: 'ID of comment to reply.'
          schema:
            type: integer
        -
          in: query
          name: attachments
          description: "(Required if 'message' is not set.) List of media objects attached to the comment, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media ojbect: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media owner. '<media_id>' — Media ID. For example: \"photo100172_166443618,photo66748_265827614\""
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: sticker_id
          description: 'Sticker ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: guid
          description: 'Unique identifier to avoid repeated comments.'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/wall_createComment_response'
  /method/wall.delete:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'User ID or community ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: post_id
          description: 'ID of the post to be deleted.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/wall.deleteComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'User ID or community ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/wall.edit:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'User ID or community ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: post_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: friends_only
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: message
          description: "(Required if 'attachments' is not set.) Text of the post."
          schema:
            type: string
        -
          in: query
          name: attachments
          description: "(Required if 'message' is not set.) List of objects attached to the post, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media application owner. '<media_id>' — Media application ID. Example: \"photo100172_166443618,photo66748_265827614\", May contain a link to an external page to include in the post. Example: \"photo66748_265827614,http://habrahabr.ru\", \"NOTE: If more than one link is being attached, an error is thrown.\""
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: services
          description: ''
          schema:
            type: string
        -
          in: query
          name: signed
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: publish_date
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: lat
          description: ''
          schema:
            type: number
        -
          in: query
          name: long
          description: ''
          schema:
            type: number
        -
          in: query
          name: place_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: mark_as_ads
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: close_comments
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_paid_duration
          description: ''
          schema:
            type: integer
        -
          in: query
          name: poster_bkg_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: poster_bkg_owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: poster_bkg_access_hash
          description: ''
          schema:
            type: string
        -
          in: query
          name: copyright
          description: ''
          schema:
            type: string
        -
          in: query
          name: topic_id
          description: 'Topic ID. Allowed values can be obtained from newsfeed.getPostTopics method'
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 7
              - 12
              - 16
              - 19
              - 21
              - 23
              - 25
              - 26
              - 32
              - 43
      responses:
        200:
          $ref: '#/components/schemas/wall_edit_response'
  /method/wall.editAdsStealth:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'User ID or community ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: post_id
          description: 'Post ID. Used for publishing of scheduled and suggested posts.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: message
          description: "(Required if 'attachments' is not set.) Text of the post."
          schema:
            type: string
        -
          in: query
          name: attachments
          description: "(Required if 'message' is not set.) List of objects attached to the post, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, 'page' — wiki-page, 'note' — note, 'poll' — poll, 'album' — photo album, '<owner_id>' — ID of the media application owner. '<media_id>' — Media application ID. Example: \"photo100172_166443618,photo66748_265827614\", May contain a link to an external page to include in the post. Example: \"photo66748_265827614,http://habrahabr.ru\", \"NOTE: If more than one link is being attached, an error will be thrown.\""
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: signed
          description: "Only for posts in communities with 'from_group' set to '1': '1' — post will be signed with the name of the posting user, '0' — post will not be signed (default)"
          schema:
            type: boolean
        -
          in: query
          name: lat
          description: 'Geographical latitude of a check-in, in degrees (from -90 to 90).'
          schema:
            type: number
        -
          in: query
          name: long
          description: 'Geographical longitude of a check-in, in degrees (from -180 to 180).'
          schema:
            type: number
        -
          in: query
          name: place_id
          description: 'ID of the location where the user was tagged.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: link_button
          description: 'Link button ID'
          schema:
            type: string
        -
          in: query
          name: link_title
          description: 'Link title'
          schema:
            type: string
        -
          in: query
          name: link_image
          description: 'Link image url'
          schema:
            type: string
        -
          in: query
          name: link_video
          description: 'Link video ID in format "<owner_id>_<media_id>"'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/wall.editComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'User ID or community ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: message
          description: 'New comment text.'
          schema:
            type: string
        -
          in: query
          name: attachments
          description: "List of objects attached to the comment, in the following format: , \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, '<owner_id>' — ID of the media attachment owner. '<media_id>' — Media attachment ID. For example: \"photo100172_166443618,photo66748_265827614\""
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/wall.get:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the wall. By default, current user ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: domain
          description: 'User or community short address.'
          schema:
            type: string
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of posts.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of posts to return (maximum 100).'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: filter
          description: ''
          schema:
            type: string
            description: "Filter to apply: 'owner' — posts by the wall owner, 'others' — posts by someone else, 'all' — posts by the wall owner and others (default), 'postponed' — timed posts (only available for calls with an 'access_token'), 'suggests' — suggested posts on a community wall"
            enum:
              - owner
              - others
              - all
              - postponed
              - suggests
              - archived
              - donut
        -
          in: query
          name: extended
          description: "'1' — to return 'wall', 'profiles', and 'groups' fields, '0' — to return no additional fields (default)"
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/wall_get_response'
  /method/wall.getById:
    get:
      parameters:
        -
          in: query
          name: posts
          description: 'User or community IDs and post IDs, separated by underscores. Use a negative value to designate a community ID. Example: "93388_21539,93388_20904,2943_4276,-1_1"'
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: extended
          description: "'1' — to return user and community objects needed to display posts, '0' — no additional fields are returned (default)"
          schema:
            type: boolean
        -
          in: query
          name: copy_history_depth
          description: "Sets the number of parent elements to include in the array 'copy_history' that is returned if the post is a repost from another wall."
          schema:
            type: integer
            default: 2
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/wall_getById_legacy_response'
  /method/wall.getComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'User ID or community ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/wall_getComment_response'
  /method/wall.getComments:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'User ID or community ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: post_id
          description: 'Post ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: need_likes
          description: "'1' — to return the 'likes' field, '0' — not to return the 'likes' field (default)"
          schema:
            type: boolean
        -
          in: query
          name: start_comment_id
          description: ''
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of comments.'
          schema:
            type: integer
        -
          in: query
          name: count
          description: 'Number of comments to return (maximum 100).'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: sort
          description: "Sort order: 'asc' — chronological, 'desc' — reverse chronological"
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          in: query
          name: preview_length
          description: "Number of characters at which to truncate comments when previewed. By default, '90'. Specify '0' if you do not want to truncate comments."
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: extended
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: thread_items_count
          description: 'Count items in threads.'
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 10
      responses:
        200:
          $ref: '#/components/schemas/wall_getComments_response'
  /method/wall.getReposts:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'User ID or community ID. By default, current user ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: post_id
          description: 'Post ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of reposts.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: count
          description: 'Number of reposts to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 1000
      responses:
        200:
          $ref: '#/components/schemas/wall_getReposts_response'
  /method/wall.openComments:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: post_id
          description: ''
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_bool_response'
  /method/wall.pin:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the wall. By default, current user ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: post_id
          description: 'Post ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/wall.post:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'User ID or community ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: friends_only
          description: "'1' — post will be available to friends only, '0' — post will be available to all users (default)"
          schema:
            type: boolean
        -
          in: query
          name: from_group
          description: "For a community: '1' — post will be published by the community, '0' — post will be published by the user (default)"
          schema:
            type: boolean
        -
          in: query
          name: message
          description: "(Required if 'attachments' is not set.) Text of the post."
          schema:
            type: string
        -
          in: query
          name: attachments
          description: "(Required if 'message' is not set.) List of objects attached to the post, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, 'page' — wiki-page, 'note' — note, 'poll' — poll, 'album' — photo album, '<owner_id>' — ID of the media application owner. '<media_id>' — Media application ID. Example: \"photo100172_166443618,photo66748_265827614\", May contain a link to an external page to include in the post. Example: \"photo66748_265827614,http://habrahabr.ru\", \"NOTE: If more than one link is being attached, an error will be thrown.\""
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: services
          description: "List of services or websites the update will be exported to, if the user has so requested. Sample values: 'twitter', 'facebook'."
          schema:
            type: string
        -
          in: query
          name: signed
          description: "Only for posts in communities with 'from_group' set to '1': '1' — post will be signed with the name of the posting user, '0' — post will not be signed (default)"
          schema:
            type: boolean
        -
          in: query
          name: publish_date
          description: 'Publication date (in Unix time). If used, posting will be delayed until the set time.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: lat
          description: 'Geographical latitude of a check-in, in degrees (from -90 to 90).'
          schema:
            type: number
        -
          in: query
          name: long
          description: 'Geographical longitude of a check-in, in degrees (from -180 to 180).'
          schema:
            type: number
        -
          in: query
          name: place_id
          description: 'ID of the location where the user was tagged.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: post_id
          description: 'Post ID. Used for publishing of scheduled and suggested posts.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: guid
          description: ''
          schema:
            type: string
        -
          in: query
          name: mark_as_ads
          description: ''
          schema:
            type: boolean
            default: false
        -
          in: query
          name: close_comments
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: donut_paid_duration
          description: ''
          schema:
            type: integer
        -
          in: query
          name: mute_notifications
          description: ''
          schema:
            type: boolean
        -
          in: query
          name: copyright
          description: ''
          schema:
            type: string
        -
          in: query
          name: topic_id
          description: 'Topic ID. Allowed values can be obtained from newsfeed.getPostTopics method'
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 7
              - 12
              - 16
              - 19
              - 21
              - 23
              - 25
              - 26
              - 32
              - 43
      responses:
        200:
          $ref: '#/components/schemas/wall_post_response'
  /method/wall.postAdsStealth:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'User ID or community ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: message
          description: "(Required if 'attachments' is not set.) Text of the post."
          schema:
            type: string
        -
          in: query
          name: attachments
          description: "(Required if 'message' is not set.) List of objects attached to the post, in the following format: \"<owner_id>_<media_id>,<owner_id>_<media_id>\", '' — Type of media attachment: 'photo' — photo, 'video' — video, 'audio' — audio, 'doc' — document, 'page' — wiki-page, 'note' — note, 'poll' — poll, 'album' — photo album, '<owner_id>' — ID of the media application owner. '<media_id>' — Media application ID. Example: \"photo100172_166443618,photo66748_265827614\", May contain a link to an external page to include in the post. Example: \"photo66748_265827614,http://habrahabr.ru\", \"NOTE: If more than one link is being attached, an error will be thrown.\""
          schema:
            type: array
            items:
              type: string
        -
          in: query
          name: signed
          description: "Only for posts in communities with 'from_group' set to '1': '1' — post will be signed with the name of the posting user, '0' — post will not be signed (default)"
          schema:
            type: boolean
        -
          in: query
          name: lat
          description: 'Geographical latitude of a check-in, in degrees (from -90 to 90).'
          schema:
            type: number
        -
          in: query
          name: long
          description: 'Geographical longitude of a check-in, in degrees (from -180 to 180).'
          schema:
            type: number
        -
          in: query
          name: place_id
          description: 'ID of the location where the user was tagged.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: guid
          description: 'Unique identifier to avoid duplication the same post.'
          schema:
            type: string
        -
          in: query
          name: link_button
          description: 'Link button ID'
          schema:
            type: string
        -
          in: query
          name: link_title
          description: 'Link title'
          schema:
            type: string
        -
          in: query
          name: link_image
          description: 'Link image url'
          schema:
            type: string
        -
          in: query
          name: link_video
          description: 'Link video ID in format "<owner_id>_<media_id>"'
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/wall_postAdsStealth_response'
  /method/wall.reportComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the wall.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: reason
          description: "Reason for the complaint: '0' - spam, '1' - child pornography, '2' - extremism, '3' - violence, '4' - drug propaganda, '5' - adult material, '6' - insult, abuse"
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/wall.reportPost:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the wall.'
          schema:
            type: integer
        -
          in: query
          name: post_id
          description: 'Post ID.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: reason
          description: "Reason for the complaint: '0' - spam, '1' - child pornography, '2' - extremism, '3' - violence, '4' - drug propaganda, '5' - adult material, '6' - insult, abuse"
          schema:
            type: integer
            minimum: 0
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/wall.repost:
    get:
      parameters:
        -
          in: query
          name: object
          description: 'ID of the object to be reposted on the wall. Example: "wall66748_3675"'
          schema:
            type: string
        -
          in: query
          name: message
          description: 'Comment to be added along with the reposted object.'
          schema:
            type: string
        -
          in: query
          name: group_id
          description: 'Target community ID when reposting to a community.'
          schema:
            type: integer
            minimum: 0
        -
          in: query
          name: mark_as_ads
          description: ''
          schema:
            type: boolean
            default: false
        -
          in: query
          name: mute_notifications
          description: ''
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/schemas/wall_repost_response'
  /method/wall.restore:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'User ID or community ID from whose wall the post was deleted. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: post_id
          description: 'ID of the post to be restored.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/wall.restoreComment:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'User ID or community ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: comment_id
          description: 'Comment ID.'
          schema:
            type: integer
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/wall.search:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'user or community id. "Remember that for a community ''owner_id'' must be negative."'
          schema:
            type: integer
        -
          in: query
          name: domain
          description: 'user or community screen name.'
          schema:
            type: string
        -
          in: query
          name: query
          description: 'search query string.'
          schema:
            type: string
            maxLength: 9000
        -
          in: query
          name: owners_only
          description: "'1' - returns only page owner's posts."
          schema:
            type: boolean
        -
          in: query
          name: count
          description: 'count of posts to return.'
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 100
        -
          in: query
          name: offset
          description: 'Offset needed to return a specific subset of posts.'
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: extended
          description: 'show extended post info.'
          schema:
            type: boolean
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/base_user_group_fields'
      responses:
        200:
          $ref: '#/components/schemas/wall_search_response'
  /method/wall.unpin:
    get:
      parameters:
        -
          in: query
          name: owner_id
          description: 'ID of the user or community that owns the wall. By default, current user ID. Use a negative value to designate a community ID.'
          schema:
            type: integer
        -
          in: query
          name: post_id
          description: 'Post ID.'
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          $ref: '#/components/schemas/base_ok_response'
  /method/widgets.getComments:
    get:
      parameters:
        -
          in: query
          name: widget_api_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: url
          description: ''
          schema:
            type: string
        -
          in: query
          name: page_id
          description: ''
          schema:
            type: string
        -
          in: query
          name: order
          description: ''
          schema:
            type: string
            default: date
        -
          in: query
          name: fields
          description: ''
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users_fields'
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 10
            minimum: 10
            maximum: 200
      responses:
        200:
          $ref: '#/components/schemas/widgets_getComments_response'
  /method/widgets.getPages:
    get:
      parameters:
        -
          in: query
          name: widget_api_id
          description: ''
          schema:
            type: integer
        -
          in: query
          name: order
          description: ''
          schema:
            type: string
            default: friend_likes
        -
          in: query
          name: period
          description: ''
          schema:
            type: string
            default: week
        -
          in: query
          name: offset
          description: ''
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          in: query
          name: count
          description: ''
          schema:
            type: integer
            default: 10
            minimum: 10
            maximum: 200
      responses:
        200:
          $ref: '#/components/schemas/widgets_getPages_response'
components:
  schemas:
    account_account_counters:
      type: object
      properties:
        app_requests:
          type: integer
          description: 'New app requests number'
          minimum: 1
        events:
          type: integer
          description: 'New events number'
          minimum: 1
        faves:
          type: integer
          description: 'New faves number'
          minimum: 1
        friends:
          type: integer
          description: 'New friends requests number'
          minimum: 1
        friends_suggestions:
          type: integer
          description: 'New friends suggestions number'
          minimum: 1
        friends_recommendations:
          type: integer
          description: 'New friends recommendations number'
          minimum: 1
        gifts:
          type: integer
          description: 'New gifts number'
          minimum: 1
        groups:
          type: integer
          description: 'New groups number'
          minimum: 1
        menu_discover_badge:
          type: integer
        menu_clips_badge:
          type: integer
        messages:
          type: integer
          description: 'New messages number'
          minimum: 1
        memories:
          type: integer
          description: 'New memories number'
          minimum: 1
        notes:
          type: integer
          description: 'New notes number'
          minimum: 1
        notifications:
          type: integer
          description: 'New notifications number'
          minimum: 1
        photos:
          type: integer
          description: 'New photo tags number'
          minimum: 1
        sdk:
          type: integer
          description: 'New sdk number'
          minimum: 1
      additionalProperties: false
    account_info:
      type: object
      properties:
        wishlists_ae_promo_banner_show:
          $ref: '#/components/schemas/base_bool_int'
        2fa_required:
          description: 'Two factor authentication is enabled'
          $ref: '#/components/schemas/base_bool_int'
        country:
          type: string
          description: 'Country code'
        https_required:
          description: 'Information whether HTTPS-only is enabled'
          $ref: '#/components/schemas/base_bool_int'
        intro:
          description: 'Information whether user has been processed intro'
          $ref: '#/components/schemas/base_bool_int'
        show_vk_apps_intro:
          type: boolean
        mini_apps_ads_slot_id:
          description: 'Ads slot id for MyTarget'
          minimum: 0
          type: integer
        qr_promotion:
          type: integer
          minimum: 0
        link_redirects:
          type: object
        lang:
          type: integer
          description: 'Language ID'
        no_wall_replies:
          description: 'Information whether wall comments should be hidden'
          $ref: '#/components/schemas/base_bool_int'
        own_posts_default:
          description: 'Information whether only owners posts should be shown'
          $ref: '#/components/schemas/base_bool_int'
        subscriptions:
          type: object
          $ref: '#/components/schemas/account_subscriptions'
      additionalProperties: false
    account_name_request:
      type: object
      properties:
        first_name:
          type: string
          description: 'First name in request'
        id:
          type: integer
          description: 'Request ID needed to cancel the request'
        last_name:
          type: string
          description: 'Last name in request'
        status:
          $ref: '#/components/schemas/account_name_request_status'
        lang:
          type: string
          description: 'Text to display to user'
        link_href:
          type: string
          description: 'href for link in lang field'
        link_label:
          type: string
          description: 'label to display for link in lang field'
      additionalProperties: false
    account_name_request_status:
      type: string
      description: 'Request status'
      enum:
        - success
        - processing
        - declined
        - was_accepted
        - was_declined
        - declined_with_link
        - response
        - response_with_link
    account_offer:
      type: object
      properties:
        description:
          type: string
          description: 'Offer description'
        id:
          type: integer
          description: 'Offer ID'
        img:
          type: string
          format: uri
          description: 'URL of the preview image'
        instruction:
          type: string
          description: 'Instruction how to process the offer'
        instruction_html:
          type: string
          description: 'Instruction how to process the offer (HTML format)'
        price:
          type: integer
          description: 'Offer price'
        short_description:
          type: string
          description: 'Offer short description'
        tag:
          type: string
          description: 'Offer tag'
        title:
          type: string
          description: 'Offer title'
        currency_amount:
          type: number
          description: 'Currency amount'
        link_id:
          type: integer
          description: 'Link id'
        link_type:
          type: string
          description: 'Link type'
          enum:
            - profile
            - group
            - app
      additionalProperties: false
    account_push_conversations:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Items count'
        items:
          type: array
          items:
            $ref: '#/components/schemas/account_push_conversations_item'
      additionalProperties: false
    account_push_conversations_item:
      type: object
      properties:
        disabled_until:
          type: integer
          description: 'Time until that notifications are disabled in seconds'
          required: true
        peer_id:
          type: integer
          description: 'Peer ID'
          required: true
        sound:
          description: 'Information whether the sound are enabled'
          $ref: '#/components/schemas/base_bool_int'
          required: true
        disabled_mentions:
          description: 'Information whether the mentions are disabled'
          $ref: '#/components/schemas/base_bool_int'
        disabled_mass_mentions:
          description: "Information whether the mass mentions (like '@all', '@online') are disabled. Can be affected by 'disabled_mentions'"
          $ref: '#/components/schemas/base_bool_int'
      additionalProperties: false
    account_push_params:
      type: object
      properties:
        msg:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_mode'
        chat:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_mode'
        like:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_settings'
        repost:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_settings'
        comment:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_settings'
        mention:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_settings'
        reply:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_onoff'
        new_post:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_onoff'
        wall_post:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_onoff'
        wall_publish:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_onoff'
        friend:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_onoff'
        friend_found:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_onoff'
        friend_accepted:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_onoff'
        group_invite:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_onoff'
        group_accepted:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_onoff'
        birthday:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_onoff'
        event_soon:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_onoff'
        app_request:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_onoff'
        sdk_open:
          type: array
          items:
            $ref: '#/components/schemas/account_push_params_onoff'
      additionalProperties: false
    account_push_params_mode:
      type: string
      description: 'Settings parameters'
      enum:
        - 'on'
        - 'off'
        - no_sound
        - no_text
    account_push_params_onoff:
      type: string
      description: 'Settings parameters'
      enum:
        - 'on'
        - 'off'
    account_push_params_settings:
      type: string
      description: 'Settings parameters'
      enum:
        - 'on'
        - 'off'
        - fr_of_fr
    account_push_settings:
      type: object
      properties:
        disabled:
          description: 'Information whether notifications are disabled'
          $ref: '#/components/schemas/base_bool_int'
        disabled_until:
          type: integer
          description: 'Time until that notifications are disabled in Unixtime'
        settings:
          $ref: '#/components/schemas/account_push_params'
        conversations:
          $ref: '#/components/schemas/account_push_conversations'
      additionalProperties: false
    account_subscriptions:
      type: array
      items:
        type: integer
    account_user_settings:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/users_user_min'
        -
          $ref: '#/components/schemas/users_user_settings_xtr'
        -
          properties:
            photo_200:
              type: string
              format: uri
              description: 'URL of square photo of the user with 200 pixels in width'
            is_service_account:
              type: boolean
              description: 'flag about service account'
      additionalProperties: false
    account_user_settings_interest:
      type: object
      properties:
        title:
          type: string
          required: true
        value:
          type: string
          required: true
      additionalProperties: false
    account_user_settings_interests:
      type: object
      properties:
        activities:
          $ref: '#/components/schemas/account_user_settings_interest'
        interests:
          $ref: '#/components/schemas/account_user_settings_interest'
        music:
          $ref: '#/components/schemas/account_user_settings_interest'
        tv:
          $ref: '#/components/schemas/account_user_settings_interest'
        movies:
          $ref: '#/components/schemas/account_user_settings_interest'
        books:
          $ref: '#/components/schemas/account_user_settings_interest'
        games:
          $ref: '#/components/schemas/account_user_settings_interest'
        quotes:
          $ref: '#/components/schemas/account_user_settings_interest'
        about:
          $ref: '#/components/schemas/account_user_settings_interest'
      additionalProperties: false
    addresses_fields:
      type: string
      enum:
        - id
        - title
        - address
        - additional_address
        - country_id
        - city_id
        - metro_station_id
        - latitude
        - longitude
        - distance
        - work_info_status
        - timetable
        - phone
        - time_offset
    ads_access_role:
      type: string
      description: "Current user's role"
      enum:
        - admin
        - manager
        - reports
    ads_access_role_public:
      type: string
      description: "Current user's role"
      enum:
        - manager
        - reports
    ads_accesses:
      type: object
      properties:
        client_id:
          type: string
          description: 'Client ID'
        role:
          $ref: '#/components/schemas/ads_access_role'
      additionalProperties: false
    ads_account:
      type: object
      properties:
        access_role:
          $ref: '#/components/schemas/ads_access_role'
          required: true
        account_id:
          type: integer
          description: 'Account ID'
          required: true
        account_status:
          description: 'Information whether account is active'
          $ref: '#/components/schemas/base_bool_int'
          required: true
        account_type:
          $ref: '#/components/schemas/ads_account_type'
          required: true
        account_name:
          type: string
          description: 'Account name'
          required: true
        can_view_budget:
          type: boolean
          description: 'Can user view account budget'
          required: true
      additionalProperties: false
    ads_account_type:
      type: string
      description: 'Account type'
      enum:
        - general
        - agency
    ads_ad:
      type: object
      properties:
        ad_format:
          type: integer
          description: 'Ad format'
          required: true
        ad_platform:
          type:
            - integer
            - string
          description: 'Ad platform'
        all_limit:
          type: integer
          description: 'Total limit'
          required: true
        approved:
          $ref: '#/components/schemas/ads_ad_approved'
          required: true
        campaign_id:
          type: integer
          description: 'Campaign ID'
          required: true
        category1_id:
          type: integer
          description: 'Category ID'
        category2_id:
          type: integer
          description: 'Additional category ID'
        cost_type:
          $ref: '#/components/schemas/ads_ad_cost_type'
          required: true
        cpc:
          type: integer
          description: 'Cost of a click, kopecks'
        cpm:
          type: integer
          description: 'Cost of 1000 impressions, kopecks'
        cpa:
          type: integer
          description: 'Cost of an action, kopecks'
        ocpm:
          type: integer
          description: 'Cost of 1000 impressions optimized, kopecks'
        autobidding_max_cost:
          type: integer
          description: 'Max cost of target actions for autobidding, kopecks'
        disclaimer_medical:
          description: 'Information whether disclaimer is enabled'
          $ref: '#/components/schemas/base_bool_int'
        disclaimer_specialist:
          description: 'Information whether disclaimer is enabled'
          $ref: '#/components/schemas/base_bool_int'
        disclaimer_supplements:
          description: 'Information whether disclaimer is enabled'
          $ref: '#/components/schemas/base_bool_int'
        id:
          type: integer
          description: 'Ad ID'
          required: true
        impressions_limit:
          type: integer
          description: 'Impressions limit'
        impressions_limited:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether impressions are limited'
        name:
          type: string
          description: 'Ad title'
          required: true
        status:
          $ref: '#/components/schemas/ads_ad_status'
          required: true
        video:
          description: 'Information whether the ad is a video'
          $ref: '#/components/schemas/base_bool_int'
      additionalProperties: false
    ads_ad_approved:
      type: integer
      description: 'Review status'
      enum:
        - 0
        - 1
        - 2
        - 3
      enumNames:
        - 'not moderated'
        - 'pending moderation'
        - approved
        - rejected
    ads_ad_cost_type:
      type: integer
      description: 'Cost type'
      enum:
        - 0
        - 1
        - 2
        - 3
      enumNames:
        - 'per clicks'
        - 'per impressions'
        - 'per actions'
        - 'per impressions optimized'
    ads_ad_layout:
      type: object
      properties:
        ad_format:
          type: integer
          description: 'Ad format'
          required: true
        campaign_id:
          type: integer
          description: 'Campaign ID'
          required: true
        cost_type:
          $ref: '#/components/schemas/ads_ad_cost_type'
          required: true
        description:
          type: string
          description: 'Ad description'
          required: true
        id:
          type: string
          description: 'Ad ID'
          required: true
        image_src:
          type: string
          format: uri
          description: 'Image URL'
          required: true
        image_src_2x:
          type: string
          format: uri
          description: 'URL of the preview image in double size'
        link_domain:
          type: string
          description: 'Domain of advertised object'
        link_url:
          type: string
          format: uri
          description: 'URL of advertised object'
          required: true
        preview_link:
          type: string
          description: 'link to preview an ad as it is shown on the website'
        title:
          type: string
          description: 'Ad title'
          required: true
        video:
          description: 'Information whether the ad is a video'
          $ref: '#/components/schemas/base_bool_int'
      additionalProperties: false
    ads_ad_status:
      type: integer
      description: 'Ad atatus'
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - stopped
        - started
        - deleted
    ads_campaign:
      type: object
      properties:
        ads_count:
          type: integer
          description: 'Amount of active ads in campaign'
        all_limit:
          type: string
          description: "Campaign's total limit, rubles"
          required: true
        create_time:
          type: integer
          description: 'Campaign create time, as Unixtime'
        goal_type:
          type: integer
          description: 'Campaign goal type'
        user_goal_type:
          type: integer
          description: 'Campaign user goal type'
        is_cbo_enabled:
          type: boolean
          description: 'Shows if Campaign Budget Optimization is on'
        day_limit:
          type: string
          description: "Campaign's day limit, rubles"
          required: true
        id:
          type: integer
          description: 'Campaign ID'
          required: true
        name:
          type: string
          description: 'Campaign title'
          required: true
        start_time:
          type: integer
          description: 'Campaign start time, as Unixtime'
          required: true
        status:
          $ref: '#/components/schemas/ads_campaign_status'
          required: true
        stop_time:
          type: integer
          description: 'Campaign stop time, as Unixtime'
          required: true
        type:
          $ref: '#/components/schemas/ads_campaign_type'
          required: true
        update_time:
          type: integer
          description: 'Campaign update time, as Unixtime'
        views_limit:
          type: integer
          description: 'Limit of views per user per campaign'
      additionalProperties: false
    ads_campaign_status:
      type: integer
      description: 'Campaign status'
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - stopped
        - started
        - deleted
    ads_campaign_type:
      type: string
      description: 'Campaign type'
      enum:
        - normal
        - vk_apps_managed
        - mobile_apps
        - promoted_posts
        - adaptive_ads
        - stories
    ads_category:
      type: object
      properties:
        id:
          type: integer
          description: 'Category ID'
          minimum: 1
          required: true
        name:
          type: string
          description: 'Category name'
          required: true
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/ads_category'
      additionalProperties: false
    ads_client:
      type: object
      properties:
        all_limit:
          type: string
          description: "Client's total limit, rubles"
          required: true
        day_limit:
          type: string
          description: "Client's day limit, rubles"
          required: true
        id:
          type: integer
          description: 'Client ID'
          required: true
        name:
          type: string
          description: 'Client name'
          required: true
      additionalProperties: false
    ads_create_ad_status:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          description: 'Ad ID'
          required: true
        post_id:
          type: integer
          minimum: 0
          description: 'Stealth Post ID'
        error_code:
          type: integer
          minimum: 0
          description: 'Error code'
        error_desc:
          type: string
          description: 'Error description'
      additionalProperties: false
    ads_create_campaign_status:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          description: 'Campaign ID'
          required: true
        error_code:
          type: integer
          minimum: 0
          description: 'Error code'
        error_desc:
          type: string
          description: 'Error description'
      additionalProperties: false
    ads_criteria:
      type: object
      properties:
        age_from:
          type: integer
          description: 'Age from'
          minimum: 0
        age_to:
          type: integer
          description: 'Age to'
          minimum: 0
        apps:
          type: string
          description: 'Apps IDs'
        apps_not:
          type: string
          description: 'Apps IDs to except'
        birthday:
          type: integer
          description: 'Days to birthday'
        cities:
          type: string
          description: 'Cities IDs'
        cities_not:
          type: string
          description: 'Cities IDs to except'
        country:
          type: integer
          description: 'Country ID'
          minimum: 0
        districts:
          type: string
          description: 'Districts IDs'
        groups:
          type: string
          description: 'Communities IDs'
        interest_categories:
          type: string
          description: 'Interests categories IDs'
        interests:
          type: string
          description: Interests
        paying:
          description: 'Information whether the user has proceeded VK payments before'
          $ref: '#/components/schemas/base_bool_int'
        positions:
          type: string
          description: 'Positions IDs'
        religions:
          type: string
          description: 'Religions IDs'
        retargeting_groups:
          type: string
          description: 'Retargeting groups IDs'
        retargeting_groups_not:
          type: string
          description: 'Retargeting groups IDs to except'
        school_from:
          type: integer
          description: 'School graduation year from'
        school_to:
          type: integer
          description: 'School graduation year to'
        schools:
          type: string
          description: 'Schools IDs'
        sex:
          $ref: '#/components/schemas/ads_criteria_sex'
        stations:
          type: string
          description: 'Stations IDs'
        statuses:
          type: string
          description: 'Relationship statuses'
        streets:
          type: string
          description: 'Streets IDs'
        travellers:
          description: 'Travellers only'
          $ref: '#/components/schemas/base_property_exists'
        uni_from:
          type: integer
          description: 'University graduation year from'
        uni_to:
          type: integer
          description: 'University graduation year to'
        user_browsers:
          type: string
          description: Browsers
        user_devices:
          type: string
          description: Devices
        user_os:
          type: string
          description: 'Operating systems'
      additionalProperties: false
    ads_criteria_sex:
      type: integer
      description: Sex
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - any
        - male
        - female
    ads_demo_stats:
      type: object
      properties:
        id:
          type: integer
          description: 'Object ID'
        stats:
          $ref: '#/components/schemas/ads_demostats_format'
        type:
          $ref: '#/components/schemas/ads_object_type'
      additionalProperties: false
    ads_demostats_format:
      type: object
      properties:
        age:
          type: array
          items:
            $ref: '#/components/schemas/ads_stats_age'
        cities:
          type: array
          items:
            $ref: '#/components/schemas/ads_stats_cities'
        day:
          type: string
          description: 'Day as YYYY-MM-DD'
        month:
          type: string
          description: 'Month as YYYY-MM'
        overall:
          type: integer
          description: '1 if period=overall'
        sex:
          type: array
          items:
            $ref: '#/components/schemas/ads_stats_sex'
        sex_age:
          type: array
          items:
            $ref: '#/components/schemas/ads_stats_sex_age'
      additionalProperties: false
    ads_flood_stats:
      type: object
      properties:
        left:
          type: integer
          description: 'Requests left'
          required: true
        refresh:
          type: integer
          description: 'Time to refresh in seconds'
          required: true
      additionalProperties: false
    ads_link_status:
      type: object
      properties:
        description:
          type: string
          description: 'Reject reason'
          required: true
        redirect_url:
          type: string
          format: uri
          description: URL
          required: true
        status:
          type: string
          description: 'Link status'
          required: true
      additionalProperties: false
    ads_lookalike_request:
      type: object
      properties:
        id:
          type: integer
          description: 'Lookalike request ID'
          minimum: 1
          required: true
        create_time:
          type: integer
          description: 'Lookalike request create time, as Unixtime'
          required: true
        update_time:
          type: integer
          description: 'Lookalike request update time, as Unixtime'
          required: true
        scheduled_delete_time:
          type: integer
          description: 'Time by which lookalike request would be deleted, as Unixtime'
        status:
          type: string
          enum:
            - search_in_progress
            - search_failed
            - search_done
            - save_in_progress
            - save_failed
            - save_done
          description: 'Lookalike request status'
          required: true
        source_type:
          type: string
          enum:
            - retargeting_group
          description: 'Lookalike request source type'
          required: true
        source_retargeting_group_id:
          type: integer
          minimum: 1
          description: 'Retargeting group id, which was used as lookalike seed'
        source_name:
          type: string
          description: 'Lookalike request seed name (retargeting group name)'
        audience_count:
          type: integer
          minimum: 0
          description: 'Lookalike request seed audience size'
        save_audience_levels:
          type: array
          items:
            $ref: '#/components/schemas/ads_lookalike_request_save_audience_level'
      additionalProperties: false
    ads_lookalike_request_save_audience_level:
      type: object
      properties:
        level:
          type: integer
          minimum: 1
          description: 'Save audience level id, which is used in save audience queries'
        audience_count:
          type: integer
          minimum: 0
          description: 'Saved audience audience size for according level'
      additionalProperties: false
    ads_musician:
      type: object
      properties:
        id:
          type: integer
          description: 'Targeting music artist ID'
          minimum: 1
          required: true
        name:
          type: string
          description: 'Music artist name'
          required: true
        avatar:
          type: string
          description: 'Music artist photo'
      additionalProperties: false
    ads_object_type:
      type: string
      description: 'Object type'
      enum:
        - ad
        - campaign
        - client
        - office
    ads_paragraphs:
      type: object
      properties:
        paragraph:
          type: string
          description: 'Rules paragraph'
      additionalProperties: false
    ads_promoted_post_reach:
      type: object
      properties:
        hide:
          type: integer
          description: 'Hides amount'
          required: true
        id:
          type: integer
          description: "Object ID from 'ids' parameter"
          required: true
        join_group:
          type: integer
          description: 'Community joins'
          required: true
        links:
          type: integer
          description: 'Link clicks'
          required: true
        reach_subscribers:
          type: integer
          description: 'Subscribers reach'
          required: true
        reach_total:
          type: integer
          description: 'Total reach'
          required: true
        report:
          type: integer
          description: 'Reports amount'
          required: true
        to_group:
          type: integer
          description: 'Community clicks'
          required: true
        unsubscribe:
          type: integer
          description: "'Unsubscribe' events amount"
          required: true
        video_views_100p:
          type: integer
          description: 'Video views for 100 percent'
        video_views_25p:
          type: integer
          description: 'Video views for 25 percent'
        video_views_3s:
          type: integer
          description: 'Video views for 3 seconds'
        video_views_50p:
          type: integer
          description: 'Video views for 50 percent'
        video_views_75p:
          type: integer
          description: 'Video views for 75 percent'
        video_views_start:
          type: integer
          description: 'Video starts'
      additionalProperties: false
    ads_reject_reason:
      type: object
      properties:
        comment:
          type: string
          description: 'Comment text'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/ads_rules'
      additionalProperties: false
    ads_rules:
      type: object
      properties:
        paragraphs:
          type: array
          items:
            $ref: '#/components/schemas/ads_paragraphs'
        title:
          type: string
          description: Comment
      additionalProperties: false
    ads_stats:
      type: object
      properties:
        id:
          type: integer
          description: 'Object ID'
        stats:
          $ref: '#/components/schemas/ads_stats_format'
        type:
          $ref: '#/components/schemas/ads_object_type'
        views_times:
          $ref: '#/components/schemas/ads_stats_views_times'
      additionalProperties: false
    ads_stats_age:
      type: object
      properties:
        clicks_rate:
          type: number
          description: 'Clicks rate'
        impressions_rate:
          type: number
          description: 'Impressions rate'
        value:
          type: string
          description: 'Age interval'
      additionalProperties: false
    ads_stats_cities:
      type: object
      properties:
        clicks_rate:
          type: number
          description: 'Clicks rate'
        impressions_rate:
          type: number
          description: 'Impressions rate'
        name:
          type: string
          description: 'City name'
        value:
          type: integer
          description: 'City ID'
      additionalProperties: false
    ads_stats_format:
      type: object
      properties:
        clicks:
          type: integer
          description: 'Clicks number'
        link_external_clicks:
          type: integer
          description: 'External clicks number'
        day:
          type: string
          description: 'Day as YYYY-MM-DD'
        impressions:
          type: integer
          description: 'Impressions number'
        join_rate:
          type: integer
          description: 'Events number'
        month:
          type: string
          description: 'Month as YYYY-MM'
        overall:
          type: integer
          description: '1 if period=overall'
        reach:
          type: integer
          description: 'Reach '
        spent:
          type: integer
          description: 'Spent funds'
        video_clicks_site:
          type: integer
          description: 'Clickthoughs to the advertised site'
        video_views:
          type: integer
          description: 'Video views number'
        video_views_full:
          type: integer
          description: 'Video views (full video)'
        video_views_half:
          type: integer
          description: 'Video views (half of video)'
      additionalProperties: false
    ads_stats_sex:
      type: object
      properties:
        clicks_rate:
          type: number
          description: 'Clicks rate'
        impressions_rate:
          type: number
          description: 'Impressions rate'
        value:
          $ref: '#/components/schemas/ads_stats_sex_value'
      additionalProperties: false
    ads_stats_sex_age:
      type: object
      properties:
        clicks_rate:
          type: number
          description: 'Clicks rate'
        impressions_rate:
          type: number
          description: 'Impressions rate'
        value:
          type: string
          description: 'Sex and age interval'
      additionalProperties: false
    ads_stats_sex_value:
      type: string
      description: Sex
      enum:
        - f
        - m
      enumNames:
        - female
        - male
    ads_stats_views_times:
      type: object
      properties:
        views_ads_times_1:
          type: integer
        views_ads_times_2:
          type: integer
        views_ads_times_3:
          type: integer
        views_ads_times_4:
          type: integer
        views_ads_times_5:
          type: string
        views_ads_times_6:
          type: integer
        views_ads_times_7:
          type: integer
        views_ads_times_8:
          type: integer
        views_ads_times_9:
          type: integer
        views_ads_times_10:
          type: integer
        views_ads_times_11_plus:
          type: integer
      additionalProperties: false
    ads_targ_settings:
      type: object
      allOf:
        -
          properties:
            id:
              type: integer
              description: 'Ad ID'
            campaign_id:
              type: integer
              description: 'Campaign ID'
        -
          $ref: '#/components/schemas/ads_criteria'
      additionalProperties: false
    ads_targ_stats:
      type: object
      properties:
        audience_count:
          type: integer
          description: Audience
          required: true
        recommended_cpc:
          type: number
          description: 'Recommended CPC value for 50% reach (old format)'
        recommended_cpm:
          type: number
          description: 'Recommended CPM value for 50% reach (old format)'
        recommended_cpc_50:
          type: number
          description: 'Recommended CPC value for 50% reach'
        recommended_cpm_50:
          type: number
          description: 'Recommended CPM value for 50% reach'
        recommended_cpc_70:
          type: number
          description: 'Recommended CPC value for 70% reach'
        recommended_cpm_70:
          type: number
          description: 'Recommended CPM value for 70% reach'
        recommended_cpc_90:
          type: number
          description: 'Recommended CPC value for 90% reach'
        recommended_cpm_90:
          type: number
          description: 'Recommended CPM value for 90% reach'
      additionalProperties: false
    ads_targ_suggestions:
      type: object
      properties:
        id:
          type: integer
          description: 'Object ID'
        name:
          type: string
          description: 'Object name'
      additionalProperties: false
    ads_targ_suggestions_cities:
      type: object
      properties:
        id:
          type: integer
          description: 'Object ID'
        name:
          type: string
          description: 'Object name'
        parent:
          type: string
          description: 'Parent object'
      additionalProperties: false
    ads_targ_suggestions_regions:
      type: object
      properties:
        id:
          type: integer
          description: 'Object ID'
        name:
          type: string
          description: 'Object name'
        type:
          type: string
          description: 'Object type'
      additionalProperties: false
    ads_targ_suggestions_schools:
      type: object
      properties:
        desc:
          type: string
          description: 'Full school title'
        id:
          type: integer
          description: 'School ID'
        name:
          type: string
          description: 'School title'
        parent:
          type: string
          description: 'City name'
        type:
          $ref: '#/components/schemas/ads_targ_suggestions_schools_type'
      additionalProperties: false
    ads_targ_suggestions_schools_type:
      type: string
      description: 'School type'
      enum:
        - school
        - university
        - faculty
        - chair
    ads_target_group:
      type: object
      properties:
        audience_count:
          type: integer
          description: Audience
        domain:
          type: string
          description: 'Site domain'
        id:
          type: integer
          description: 'Group ID'
        lifetime:
          type: integer
          description: 'Number of days for user to be in group'
        name:
          type: string
          description: 'Group name'
        pixel:
          type: string
          description: 'Pixel code'
      additionalProperties: false
    ads_updateOfficeUsers_result:
      type: object
      properties:
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        is_success:
          type: boolean
          default: true
          required: true
        error:
          $ref: '#/components/schemas/base_error'
      additionalProperties: false
    ads_user_specification:
      type: object
      properties:
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        role:
          $ref: '#/components/schemas/ads_access_role_public'
          required: true
        grant_access_to_all_clients:
          type: boolean
          default: false
        client_ids:
          type: array
          items:
            type: integer
            minimum: 0
        view_budget:
          type: boolean
          default: null
      additionalProperties: false
    ads_user_specification_cutted:
      type: object
      properties:
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        role:
          $ref: '#/components/schemas/ads_access_role_public'
          required: true
        client_id:
          type: integer
          minimum: 0
        view_budget:
          type: boolean
          default: null
      additionalProperties: false
    ads_users:
      type: object
      properties:
        accesses:
          type: array
          items:
            $ref: '#/components/schemas/ads_accesses'
          required: true
        user_id:
          type: integer
          description: 'User ID'
          entity: owner
          format: int64
          required: true
      additionalProperties: false
    adsweb_getAdCategories_response_categories_category:
      type: object
      properties:
        id:
          type: integer
          required: true
        name:
          type: string
          required: true
      additionalProperties: false
    adsweb_getAdUnits_response_ad_units_ad_unit:
      type: object
      properties:
        id:
          type: integer
          required: true
        site_id:
          type: integer
          required: true
        name:
          type: string
      additionalProperties: false
    adsweb_getFraudHistory_response_entries_entry:
      type: object
      properties:
        site_id:
          type: integer
          required: true
        day:
          type: string
          required: true
      additionalProperties: false
    adsweb_getSites_response_sites_site:
      type: object
      properties:
        id:
          type: integer
          required: true
        status_user:
          type: string
        status_moder:
          type: string
        domains:
          type: string
      additionalProperties: false
    adsweb_getStatistics_response_items_item:
      type: object
      properties:
        site_id:
          type: integer
        ad_unit_id:
          type: integer
        overall_count:
          type: integer
        months_count:
          type: integer
        month_min:
          type: string
        month_max:
          type: string
        days_count:
          type: integer
        day_min:
          type: string
        day_max:
          type: string
        hours_count:
          type: integer
        hour_min:
          type: string
        hour_max:
          type: string
      additionalProperties: false
    appWidgets_photo:
      type: object
      properties:
        id:
          type: string
          description: 'Image ID'
          required: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/base_image'
          required: true
      additionalProperties: false
    appWidgets_photos:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
        items:
          type: array
          items:
            $ref: '#/components/schemas/appWidgets_photo'
      additionalProperties: false
    apps_app:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/apps_app_min'
        -
          properties:
            author_url:
              type: string
              format: uri
              description: "Application author's URL"
            banner_1120:
              type: string
              format: uri
              description: 'URL of the app banner with 1120 px in width'
            banner_560:
              type: string
              format: uri
              description: 'URL of the app banner with 560 px in width'
            icon_16:
              type: string
              format: uri
              description: 'URL of the app icon with 16 px in width'
            is_new:
              description: 'Is new flag'
              $ref: '#/components/schemas/base_bool_int'
            push_enabled:
              description: 'Is push enabled'
              $ref: '#/components/schemas/base_bool_int'
            screen_orientation:
              type: integer
              description: 'Screen orientation'
            friends:
              type: array
              items:
                type: integer
                minimum: 0
            catalog_position:
              type: integer
              description: 'Catalog position'
            description:
              type: string
              description: 'Application description'
            genre:
              type: string
              description: 'Genre name'
            genre_id:
              type: integer
              description: 'Genre ID'
            international:
              type: boolean
              description: 'Information whether the application is multilanguage'
            is_in_catalog:
              type: integer
              description: 'Information whether application is in mobile catalog'
            leaderboard_type:
              $ref: '#/components/schemas/apps_app_leaderboard_type'
            members_count:
              type: integer
              description: 'Members number'
            platform_id:
              type: string
              description: 'Application ID in store'
            published_date:
              type: integer
              description: 'Date when the application has been published in Unixtime'
            screen_name:
              type: string
              description: 'Screen name'
            section:
              type: string
              description: 'Application section name'
      additionalProperties: false
    apps_app_leaderboard_type:
      type: integer
      description: 'Leaderboard type'
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - 'not supported'
        - levels
        - points
    apps_app_min:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/apps_app_type'
          required: true
        id:
          type: integer
          description: 'Application ID'
          minimum: 0
          required: true
        title:
          type: string
          description: 'Application title'
          required: true
        author_owner_id:
          type: integer
          description: "Application author's ID"
        is_installed:
          type: boolean
          description: 'Is application installed'
        icon_139:
          type: string
          format: uri
          description: 'URL of the app icon with 139 px in width'
        icon_150:
          type: string
          format: uri
          description: 'URL of the app icon with 150 px in width'
        icon_278:
          type: string
          format: uri
          description: 'URL of the app icon with 278 px in width'
        icon_576:
          type: string
          format: uri
          description: 'URL of the app icon with 576 px in width'
        background_loader_color:
          type: string
          description: 'Hex color code without hash sign'
        loader_icon:
          type: string
          description: 'SVG data'
        icon_75:
          type: string
          format: uri
          description: 'URL of the app icon with 75 px in width'
      additionalProperties: false
    apps_app_type:
      type: string
      description: 'Application type'
      enum:
        - app
        - game
        - site
        - standalone
        - vk_app
        - community_app
        - html5_game
        - mini_app
    apps_catalog_list:
      type: object
      properties:
        count:
          type: integer
          description: 'Total number'
          minimum: 0
          required: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/apps_app'
          required: true
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/users_user_min'
      additionalProperties: false
    apps_leaderboard:
      type: object
      properties:
        level:
          type: integer
          description: Level
        points:
          type: integer
          description: 'Points number'
        score:
          type: integer
          description: 'Score number'
        user_id:
          type: integer
          description: 'User ID'
          entity: owner
          format: int64
          required: true
      additionalProperties: false
    apps_scope:
      type: object
      description: 'Scope description'
      properties:
        name:
          type: string
          description: 'Scope name'
          enum:
            - friends
            - photos
            - video
            - pages
            - status
            - notes
            - wall
            - docs
            - groups
            - stats
            - market
          required: true
        title:
          type: string
          description: 'Scope title'
      additionalProperties: false
    audio_audio:
      type: object
      properties:
        access_key:
          type: string
          description: 'Access key for the audio'
        artist:
          type: string
          description: 'Artist name'
          required: true
        id:
          type: integer
          description: 'Audio ID'
          minimum: 0
          required: true
        owner_id:
          entity: owner
          type: integer
          description: "Audio owner's ID"
          format: int64
          required: true
        title:
          type: string
          description: Title
          required: true
        url:
          type: string
          format: uri
          description: 'URL of mp3 file'
        duration:
          type: integer
          description: 'Duration in seconds'
          minimum: 0
          required: true
        date:
          type: integer
          description: 'Date when uploaded'
          minimum: 0
        album_id:
          type: integer
          description: 'Album ID'
          minimum: 0
        genre_id:
          type: integer
          description: 'Genre ID'
          minimum: 0
        performer:
          type: string
          description: 'Performer name'
      additionalProperties: false
    base_bool_int:
      type: integer
      enum:
        - 0
        - 1
      enumNames:
        - 'no'
        - 'yes'
    base_city:
      type: object
      properties:
        id:
          type: integer
          description: 'City ID'
          minimum: 1
          required: true
        title:
          type: string
          description: 'City title'
          required: true
      additionalProperties: false
    base_comments_info:
      type: object
      properties:
        can_post:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether current user can comment the post'
        can_open:
          $ref: '#/components/schemas/base_bool_int'
        can_close:
          $ref: '#/components/schemas/base_bool_int'
        count:
          type: integer
          minimum: 0
          description: 'Comments number'
        groups_can_post:
          type: boolean
          description: 'Information whether groups can comment the post'
        donut:
          $ref: '#/components/schemas/wall_wallpost_comments_donut'
      additionalProperties: false
    base_country:
      type: object
      properties:
        id:
          type: integer
          description: 'Country ID'
          minimum: 1
          required: true
        title:
          type: string
          description: 'Country title'
          required: true
      additionalProperties: false
    base_crop_photo:
      type: object
      properties:
        photo:
          $ref: '#/components/schemas/photos_photo'
          required: true
        crop:
          $ref: '#/components/schemas/base_crop_photo_crop'
          required: true
        rect:
          $ref: '#/components/schemas/base_crop_photo_rect'
          required: true
      additionalProperties: false
    base_crop_photo_crop:
      type: object
      properties:
        x:
          type: number
          description: 'Coordinate X of the left upper corner'
          required: true
        'y':
          type: number
          description: 'Coordinate Y of the left upper corner'
          required: true
        x2:
          type: number
          description: 'Coordinate X of the right lower corner'
          required: true
        y2:
          type: number
          description: 'Coordinate Y of the right lower corner'
          required: true
      additionalProperties: false
    base_crop_photo_rect:
      type: object
      properties:
        x:
          type: number
          description: 'Coordinate X of the left upper corner'
          required: true
        'y':
          type: number
          description: 'Coordinate Y of the left upper corner'
          required: true
        x2:
          type: number
          description: 'Coordinate X of the right lower corner'
          required: true
        y2:
          type: number
          description: 'Coordinate Y of the right lower corner'
          required: true
      additionalProperties: false
    base_error:
      type: object
      properties:
        error_code:
          type: integer
          description: 'Error code'
          required: true
        error_subcode:
          type: integer
          description: 'Error subcode'
        error_msg:
          type: string
          description: 'Error message'
        error_text:
          type: string
          description: 'Localized error message'
        request_params:
          type: array
          items:
            $ref: '#/components/schemas/base_request_param'
      additionalProperties: false
    base_geo:
      type: object
      properties:
        coordinates:
          $ref: '#/components/schemas/base_geo_coordinates'
        place:
          $ref: '#/components/schemas/base_place'
        showmap:
          type: integer
          description: 'Information whether a map is showed'
        type:
          type: string
          description: 'Place type'
      additionalProperties: false
    base_geo_coordinates:
      type: object
      properties:
        latitude:
          type: number
          required: true
        longitude:
          type: number
          required: true
      additionalProperties: false
    base_gradient_point:
      type: object
      properties:
        color:
          type: string
          description: 'Hex color code without #'
          required: true
        position:
          type: number
          minimum: 0
          maximum: 1
          description: 'Point position'
          required: true
      additionalProperties: false
    base_image:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
          format: uri
          description: 'Image url'
          required: true
        width:
          type: integer
          description: 'Image width'
          minimum: 0
          required: true
        height:
          type: integer
          description: 'Image height'
          minimum: 0
          required: true
      additionalProperties: false
    base_likes:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Likes number'
        user_likes:
          description: 'Information whether current user likes the photo'
          $ref: '#/components/schemas/base_bool_int'
      additionalProperties: false
    base_likes_info:
      type: object
      properties:
        can_like:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether current user can like the post'
          required: true
        can_publish:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether current user can repost'
        count:
          type: integer
          minimum: 0
          description: 'Likes number'
          required: true
        user_likes:
          type: integer
          description: 'Information whether current uer has liked the post'
          required: true
      additionalProperties: false
    base_link:
      type: object
      properties:
        application:
          $ref: '#/components/schemas/base_link_application'
        button:
          $ref: '#/components/schemas/base_link_button'
        caption:
          type: string
          description: 'Link caption'
        description:
          type: string
          description: 'Link description'
        id:
          type: string
          description: 'Link ID'
        is_favorite:
          type: boolean
        photo:
          $ref: '#/components/schemas/photos_photo'
        preview_page:
          type: string
          description: 'String ID of the page with article preview'
        preview_url:
          type: string
          format: uri
          description: 'URL of the page with article preview'
        product:
          $ref: '#/components/schemas/base_link_product'
        rating:
          $ref: '#/components/schemas/base_link_rating'
        title:
          type: string
          description: 'Link title'
        url:
          type: string
          description: 'Link URL'
          required: true
        target_object:
          $ref: '#/components/schemas/link_target_object'
        is_external:
          type: boolean
          description: 'Information whether the current link is external'
        video:
          $ref: '#/components/schemas/video_video'
          description: 'Video from link'
      additionalProperties: false
    base_link_application:
      type: object
      properties:
        app_id:
          type: number
          description: 'Application Id'
        store:
          $ref: '#/components/schemas/base_link_application_store'
      additionalProperties: false
    base_link_application_store:
      type: object
      properties:
        id:
          type: number
          description: 'Store Id'
        name:
          type: string
          description: 'Store name'
      additionalProperties: false
    base_link_button:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/base_link_button_action'
          description: 'Button action'
        title:
          type: string
          description: 'Button title'
        block_id:
          type: string
          description: 'Target block id'
        section_id:
          type: string
          description: 'Target section id'
        curator_id:
          type: integer
          description: 'curator id'
        album_id:
          type: integer
          minimum: 1
          description: 'Video album id'
        owner_id:
          type: integer
          description: 'Owner id'
          entity: owner
          format: int64
        icon:
          type: string
          description: "Button icon name, e.g. 'phone' or 'gift'"
        style:
          $ref: '#/components/schemas/base_link_button_style'
      additionalProperties: false
    base_link_button_action:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/base_link_button_action_type'
          required: true
        url:
          type: string
          format: uri
          description: 'Action URL'
        consume_reason:
          type: string
      additionalProperties: false
    base_link_button_action_type:
      type: string
      description: 'Action type'
      enum:
        - open_url
      enumNames:
        - open_url
    base_link_button_style:
      type: string
      description: 'Button style'
      enum:
        - primary
        - secondary
      enumNames:
        - primary
        - secondary
    base_link_product:
      type: object
      properties:
        price:
          $ref: '#/components/schemas/market_price'
          required: true
        merchant:
          type: string
        orders_count:
          type: integer
      additionalProperties: false
    base_link_product_category:
      type: string
    base_link_product_status:
      type: string
      description: 'Status representation'
      enum:
        - active
        - blocked
        - sold
        - deleted
        - archived
    base_link_rating:
      type: object
      properties:
        reviews_count:
          type: integer
          description: 'Count of reviews'
        stars:
          type: number
          description: 'Count of stars'
      additionalProperties: false
    base_message_error:
      type: object
      properties:
        code:
          type: integer
          description: 'Error code'
        description:
          type: string
          description: 'Error message'
      additionalProperties: false
    base_object:
      type: object
      properties:
        id:
          type: integer
          description: 'Object ID'
          required: true
        title:
          type: string
          description: 'Object title'
          required: true
      additionalProperties: false
    base_object_count:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Items count'
      additionalProperties: false
    base_object_with_name:
      type: object
      properties:
        id:
          type: integer
          description: 'Object ID'
          required: true
        name:
          type: string
          description: 'Object name'
          required: true
      additionalProperties: false
    base_place:
      type: object
      properties:
        address:
          type: string
          description: 'Place address'
        checkins:
          type: integer
          description: 'Checkins number'
        city:
          type: string
          description: 'City name'
        country:
          type: string
          description: 'Country name'
        created:
          type: integer
          description: 'Date of the place creation in Unixtime'
        icon:
          type: string
          format: uri
          description: "URL of the place's icon"
        id:
          type: integer
          description: 'Place ID'
        latitude:
          type: number
          description: 'Place latitude'
        longitude:
          type: number
          description: 'Place longitude'
        title:
          type: string
          description: 'Place title'
        type:
          type: string
          description: 'Place type'
      additionalProperties: false
    base_property_exists:
      type: integer
      enum:
        - 1
      enumNames:
        - 'Property exists'
    base_reposts_info:
      type: object
      description: 'Count of views'
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Total reposts counter. Sum of wall and mail reposts counters'
          required: true
        wall_count:
          type: integer
          minimum: 0
          description: 'Wall reposts counter'
        mail_count:
          type: integer
          minimum: 0
          description: 'Mail reposts counter'
        user_reposted:
          type: integer
          description: 'Information whether current user has reposted the post'
      additionalProperties: false
    base_request_param:
      type: object
      properties:
        key:
          type: string
          description: 'Parameter name'
        value:
          type: string
          description: 'Parameter value'
      additionalProperties: false
    base_sex:
      type: integer
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - unknown
        - female
        - male
    base_sticker:
      type: object
      oneOf:
        -
          $ref: '#/components/schemas/base_sticker_old'
          description: 'Deprecated from 5.74, but still used in later versions in queue'
        -
          $ref: '#/components/schemas/base_sticker_new'
    base_sticker_animation:
      type: object
      properties:
        type:
          type: string
          enum:
            - light
            - dark
          description: 'Type of animation script'
        url:
          type: string
          format: uri
          description: 'URL of animation script'
      additionalProperties: false
    base_sticker_new:
      type: object
      properties:
        sticker_id:
          type: integer
          description: 'Sticker ID'
        product_id:
          type: integer
          description: 'Pack ID'
        images:
          type: array
          items:
            $ref: '#/components/schemas/base_image'
        images_with_background:
          type: array
          items:
            $ref: '#/components/schemas/base_image'
        animation_url:
          type: string
          format: uri
          description: 'URL of sticker animation script'
        animations:
          type: array
          description: 'Array of sticker animation script objects'
          items:
            $ref: '#/components/schemas/base_sticker_animation'
        is_allowed:
          type: boolean
          description: 'Information whether the sticker is allowed'
      additionalProperties: false
    base_sticker_old:
      type: object
      properties:
        id:
          type: integer
          description: 'Sticker ID'
        product_id:
          type: integer
          description: 'Pack ID'
        width:
          type: integer
          description: 'Width in px'
        height:
          type: integer
          description: 'Height in px'
        photo_128:
          type: string
          format: uri
          description: 'URL of the preview image with 128 px in height'
        photo_256:
          type: string
          format: uri
          description: 'URL of the preview image with 256 px in height'
        photo_352:
          type: string
          format: uri
          description: 'URL of the preview image with 352 px in height'
        photo_512:
          type: string
          format: uri
          description: 'URL of the preview image with 512 px in height'
        photo_64:
          type: string
          format: uri
          description: 'URL of the preview image with 64 px in height'
        is_allowed:
          type: boolean
          description: 'Information whether the sticker is allowed'
      additionalProperties: false
    base_stickers_list:
      type: array
      items:
        $ref: '#/components/schemas/base_sticker_new'
    base_upload_server:
      type: object
      properties:
        upload_url:
          type: string
          format: uri
          description: 'Upload URL'
          required: true
      additionalProperties: false
    base_user_group_fields:
      type: string
      enum:
        - about
        - action_button
        - activities
        - activity
        - addresses
        - admin_level
        - age_limits
        - author_id
        - ban_info
        - bdate
        - blacklisted
        - blacklisted_by_me
        - books
        - can_create_topic
        - can_message
        - can_post
        - can_see_all_posts
        - can_see_audio
        - can_send_friend_request
        - can_upload_video
        - can_write_private_message
        - career
        - city
        - common_count
        - connections
        - contacts
        - counters
        - country
        - cover
        - crop_photo
        - deactivated
        - description
        - domain
        - education
        - exports
        - finish_date
        - fixed_post
        - followers_count
        - friend_status
        - games
        - has_market_app
        - has_mobile
        - has_photo
        - home_town
        - id
        - interests
        - is_admin
        - is_closed
        - is_favorite
        - is_friend
        - is_hidden_from_feed
        - is_member
        - is_messages_blocked
        - can_send_notify
        - is_subscribed
        - last_seen
        - links
        - lists
        - maiden_name
        - main_album_id
        - main_section
        - market
        - member_status
        - members_count
        - military
        - movies
        - music
        - name
        - nickname
        - occupation
        - online
        - online_status
        - personal
        - phone
        - photo_100
        - photo_200
        - photo_200_orig
        - photo_400_orig
        - photo_50
        - photo_id
        - photo_max
        - photo_max_orig
        - quotes
        - relation
        - relatives
        - schools
        - screen_name
        - sex
        - site
        - start_date
        - status
        - timezone
        - trending
        - tv
        - type
        - universities
        - verified
        - wall_comments
        - wiki_page
        - first_name
        - first_name_acc
        - first_name_dat
        - first_name_gen
        - last_name
        - last_name_acc
        - last_name_dat
        - last_name_gen
        - can_subscribe_stories
        - is_subscribed_stories
        - vk_admin_status
        - can_upload_story
    base_user_id:
      type: object
      properties:
        user_id:
          type: integer
          description: 'User ID'
          entity: owner
          format: int64
      additionalProperties: false
    board_default_order:
      type: integer
      description: 'Sort type'
      enum:
        - 1
        - 2
        - -1
        - -2
      enumNames:
        - desc_updated
        - desc_created
        - asc_updated
        - asc_created
    board_topic:
      type: object
      properties:
        comments:
          type: integer
          description: 'Comments number'
        created:
          type: integer
          description: 'Date when the topic has been created in Unixtime'
        created_by:
          type: integer
          description: 'Creator ID'
        id:
          type: integer
          description: 'Topic ID'
        is_closed:
          description: 'Information whether the topic is closed'
          $ref: '#/components/schemas/base_bool_int'
        is_fixed:
          description: 'Information whether the topic is fixed'
          $ref: '#/components/schemas/base_bool_int'
        title:
          type: string
          description: 'Topic title'
        updated:
          type: integer
          description: 'Date when the topic has been updated in Unixtime'
        updated_by:
          type: integer
          description: 'ID of user who updated the topic'
        first_comment:
          type: string
          description: 'First comment text'
        last_comment:
          type: string
          description: 'Last comment text'
      additionalProperties: false
    board_topic_comment:
      type: object
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/wall_comment_attachment'
        date:
          type: integer
          description: 'Date when the comment has been added in Unixtime'
          minimum: 0
          required: true
        from_id:
          type: integer
          description: 'Author ID'
          required: true
        id:
          type: integer
          description: 'Comment ID'
          minimum: 1
          required: true
        real_offset:
          type: integer
          description: 'Real position of the comment'
        text:
          type: string
          description: 'Comment text'
          required: true
        can_edit:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether current user can edit the comment'
        likes:
          $ref: '#/components/schemas/base_likes_info'
      additionalProperties: false
    callback_base:
      type: object
      properties:
        type:
          type: string
          $ref: '#/components/schemas/callback_type'
          required: true
        group_id:
          type: integer
          minimum: 0
          entity: groups
          format: int64
          required: true
        event_id:
          type: string
          description: 'Unique event id. If it passed twice or more - you should ignore it.'
          required: true
        secret:
          type: string
      discriminator:
        propertyName: type
        mapping:
          message_new: '../callback/objects.json#/definitions/callback_message_new'
          message_reply: '../callback/objects.json#/definitions/callback_message_reply'
          message_edit: '../callback/objects.json#/definitions/callback_message_edit'
          confirmation: '../callback/objects.json#/definitions/callback_confirmation'
      additionalProperties: false
    callback_board_post_delete:
      type: object
      properties:
        topic_owner_id:
          type: integer
          minimum: 0
          required: true
        topic_id:
          type: integer
          minimum: 0
          required: true
        id:
          type: integer
          minimum: 0
          required: true
      additionalProperties: false
    callback_confirmation:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/callback_base'
        -
          type: object
          properties:
            type:
              type: string
              $ref: '#/components/schemas/callback_type'
              default: confirmation
      additionalProperties: false
    callback_donut_money_withdraw:
      type: object
      properties:
        amount:
          type: number
          minimum: 0
          required: true
        amount_without_fee:
          type: number
          minimum: 0
          required: true
      additionalProperties: false
    callback_donut_money_withdraw_error:
      type: object
      properties:
        reason:
          type: string
          minimum: 0
          required: true
      additionalProperties: false
    callback_donut_subscription_cancelled:
      type: object
      properties:
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
      additionalProperties: false
    callback_donut_subscription_create:
      type: object
      properties:
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
        amount:
          type: integer
          minimum: 0
          required: true
        amount_without_fee:
          type: number
          minimum: 0
          required: true
      additionalProperties: false
    callback_donut_subscription_expired:
      type: object
      properties:
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
      additionalProperties: false
    callback_donut_subscription_price_changed:
      type: object
      properties:
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
        amount_old:
          type: integer
          minimum: 0
          required: true
        amount_new:
          type: integer
          minimum: 0
          required: true
        amount_diff:
          type: number
          minimum: 0
        amount_diff_without_fee:
          type: number
          minimum: 0
      additionalProperties: false
    callback_donut_subscription_prolonged:
      type: object
      properties:
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
        amount:
          type: integer
          minimum: 0
          required: true
        amount_without_fee:
          type: number
          minimum: 0
          required: true
      additionalProperties: false
    callback_group_change_photo:
      type: object
      properties:
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        photo:
          $ref: '#/components/schemas/photos_photo'
          required: true
      additionalProperties: false
    callback_group_change_settings:
      type: object
      properties:
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        self:
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    callback_group_join:
      type: object
      properties:
        user_id:
          type: integer
          entity: owner
          format: int64
          required: true
        join_type:
          $ref: '#/components/schemas/callback_group_join_type'
          required: true
      additionalProperties: false
    callback_group_join_type:
      type: string
      enum:
        - join
        - unsure
        - accepted
        - approved
        - request
    callback_group_leave:
      type: object
      properties:
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
        self:
          $ref: '#/components/schemas/base_bool_int'
      additionalProperties: false
    callback_group_market:
      type: integer
      enum:
        - 0
        - 1
      enumNames:
        - disabled
        - open
    callback_group_officer_role:
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
      enumNames:
        - none
        - moderator
        - editor
        - administrator
    callback_group_officers_edit:
      type: object
      properties:
        admin_id:
          type: integer
          minimum: 0
          required: true
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        level_old:
          $ref: '#/components/schemas/callback_group_officer_role'
          required: true
        level_new:
          $ref: '#/components/schemas/callback_group_officer_role'
          required: true
      additionalProperties: false
    callback_group_settings_changes:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        access:
          $ref: '#/components/schemas/groups_group_is_closed'
        screen_name:
          type: string
        public_category:
          type: integer
        public_subcategory:
          type: integer
        age_limits:
          $ref: '#/components/schemas/groups_group_full_age_limits'
        website:
          type: string
        enable_status_default:
          $ref: '#/components/schemas/groups_group_wall'
        enable_audio:
          $ref: '#/components/schemas/groups_group_audio'
        enable_video:
          $ref: '#/components/schemas/groups_group_video'
        enable_photo:
          $ref: '#/components/schemas/groups_group_photos'
        enable_market:
          $ref: '#/components/schemas/callback_group_market'
      additionalProperties: false
    callback_like_add_remove:
      type: object
      properties:
        liker_id:
          type: integer
          required: true
        object_type:
          type: string
          enum:
            - video
            - photo
            - post
            - comment
            - note
            - topic_comment
            - photo_comment
            - video_comment
            - market
            - market_comment
          required: true
        object_owner_id:
          type: integer
          required: true
        object_id:
          type: integer
          required: true
        post_id:
          type: integer
          minimum: 0
          required: true
        thread_reply_id:
          type: integer
          minimum: 0
      additionalProperties: false
    callback_market_comment:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          required: true
        from_id:
          type: integer
          required: true
        date:
          type: integer
          minimum: 0
          required: true
        text:
          type: string
        market_owner_id:
          type: integer
        photo_id:
          type: integer
      additionalProperties: false
    callback_market_comment_delete:
      type: object
      properties:
        owner_id:
          type: integer
          entity: owner
          format: int64
          required: true
        id:
          type: integer
          required: true
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        item_id:
          type: integer
          minimum: 0
          required: true
      additionalProperties: false
    callback_message_allow:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/callback_base'
        -
          type: object
          properties:
            type:
              type: string
              $ref: '#/components/schemas/callback_type'
              default: message_allow
            object:
              $ref: '#/components/schemas/callback_message_allow_object'
              required: true
      additionalProperties: false
    callback_message_allow_object:
      type: object
      properties:
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        key:
          type: string
          required: true
      additionalProperties: false
    callback_message_deny:
      type: object
      properties:
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
      additionalProperties: false
    callback_message_edit:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/callback_base'
        -
          type: object
          properties:
            type:
              type: string
              $ref: '#/components/schemas/callback_type'
              default: message_edit
            object:
              $ref: '#/components/schemas/messages_message'
              required: true
      additionalProperties: false
    callback_message_new:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/callback_base'
        -
          type: object
          properties:
            type:
              type: string
              $ref: '#/components/schemas/callback_type'
              default: message_new
            object:
              type: object
              $ref: '#/components/schemas/callback_message_object'
              required: true
      additionalProperties: false
    callback_message_object:
      type: object
      properties:
        client_info:
          $ref: '#/components/schemas/client_info_for_bots'
        message:
          $ref: '#/components/schemas/messages_message'
      additionalProperties: false
    callback_message_reply:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/callback_base'
        -
          type: object
          properties:
            type:
              type: string
              $ref: '#/components/schemas/callback_type'
              default: message_reply
            object:
              $ref: '#/components/schemas/messages_message'
              required: true
      additionalProperties: false
    callback_photo_comment:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          required: true
        from_id:
          type: integer
          minimum: 0
          required: true
        date:
          type: integer
          minimum: 0
          required: true
        text:
          type: string
          required: true
        photo_owner_id:
          type: integer
          required: true
      additionalProperties: false
    callback_photo_comment_delete:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          required: true
        owner_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        photo_id:
          type: integer
          minimum: 0
          required: true
      additionalProperties: false
    callback_poll_vote_new:
      type: object
      properties:
        owner_id:
          type: integer
          entity: owner
          format: int64
          required: true
        poll_id:
          type: integer
          minimum: 0
          required: true
        option_id:
          type: integer
          minimum: 0
          required: true
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
      additionalProperties: false
    callback_qr_scan:
      type: object
      properties:
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        data:
          type: string
          required: true
        type:
          type: string
          required: true
        subtype:
          type: string
          required: true
        reread:
          type: boolean
          required: true
      additionalProperties: false
    callback_type:
      type: string
      enum:
        - audio_new
        - board_post_new
        - board_post_edit
        - board_post_restore
        - board_post_delete
        - confirmation
        - group_leave
        - group_join
        - group_change_photo
        - group_change_settings
        - group_officers_edit
        - lead_forms_new
        - market_comment_new
        - market_comment_delete
        - market_comment_edit
        - market_comment_restore
        - message_new
        - message_reply
        - message_edit
        - message_allow
        - message_deny
        - message_read
        - message_typing_state
        - messages_edit
        - photo_new
        - photo_comment_new
        - photo_comment_delete
        - photo_comment_edit
        - photo_comment_restore
        - poll_vote_new
        - user_block
        - user_unblock
        - video_new
        - video_comment_new
        - video_comment_delete
        - video_comment_edit
        - video_comment_restore
        - wall_post_new
        - wall_reply_new
        - wall_reply_edit
        - wall_reply_delete
        - wall_reply_restore
        - wall_repost
    callback_user_block:
      type: object
      properties:
        admin_id:
          type: integer
          minimum: 0
          required: true
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        unblock_date:
          type: integer
          minimum: 0
          required: true
        reason:
          type: integer
          minimum: 0
          required: true
        comment:
          type: string
      additionalProperties: false
    callback_user_unblock:
      type: object
      properties:
        admin_id:
          type: integer
          minimum: 0
          required: true
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        by_end_date:
          type: integer
          minimum: 0
          required: true
      additionalProperties: false
    callback_video_comment:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          required: true
        from_id:
          type: integer
          required: true
        date:
          type: integer
          minimum: 0
          required: true
        text:
          type: string
          required: true
        video_owner_id:
          type: integer
          required: true
      additionalProperties: false
    callback_video_comment_delete:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          required: true
        owner_id:
          type: integer
          entity: owner
          format: int64
          required: true
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        video_id:
          type: integer
          minimum: 0
          required: true
      additionalProperties: false
    callback_wall_comment_delete:
      type: object
      properties:
        owner_id:
          type: integer
          entity: owner
          format: int64
          required: true
        id:
          type: integer
          minimum: 0
          required: true
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        post_id:
          type: integer
          minimum: 0
          required: true
      additionalProperties: false
    calls_call:
      type: object
      properties:
        duration:
          type: integer
          description: 'Call duration'
          minimum: 0
        initiator_id:
          type: integer
          description: 'Caller initiator'
          minimum: 0
          required: true
        receiver_id:
          type: integer
          description: 'Caller receiver'
          minimum: 0
          required: true
        state:
          $ref: '#/components/schemas/calls_end_state'
          required: true
        time:
          type: integer
          description: 'Timestamp for call'
          required: true
        video:
          type: boolean
          description: 'Was this call initiated as video call'
        participants:
          $ref: '#/components/schemas/calls_participants'
      additionalProperties: false
    calls_end_state:
      type: string
      description: 'State in which call ended up'
      enum:
        - canceled_by_initiator
        - canceled_by_receiver
        - reached
    calls_participants:
      type: object
      properties:
        list:
          type: array
          items:
            type: integer
            format: int64
        count:
          type: integer
          minimum: 0
          description: 'Participants count'
      additionalProperties: false
    client_info_for_bots:
      type: object
      properties:
        button_actions:
          type: array
          items:
            $ref: '#/components/schemas/messages_template_action_type_names'
        keyboard:
          type: boolean
          description: 'client has support keyboard'
        inline_keyboard:
          type: boolean
          description: 'client has support inline keyboard'
        carousel:
          type: boolean
          description: 'client has support carousel'
        lang_id:
          type: integer
          description: 'client or user language id'
      additionalProperties: false
    comment_thread:
      type: object
      properties:
        count:
          type: integer
          description: 'Comments number'
          minimum: 0
          required: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/wall_wall_comment'
        can_post:
          type: boolean
          description: 'Information whether current user can comment the post'
        show_reply_button:
          type: boolean
          description: 'Information whether recommended to display reply button'
        groups_can_post:
          type: boolean
          description: 'Information whether groups can comment the post'
      additionalProperties: false
    database_city:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/base_object'
        -
          properties:
            area:
              type: string
              description: 'Area title'
            region:
              type: string
              description: 'Region title'
            important:
              description: 'Information whether the city is included in important cities list'
              $ref: '#/components/schemas/base_bool_int'
          additionalProperties: false
      additionalProperties: false
    database_city_by_id:
      type: object
      properties:
        $ref: '#/components/schemas/base_object'
    database_faculty:
      type: object
      properties:
        id:
          type: integer
          description: 'Faculty ID'
        title:
          type: string
          description: 'Faculty title'
      additionalProperties: false
    database_region:
      type: object
      properties:
        id:
          type: integer
          description: 'Region ID'
        title:
          type: string
          description: 'Region title'
      additionalProperties: false
    database_school:
      type: object
      properties:
        id:
          type: integer
          description: 'School ID'
        title:
          type: string
          description: 'School title'
      additionalProperties: false
    database_station:
      type: object
      properties:
        city_id:
          type: integer
          description: 'City ID'
          minimum: 1
        color:
          type: string
          description: 'Hex color code without #'
        id:
          type: integer
          description: 'Station ID'
          minimum: 1
          required: true
        name:
          type: string
          description: 'Station name'
          required: true
      additionalProperties: false
    database_university:
      type: object
      properties:
        id:
          type: integer
          description: 'University ID'
        title:
          type: string
          description: 'University title'
      additionalProperties: false
    docs_doc:
      type: object
      properties:
        id:
          type: integer
          description: 'Document ID'
          minimum: 0
          required: true
        owner_id:
          type: integer
          description: 'Document owner ID'
          entity: owner
          format: int64
          required: true
        title:
          type: string
          description: 'Document title'
          required: true
        size:
          type: integer
          description: 'File size in bites'
          minimum: 0
          required: true
        ext:
          type: string
          description: 'File extension'
          required: true
        url:
          type: string
          format: uri
          description: 'File URL'
        date:
          type: integer
          description: 'Date when file has been uploaded in Unixtime'
          minimum: 0
          required: true
        type:
          type: integer
          description: 'Document type'
          required: true
        preview:
          $ref: '#/components/schemas/docs_doc_preview'
        is_licensed:
          $ref: '#/components/schemas/base_bool_int'
        access_key:
          type: string
          description: 'Access key for the document'
        tags:
          type: array
          description: 'Document tags'
          items:
            type: string
      additionalProperties: false
    docs_doc_attachment_type:
      type: string
      description: 'Doc attachment type'
      enum:
        - doc
        - graffiti
        - audio_message
    docs_doc_preview:
      type: object
      properties:
        audio_msg:
          $ref: '#/components/schemas/docs_doc_preview_audio_msg'
        graffiti:
          $ref: '#/components/schemas/docs_doc_preview_graffiti'
        photo:
          $ref: '#/components/schemas/docs_doc_preview_photo'
        video:
          $ref: '#/components/schemas/docs_doc_preview_video'
      additionalProperties: false
    docs_doc_preview_audio_msg:
      type: object
      properties:
        duration:
          type: integer
          description: 'Audio message duration in seconds'
          minimum: 0
          required: true
        link_mp3:
          type: string
          format: uri
          description: 'MP3 file URL'
          required: true
        link_ogg:
          type: string
          format: uri
          description: 'OGG file URL'
          required: true
        waveform:
          type: array
          items:
            type: integer
            description: 'Sound visualisation'
            minimum: 0
          required: true
      additionalProperties: false
    docs_doc_preview_graffiti:
      type: object
      properties:
        src:
          type: string
          format: uri
          description: 'Graffiti file URL'
          required: true
        width:
          type: integer
          description: 'Graffiti width'
          minimum: 0
          required: true
        height:
          type: integer
          description: 'Graffiti height'
          minimum: 0
          required: true
      additionalProperties: false
    docs_doc_preview_photo:
      type: object
      properties:
        sizes:
          type: array
          items:
            $ref: '#/components/schemas/docs_doc_preview_photo_sizes'
      additionalProperties: false
    docs_doc_preview_photo_sizes:
      type: object
      properties:
        src:
          type: string
          format: uri
          description: 'URL of the image'
          required: true
        width:
          type: integer
          description: 'Width in px'
          minimum: 0
          required: true
        height:
          type: integer
          description: 'Height in px'
          minimum: 0
          required: true
        type:
          $ref: '#/components/schemas/photos_photo_sizes_type'
          required: true
      additionalProperties: false
    docs_doc_preview_video:
      type: object
      properties:
        src:
          type: string
          format: uri
          description: 'Video URL'
          required: true
        width:
          type: integer
          description: "Video's width in pixels"
          minimum: 0
          required: true
        height:
          type: integer
          description: "Video's height in pixels"
          minimum: 0
          required: true
        file_size:
          type: integer
          description: 'Video file size in bites'
          minimum: 0
          required: true
      additionalProperties: false
    docs_doc_types:
      type: object
      properties:
        id:
          type: integer
          description: 'Doc type ID'
          required: true
        name:
          type: string
          description: 'Doc type title'
          required: true
        count:
          type: integer
          minimum: 0
          description: 'Number of docs'
          required: true
      additionalProperties: false
    donut_donator_subscription_info:
      description: 'Info about user VK Donut subscription'
      type: object
      properties:
        owner_id:
          type: integer
          entity: owner
          format: int64
          required: true
        next_payment_date:
          type: integer
          required: true
        amount:
          type: integer
          required: true
        status:
          type: string
          enum:
            - active
            - expiring
          required: true
      additionalProperties: false
    events_event_attach:
      type: object
      properties:
        address:
          type: string
          description: 'address of event'
        button_text:
          type: string
          description: 'text of attach'
          required: true
        friends:
          type: array
          description: 'array of friends ids'
          items:
            type: integer
          required: true
        id:
          type: integer
          description: 'event ID'
          minimum: 0
          required: true
        is_favorite:
          type: boolean
          description: 'is favorite'
          required: true
        member_status:
          $ref: '#/components/schemas/groups_group_full_member_status'
          description: "Current user's member status"
        text:
          type: string
          description: 'text of attach'
          required: true
        time:
          type: integer
          description: 'event start time'
      additionalProperties: false
    fave_bookmark:
      type: object
      properties:
        added_date:
          type: integer
          description: 'Timestamp, when this item was bookmarked'
          minimum: 0
          required: true
        link:
          $ref: '#/components/schemas/base_link'
        post:
          $ref: '#/components/schemas/wall_wallpost_full'
        product:
          $ref: '#/components/schemas/market_market_item'
        seen:
          type: boolean
          description: 'Has user seen this item'
          required: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/fave_tag'
          required: true
        type:
          description: 'Item type'
          $ref: '#/components/schemas/fave_bookmark_type'
          required: true
        video:
          $ref: '#/components/schemas/video_video_full'
      additionalProperties: false
    fave_bookmark_type:
      type: string
      enum:
        - post
        - video
        - product
        - article
        - link
    fave_page:
      type: object
      properties:
        description:
          type: string
          description: 'Some info about user or group'
          required: true
        group:
          $ref: '#/components/schemas/groups_group_full'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/fave_tag'
          required: true
        type:
          description: 'Item type'
          $ref: '#/components/schemas/fave_page_type'
          required: true
        updated_date:
          type: integer
          description: 'Timestamp, when this page was bookmarked'
          minimum: 0
        user:
          $ref: '#/components/schemas/users_user_full'
      additionalProperties: false
    fave_page_type:
      type: string
      enum:
        - user
        - group
        - hints
    fave_tag:
      type: object
      properties:
        id:
          type: integer
          description: 'Tag id'
          minimum: 0
        name:
          type: string
          description: 'Tag name'
      additionalProperties: false
    friends_friend_extended_status:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/friends_friend_status'
        -
          properties:
            is_request_unread:
              type: boolean
              description: 'Is friend request from other user unread'
      additionalProperties: false
    friends_friend_status:
      type: object
      properties:
        friend_status:
          $ref: '#/components/schemas/friends_friend_status_status'
          required: true
        sign:
          type: string
          description: 'MD5 hash for the result validation'
        user_id:
          type: integer
          description: 'User ID'
          minimum: 1
          entity: owner
          format: int64
          required: true
      additionalProperties: false
    friends_friend_status_status:
      type: integer
      description: 'Friend status with the user'
      enum:
        - 0
        - 1
        - 2
        - 3
      enumNames:
        - 'not a friend'
        - 'outcoming request'
        - 'incoming request'
        - 'is friend'
    friends_friends_list:
      type: object
      properties:
        id:
          type: integer
          description: 'List ID'
          required: true
        name:
          type: string
          description: 'List title'
          required: true
      additionalProperties: false
    friends_mutual_friend:
      type: object
      properties:
        common_count:
          type: integer
          description: 'Total mutual friends number'
        common_friends:
          type: array
          items:
            type: integer
            description: 'User ID'
            minimum: 1
        id:
          type: integer
          description: 'User ID'
      additionalProperties: false
    friends_requests:
      type: object
      properties:
        from:
          type: string
          description: 'ID of the user by whom friend has been suggested'
        mutual:
          $ref: '#/components/schemas/friends_requests_mutual'
        user_id:
          type: integer
          description: 'User ID'
          minimum: 1
          entity: owner
          format: int64
      additionalProperties: false
    friends_requests_mutual:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Total mutual friends number'
        users:
          type: array
          items:
            type: integer
            description: 'User ID'
            minimum: 1
      additionalProperties: false
    friends_requests_xtr_message:
      type: object
      properties:
        from:
          type: string
          description: 'ID of the user by whom friend has been suggested'
        message:
          type: string
          description: 'Message sent with a request'
        mutual:
          $ref: '#/components/schemas/friends_requests_mutual'
        user_id:
          type: integer
          description: 'User ID'
          minimum: 1
          entity: owner
          format: int64
      additionalProperties: false
    friends_user_xtr_phone:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/users_user_full'
        -
          properties:
            phone:
              type: string
              description: 'User phone'
      additionalProperties: false
    gifts_gift:
      type: object
      properties:
        date:
          type: integer
          description: 'Date when gist has been sent in Unixtime'
        from_id:
          type: integer
          description: 'Gift sender ID'
        gift:
          $ref: '#/components/schemas/gifts_layout'
        gift_hash:
          type: string
          description: Hash
        id:
          type: integer
          description: 'Gift ID'
        message:
          type: string
          description: 'Comment text'
        privacy:
          $ref: '#/components/schemas/gifts_gift_privacy'
      additionalProperties: false
    gifts_gift_privacy:
      type: integer
      description: 'Gift privacy'
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - 'name and message for all'
        - 'name for all'
        - 'name and message for recipient only'
    gifts_layout:
      type: object
      properties:
        id:
          type: integer
          description: 'Gift ID'
        thumb_512:
          type: string
          format: uri
          description: 'URL of the preview image with 512 px in width'
        thumb_256:
          type: string
          format: uri
          description: 'URL of the preview image with 256 px in width'
        thumb_48:
          type: string
          format: uri
          description: 'URL of the preview image with 48 px in width'
        thumb_96:
          type: string
          format: uri
          description: 'URL of the preview image with 96 px in width'
        stickers_product_id:
          type: integer
          minimum: 0
          description: 'ID of the sticker pack, if the gift is representing one'
        is_stickers_style:
          type: boolean
          description: 'Information whether gift represents a stickers style'
        build_id:
          type: string
          description: 'ID of the build of constructor gift'
        keywords:
          type: string
          description: 'Keywords used for search'
      additionalProperties: false
    groups_address:
      type: object
      properties:
        additional_address:
          type: string
          description: 'Additional address to the place (6 floor, left door)'
        address:
          type: string
          description: 'String address to the place (Nevsky, 28)'
        city_id:
          type: integer
          description: 'City id of address'
          minimum: 0
        country_id:
          type: integer
          description: 'Country id of address'
          minimum: 0
        distance:
          type: integer
          description: 'Distance from the point'
        id:
          type: integer
          description: 'Address id'
          required: true
        latitude:
          type: number
          description: 'Address latitude'
        longitude:
          type: number
          description: 'Address longitude'
        metro_station_id:
          type: integer
          description: 'Metro id of address'
          minimum: 0
        phone:
          type: string
          description: 'Address phone'
        time_offset:
          type: integer
          description: 'Time offset int minutes from utc time'
        timetable:
          description: 'Week timetable for the address'
          $ref: '#/components/schemas/groups_address_timetable'
        title:
          type: string
          description: 'Title of the place (Zinger, etc)'
        work_info_status:
          description: 'Status of information about timetable'
          $ref: '#/components/schemas/groups_address_work_info_status'
        place_id:
          type: integer
      additionalProperties: false
    groups_address_timetable:
      type: object
      description: 'Timetable for a week'
      properties:
        fri:
          description: 'Timetable for friday'
          $ref: '#/components/schemas/groups_address_timetable_day'
        mon:
          description: 'Timetable for monday'
          $ref: '#/components/schemas/groups_address_timetable_day'
        sat:
          description: 'Timetable for saturday'
          $ref: '#/components/schemas/groups_address_timetable_day'
        sun:
          description: 'Timetable for sunday'
          $ref: '#/components/schemas/groups_address_timetable_day'
        thu:
          description: 'Timetable for thursday'
          $ref: '#/components/schemas/groups_address_timetable_day'
        tue:
          description: 'Timetable for tuesday'
          $ref: '#/components/schemas/groups_address_timetable_day'
        wed:
          description: 'Timetable for wednesday'
          $ref: '#/components/schemas/groups_address_timetable_day'
      additionalProperties: false
    groups_address_timetable_day:
      type: object
      description: 'Timetable for one day'
      properties:
        break_close_time:
          type: integer
          description: 'Close time of the break in minutes'
        break_open_time:
          type: integer
          description: 'Start time of the break in minutes'
        close_time:
          type: integer
          description: 'Close time in minutes'
          required: true
        open_time:
          type: integer
          description: 'Open time in minutes'
          required: true
      additionalProperties: false
    groups_address_work_info_status:
      type: string
      description: 'Status of information about timetable'
      enum:
        - no_information
        - temporarily_closed
        - always_opened
        - timetable
        - forever_closed
    groups_addresses_info:
      type: object
      properties:
        is_enabled:
          description: 'Information whether addresses is enabled'
          type: boolean
          required: true
        main_address_id:
          type: integer
          description: 'Main address id for group'
      additionalProperties: false
    groups_ban_info:
      type: object
      properties:
        admin_id:
          type: integer
          description: 'Administrator ID'
          minimum: 1
        comment:
          type: string
          description: 'Comment for a ban'
        comment_visible:
          type: boolean
          description: 'Show comment for user'
        is_closed:
          type: boolean
        date:
          type: integer
          description: 'Date when user has been added to blacklist in Unixtime'
          minimum: 0
        end_date:
          type: integer
          description: 'Date when user will be removed from blacklist in Unixtime'
          minimum: 0
        reason:
          $ref: '#/components/schemas/groups_ban_info_reason'
      additionalProperties: false
    groups_ban_info_reason:
      type: integer
      description: 'Ban reason'
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
      enumNames:
        - other
        - spam
        - 'verbal abuse'
        - 'strong language'
        - flood
    groups_banned_item:
      type: object
      properties:
        $ref: '#/components/schemas/groups_owner_xtr_ban_info'
    groups_callback_server:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          required: true
        title:
          type: string
          required: true
        creator_id:
          type: integer
          minimum: 0
          required: true
        url:
          type: string
          required: true
        secret_key:
          type: string
          required: true
        status:
          type: string
          enum:
            - unconfigured
            - failed
            - wait
            - ok
          required: true
      additionalProperties: false
    groups_callback_settings:
      type: object
      properties:
        api_version:
          type: string
          description: 'API version used for the events'
        events:
          $ref: '#/components/schemas/groups_long_poll_events'
      additionalProperties: false
    groups_contacts_item:
      type: object
      properties:
        user_id:
          type: integer
          description: 'User ID'
          entity: owner
          format: int64
        desc:
          type: string
          description: 'Contact description'
        phone:
          type: string
          description: 'Contact phone'
        email:
          type: string
          description: 'Contact email'
      additionalProperties: false
    groups_counters_group:
      type: object
      properties:
        addresses:
          type: integer
          description: 'Addresses number'
        albums:
          type: integer
          description: 'Photo albums number'
        audios:
          type: integer
          description: 'Audios number'
        audio_playlists:
          type: integer
          description: 'Audio playlists number'
        docs:
          type: integer
          description: 'Docs number'
        market:
          type: integer
          description: 'Market items number'
        photos:
          type: integer
          description: 'Photos number'
        topics:
          type: integer
          description: 'Topics number'
        videos:
          type: integer
          description: 'Videos number'
        market_services:
          type: integer
          description: 'Market services number'
        podcasts:
          type: integer
          description: 'Podcasts number'
        articles:
          type: integer
          description: 'Articles number'
        narratives:
          type: integer
          description: 'Narratives number'
        clips:
          type: integer
          description: 'Clips number'
        clips_followers:
          type: integer
          description: 'Clips followers number'
      additionalProperties: false
    groups_cover:
      type: object
      properties:
        enabled:
          description: 'Information whether cover is enabled'
          $ref: '#/components/schemas/base_bool_int'
          required: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/base_image'
      additionalProperties: false
    groups_fields:
      type: string
      enum:
        - market
        - member_status
        - is_favorite
        - is_subscribed
        - is_subscribed_podcasts
        - can_subscribe_podcasts
        - city
        - country
        - verified
        - description
        - wiki_page
        - members_count
        - requests_count
        - counters
        - cover
        - can_post
        - can_suggest
        - can_upload_story
        - can_upload_doc
        - can_upload_video
        - can_upload_clip
        - can_see_all_posts
        - can_create_topic
        - crop_photo
        - activity
        - fixed_post
        - has_photo
        - status
        - main_album_id
        - links
        - contacts
        - site
        - main_section
        - secondary_section
        - wall
        - trending
        - can_message
        - is_market_cart_enabled
        - is_messages_blocked
        - can_send_notify
        - has_group_channel
        - group_channel
        - online_status
        - start_date
        - finish_date
        - age_limits
        - ban_info
        - action_button
        - author_id
        - phone
        - has_market_app
        - addresses
        - live_covers
        - is_adult
        - is_hidden_from_feed
        - can_subscribe_posts
        - warning_notification
        - msg_push_allowed
        - stories_archive_count
        - video_live_level
        - video_live_count
        - clips_count
        - has_unseen_stories
        - is_business
        - textlives_count
        - members_count_text
    groups_filter:
      type: string
      enum:
        - admin
        - editor
        - moder
        - advertiser
        - groups
        - publics
        - events
        - has_addresses
    groups_group:
      type: object
      properties:
        id:
          type: integer
          entity: groups
          format: int64
          description: 'Community ID'
          required: true
        name:
          type: string
          description: 'Community name'
        screen_name:
          type: string
          description: 'Domain of the community page'
        is_closed:
          $ref: '#/components/schemas/groups_group_is_closed'
        type:
          $ref: '#/components/schemas/groups_group_type'
        is_admin:
          description: 'Information whether current user is administrator'
          $ref: '#/components/schemas/base_bool_int'
        admin_level:
          $ref: '#/components/schemas/groups_group_admin_level'
        is_member:
          description: 'Information whether current user is member'
          $ref: '#/components/schemas/base_bool_int'
        is_advertiser:
          description: 'Information whether current user is advertiser'
          $ref: '#/components/schemas/base_bool_int'
        start_date:
          description: 'Start date in Unixtime format'
          type: integer
        finish_date:
          description: 'Finish date in Unixtime format'
          type: integer
        deactivated:
          type: string
          description: 'Information whether community is banned'
        photo_50:
          type: string
          format: uri
          description: 'URL of square photo of the community with 50 pixels in width'
        photo_100:
          type: string
          format: uri
          description: 'URL of square photo of the community with 100 pixels in width'
        photo_200:
          type: string
          format: uri
          description: 'URL of square photo of the community with 200 pixels in width'
        photo_200_orig:
          type: string
          format: uri
          description: 'URL of square photo of the community with 200 pixels in width original'
        photo_400:
          type: string
          format: uri
          description: 'URL of square photo of the community with 400 pixels in width'
        photo_400_orig:
          type: string
          format: uri
          description: 'URL of square photo of the community with 400 pixels in width original'
        photo_max:
          type: string
          format: uri
          description: 'URL of square photo of the community with max pixels in width'
        photo_max_orig:
          type: string
          format: uri
          description: 'URL of square photo of the community with max pixels in width original'
        est_date:
          type: string
          description: 'Established date'
        public_date_label:
          type: string
          description: 'Public date label'
        photo_max_size:
          $ref: '#/components/schemas/groups_photo_size'
        is_video_live_notifications_blocked:
          $ref: '#/components/schemas/base_bool_int'
        video_live:
          $ref: '#/components/schemas/video_live_info'
      additionalProperties: false
    groups_group_access:
      type: integer
      minimum: 0
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - open
        - closed
        - private
    groups_group_admin_level:
      type: integer
      description: "Level of current user's credentials as manager"
      enum:
        - 1
        - 2
        - 3
      enumNames:
        - moderator
        - editor
        - administrator
    groups_group_age_limits:
      type: integer
      default: 1
      minimum: 0
      enumNames:
        - unlimited
        - '16 plus'
        - '18 plus'
      enum:
        - 1
        - 2
        - 3
    groups_group_attach:
      type: object
      properties:
        id:
          type: integer
          description: 'group ID'
          minimum: 0
          required: true
        text:
          type: string
          description: 'text of attach'
          required: true
        status:
          type: string
          description: 'activity or category of group'
          required: true
        size:
          type: integer
          description: 'size of group'
          required: true
        is_favorite:
          type: boolean
          description: 'is favorite'
          required: true
      additionalProperties: false
    groups_group_audio:
      type: integer
      minimum: 0
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - disabled
        - open
        - limited
    groups_group_ban_info:
      type: object
      properties:
        comment:
          type: string
          description: 'Ban comment'
        end_date:
          type: integer
          description: 'End date of ban in Unixtime'
        reason:
          $ref: '#/components/schemas/groups_ban_info_reason'
      additionalProperties: false
    groups_group_category:
      type: object
      properties:
        id:
          type: integer
          description: 'Category ID'
          minimum: 0
          required: true
        name:
          type: string
          description: 'Category name'
          required: true
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/base_object_with_name'
      additionalProperties: false
    groups_group_category_full:
      type: object
      properties:
        id:
          type: integer
          description: 'Category ID'
          minimum: 0
          required: true
        name:
          type: string
          description: 'Category name'
          required: true
        page_count:
          type: integer
          description: 'Pages number'
          required: true
        page_previews:
          type: array
          items:
            $ref: '#/components/schemas/groups_group'
          required: true
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/groups_group_category'
      additionalProperties: false
    groups_group_category_type:
      type: object
      properties:
        id:
          type: integer
          required: true
        name:
          type: string
          required: true
      additionalProperties: false
    groups_group_docs:
      type: integer
      minimum: 0
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - disabled
        - open
        - limited
    groups_group_full:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/groups_group'
        -
          properties:
            market:
              $ref: '#/components/schemas/groups_market_info'
            member_status:
              $ref: '#/components/schemas/groups_group_full_member_status'
              description: "Current user's member status"
            is_adult:
              description: 'Information whether community is adult'
              $ref: '#/components/schemas/base_bool_int'
            is_hidden_from_feed:
              description: "Information whether community is hidden from current user's newsfeed"
              $ref: '#/components/schemas/base_bool_int'
            is_favorite:
              description: 'Information whether community is in faves'
              $ref: '#/components/schemas/base_bool_int'
            is_subscribed:
              description: 'Information whether current user is subscribed'
              $ref: '#/components/schemas/base_bool_int'
            city:
              $ref: '#/components/schemas/base_object'
            country:
              $ref: '#/components/schemas/base_country'
            verified:
              description: 'Information whether community is verified'
              $ref: '#/components/schemas/base_bool_int'
            description:
              type: string
              description: 'Community description'
            wiki_page:
              type: string
              description: "Community's main wiki page title"
            members_count:
              type: integer
              minimum: 0
              description: 'Community members number'
            members_count_text:
              type: string
              description: 'Info about number of users in group'
            requests_count:
              type: integer
              minimum: 0
              description: 'The number of incoming requests to the community'
            video_live_level:
              type: integer
              description: 'Community level live streams achievements'
              minimum: 0
            video_live_count:
              type: integer
              description: "Number of community's live streams"
              minimum: 0
            clips_count:
              type: integer
              description: "Number of community's clips"
              minimum: 0
            counters:
              $ref: '#/components/schemas/groups_counters_group'
            cover:
              $ref: '#/components/schemas/groups_cover'
            can_post:
              description: "Information whether current user can post on community's wall"
              $ref: '#/components/schemas/base_bool_int'
            can_suggest:
              $ref: '#/components/schemas/base_bool_int'
            can_upload_story:
              description: 'Information whether current user can upload story'
              $ref: '#/components/schemas/base_bool_int'
            can_upload_doc:
              description: 'Information whether current user can upload doc'
              $ref: '#/components/schemas/base_bool_int'
            can_upload_video:
              description: 'Information whether current user can upload video'
              $ref: '#/components/schemas/base_bool_int'
            can_see_all_posts:
              description: "Information whether current user can see all posts on community's wall"
              $ref: '#/components/schemas/base_bool_int'
            can_create_topic:
              description: 'Information whether current user can create topic'
              $ref: '#/components/schemas/base_bool_int'
            activity:
              type: string
              description: 'Type of group, start date of event or category of public page'
            fixed_post:
              type: integer
              description: 'Fixed post ID'
            has_photo:
              description: 'Information whether community has photo'
              $ref: '#/components/schemas/base_bool_int'
            crop_photo:
              description: 'Данные о точках, по которым вырезаны профильная и миниатюрная фотографии сообщества'
              $ref: '#/components/schemas/base_crop_photo'
            status:
              type: string
              description: 'Community status'
            status_audio:
              $ref: '#/components/schemas/audio_audio'
            main_album_id:
              type: integer
              description: "Community's main photo album ID"
            links:
              type: array
              items:
                $ref: '#/components/schemas/groups_links_item'
            contacts:
              type: array
              items:
                $ref: '#/components/schemas/groups_contacts_item'
            wall:
              type: integer
              description: 'Information about wall status in community'
              enum:
                - 0
                - 1
                - 2
                - 3
              enumNames:
                - disabled
                - open
                - limited
                - restricted
            site:
              type: string
              description: "Community's website"
            main_section:
              $ref: '#/components/schemas/groups_group_full_section'
            secondary_section:
              $ref: '#/components/schemas/groups_group_full_section'
            trending:
              $ref: '#/components/schemas/base_bool_int'
              description: 'Information whether the community has a "fire" pictogram.'
            can_message:
              description: 'Information whether current user can send a message to community'
              $ref: '#/components/schemas/base_bool_int'
            is_messages_blocked:
              description: 'Information whether community can send a message to current user'
              $ref: '#/components/schemas/base_bool_int'
            can_send_notify:
              description: 'Information whether community can send notifications by phone number to current user'
              $ref: '#/components/schemas/base_bool_int'
            online_status:
              $ref: '#/components/schemas/groups_online_status'
              description: 'Status of replies in community messages'
            invited_by:
              type: integer
              description: 'Inviter ID'
              minimum: 1
            age_limits:
              $ref: '#/components/schemas/groups_group_full_age_limits'
              description: 'Information whether age limit'
            ban_info:
              $ref: '#/components/schemas/groups_group_ban_info'
              description: 'User ban info'
            has_market_app:
              type: boolean
              description: 'Information whether community has installed market app'
            using_vkpay_market_app:
              type: boolean
            has_group_channel:
              type: boolean
            addresses:
              $ref: '#/components/schemas/groups_addresses_info'
              description: 'Info about addresses in groups'
            is_subscribed_podcasts:
              description: 'Information whether current user is subscribed to podcasts'
              type: boolean
            can_subscribe_podcasts:
              description: 'Owner in whitelist or not'
              type: boolean
            can_subscribe_posts:
              description: 'Can subscribe to wall'
              type: boolean
            live_covers:
              description: 'Live covers state'
              $ref: '#/components/schemas/groups_live_covers'
            stories_archive_count:
              type: integer
            has_unseen_stories:
              type: boolean
      additionalProperties: false
    groups_group_full_age_limits:
      type: integer
      enum:
        - 1
        - 2
        - 3
      enumNames:
        - 'no'
        - 'over 16'
        - 'over 18'
    groups_group_full_member_status:
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
      enumNames:
        - 'not a member'
        - member
        - 'not sure'
        - declined
        - 'has sent a request'
        - invited
    groups_group_full_section:
      type: integer
      description: 'Main section of community'
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
        - 16
        - 24
        - 26
        - 27
        - 31
        - 32
        - 33
        - 34
        - 35
        - 36
        - 37
        - 39
        - 40
        - 41
        - 42
        - 43
        - 44
        - 45
        - 46
        - 47
        - 48
        - 49
        - 50
        - 51
        - 53
        - 54
        - 55
        - 57
        - 58
      enumNames:
        - none
        - photos
        - topics
        - audios
        - videos
        - market
        - stories
        - apps
        - followers
        - links
        - events
        - places
        - contacts
        - app_btns
        - docs
        - event_counters
        - group_messages
        - albums
        - categories
        - admin_help
        - app_widget
        - public_help
        - hs_donation_app
        - hs_market_app
        - addresses
        - artist_page
        - podcast
        - articles
        - admin_tips
        - menu
        - fixed_post
        - chats
        - evergreen_notice
        - musicians
        - narratives
        - donut_donate
        - clips
        - market_cart
        - curators
        - market_services
        - classifieds
        - textlives
        - donut_for_dons
        - badges
        - chats_creation
    groups_group_is_closed:
      type: integer
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - open
        - closed
        - private
      description: 'Information whether community is closed'
    groups_group_market_currency:
      type: integer
      minimum: 0
      enum:
        - 643
        - 980
        - 398
        - 978
        - 840
      enumNames:
        - 'russian rubles'
        - 'ukrainian hryvnia'
        - 'kazakh tenge'
        - euro
        - 'us dollars'
    groups_group_photos:
      type: integer
      minimum: 0
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - disabled
        - open
        - limited
    groups_group_public_category_list:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/groups_group_category_type'
      additionalProperties: false
    groups_group_role:
      type: string
      enum:
        - moderator
        - editor
        - administrator
        - advertiser
    groups_group_subject:
      type: string
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
        - 16
        - 17
        - 18
        - 19
        - 20
        - 21
        - 22
        - 23
        - 24
        - 25
        - 26
        - 27
        - 28
        - 29
        - 30
        - 31
        - 32
        - 33
        - 34
        - 35
        - 36
        - 37
        - 38
        - 39
        - 40
        - 41
        - 42
      enumNames:
        - auto
        - 'activity holidays'
        - business
        - pets
        - health
        - 'dating and communication'
        - games
        - it
        - cinema
        - 'beauty and fashion'
        - cooking
        - 'art and culture'
        - literature
        - 'mobile services and internet'
        - music
        - 'science and technology'
        - 'real estate'
        - 'news and media'
        - security
        - education
        - 'home and renovations'
        - politics
        - food
        - industry
        - travel
        - work
        - entertainment
        - religion
        - family
        - sports
        - insurance
        - television
        - 'goods and services'
        - hobbies
        - finance
        - photo
        - esoterics
        - 'electronics and appliances'
        - erotic
        - humor
        - society_humanities
        - 'design and graphics'
    groups_group_suggested_privacy:
      type: integer
      minimum: 0
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - none
        - all
        - subscribers
    groups_group_tag:
      type: object
      properties:
        id:
          type: integer
          required: true
        name:
          type: string
          required: true
        color:
          type: string
          enum:
            - '454647'
            - 45678f
            - 4bb34b
            - 5181b8
            - 539b9c
            - 5c9ce6
            - 63b9ba
            - 6bc76b
            - 76787a
            - 792ec0
            - 7a6c4f
            - 7ececf
            - 9e8d6b
            - a162de
            - aaaeb3
            - bbaa84
            - e64646
            - ff5c5c
            - ffa000
            - ffc107
          required: true
        uses:
          type: integer
      additionalProperties: false
    groups_group_topics:
      type: integer
      minimum: 0
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - disabled
        - open
        - limited
    groups_group_type:
      type: string
      description: 'Community type'
      enum:
        - group
        - page
        - event
    groups_group_video:
      type: integer
      minimum: 0
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - disabled
        - open
        - limited
    groups_group_wall:
      type: integer
      minimum: 0
      enum:
        - 0
        - 1
        - 2
        - 3
      enumNames:
        - disabled
        - open
        - limited
        - closed
    groups_group_wiki:
      type: integer
      minimum: 0
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - disabled
        - open
        - limited
    groups_groups_array:
      type: object
      properties:
        count:
          type: integer
          description: 'Communities number'
          minimum: 0
          required: true
        items:
          type: array
          items:
            type: integer
            description: 'Community ID'
            entity: owner
            format: int64
          required: true
      additionalProperties: false
    groups_links_item:
      type: object
      properties:
        name:
          type: string
          description: 'Link title'
        desc:
          type: string
          description: 'Link description'
        edit_title:
          description: 'Information whether the link title can be edited'
          $ref: '#/components/schemas/base_bool_int'
        id:
          type: integer
          description: 'Link ID'
        photo_100:
          type: string
          format: uri
          description: 'URL of square image of the link with 100 pixels in width'
        photo_50:
          type: string
          format: uri
          description: 'URL of square image of the link with 50 pixels in width'
        url:
          type: string
          format: uri
          description: 'Link URL'
        image_processing:
          description: 'Information whether the image on processing'
          $ref: '#/components/schemas/base_bool_int'
      additionalProperties: false
    groups_live_covers:
      type: object
      properties:
        is_enabled:
          description: 'Information whether live covers is enabled'
          type: boolean
          required: true
        is_scalable:
          description: 'Information whether live covers photo scaling is enabled'
          type: boolean
        story_ids:
          type: array
          items:
            type: string
      additionalProperties: false
    groups_long_poll_events:
      type: object
      properties:
        audio_new:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        board_post_delete:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        board_post_edit:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        board_post_new:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        board_post_restore:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        group_change_photo:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        group_change_settings:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        group_join:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        group_leave:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        group_officers_edit:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        lead_forms_new:
          $ref: '#/components/schemas/base_bool_int'
        market_comment_delete:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        market_comment_edit:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        market_comment_new:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        market_comment_restore:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        market_order_new:
          $ref: '#/components/schemas/base_bool_int'
        market_order_edit:
          $ref: '#/components/schemas/base_bool_int'
        message_allow:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        message_deny:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        message_new:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        message_read:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        message_reply:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        message_typing_state:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        message_edit:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        photo_comment_delete:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        photo_comment_edit:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        photo_comment_new:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        photo_comment_restore:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        photo_new:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        poll_vote_new:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        user_block:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        user_unblock:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        video_comment_delete:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        video_comment_edit:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        video_comment_new:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        video_comment_restore:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        video_new:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        wall_post_new:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        wall_reply_delete:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        wall_reply_edit:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        wall_reply_new:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        wall_reply_restore:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        wall_repost:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        donut_subscription_create:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        donut_subscription_prolonged:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        donut_subscription_cancelled:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        donut_subscription_expired:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        donut_subscription_price_changed:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        donut_money_withdraw:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        donut_money_withdraw_error:
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    groups_long_poll_server:
      type: object
      properties:
        key:
          type: string
          description: 'Long Poll key'
          required: true
        server:
          type: string
          description: 'Long Poll server address'
          required: true
        ts:
          type: string
          description: 'Number of the last event'
          required: true
      additionalProperties: false
    groups_long_poll_settings:
      type: object
      properties:
        api_version:
          type: string
          description: 'API version used for the events'
        events:
          $ref: '#/components/schemas/groups_long_poll_events'
          required: true
        is_enabled:
          type: boolean
          description: 'Shows whether Long Poll is enabled'
          required: true
      additionalProperties: false
    groups_market_info:
      type: object
      properties:
        type:
          type: string
          description: 'Market type'
        contact_id:
          type: integer
          description: 'Contact person ID'
        currency:
          $ref: '#/components/schemas/market_currency'
        currency_text:
          type: string
          description: 'Currency name'
        enabled:
          description: 'Information whether the market is enabled'
          $ref: '#/components/schemas/base_bool_int'
        main_album_id:
          type: integer
          description: 'Main market album ID'
        price_max:
          type: string
          description: 'Maximum price'
        price_min:
          type: string
          description: 'Minimum price'
        min_order_price:
          $ref: '#/components/schemas/market_price'
      additionalProperties: false
    groups_market_state:
      type: string
      description: 'Declares state if market is enabled in group.'
      enum:
        - none
        - basic
        - advanced
    groups_member_role:
      type: object
      properties:
        id:
          type: integer
          description: 'User ID'
          required: true
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/groups_member_role_permission'
        role:
          $ref: '#/components/schemas/groups_member_role_status'
      additionalProperties: false
    groups_member_role_permission:
      type: string
      enum:
        - ads
    groups_member_role_status:
      type: string
      description: "User's credentials as community admin"
      enum:
        - moderator
        - editor
        - administrator
        - creator
        - advertiser
    groups_member_status:
      type: object
      properties:
        member:
          description: 'Information whether user is a member of the group'
          $ref: '#/components/schemas/base_bool_int'
          required: true
        user_id:
          type: integer
          description: 'User ID'
          minimum: 1
          entity: owner
          format: int64
          required: true
      additionalProperties: false
    groups_member_status_full:
      type: object
      properties:
        can_invite:
          description: 'Information whether user can be invited'
          $ref: '#/components/schemas/base_bool_int'
        can_recall:
          description: "Information whether user's invite to the group can be recalled"
          $ref: '#/components/schemas/base_bool_int'
        invitation:
          description: 'Information whether user has been invited to the group'
          $ref: '#/components/schemas/base_bool_int'
        member:
          description: 'Information whether user is a member of the group'
          $ref: '#/components/schemas/base_bool_int'
          required: true
        request:
          description: 'Information whether user has send request to the group'
          $ref: '#/components/schemas/base_bool_int'
        user_id:
          type: integer
          description: 'User ID'
          minimum: 1
          entity: owner
          format: int64
          required: true
      additionalProperties: false
    groups_online_status:
      type: object
      description: 'Online status of group'
      properties:
        minutes:
          type: integer
          description: 'Estimated time of answer (for status = answer_mark)'
        status:
          $ref: '#/components/schemas/groups_online_status_type'
          required: true
      additionalProperties: false
    groups_online_status_type:
      type: string
      description: 'Type of online status of group'
      enum:
        - none
        - online
        - answer_mark
    groups_owner_xtr_ban_info:
      type: object
      properties:
        ban_info:
          $ref: '#/components/schemas/groups_ban_info'
        group:
          $ref: '#/components/schemas/groups_group'
          description: 'Information about group if type = group'
        profile:
          $ref: '#/components/schemas/users_user'
          description: 'Information about group if type = profile'
        type:
          $ref: '#/components/schemas/groups_owner_xtr_ban_info_type'
      additionalProperties: false
    groups_owner_xtr_ban_info_type:
      type: string
      description: 'Owner type'
      enum:
        - group
        - profile
    groups_photo_size:
      type: object
      properties:
        height:
          type: integer
          description: 'Image height'
          minimum: 0
          required: true
        width:
          type: integer
          description: 'Image width'
          minimum: 0
          required: true
      additionalProperties: false
    groups_role_options:
      type: string
      description: "User's credentials as community admin"
      enum:
        - moderator
        - editor
        - administrator
        - creator
    groups_sections_list_item:
      type: array
      maxItems: 2
      minItems: 2
      description: '(index, title) tuples'
      items:
        type:
          - integer
          - string
    groups_settings_twitter:
      type: object
      properties:
        status:
          type: string
          enum:
            - loading
            - sync
          required: true
        name:
          type: string
      additionalProperties: false
    groups_subject_item:
      type: object
      properties:
        id:
          type: integer
          description: 'Subject ID'
          required: true
        name:
          type: string
          description: 'Subject title'
          required: true
      additionalProperties: false
    groups_token_permission_setting:
      type: object
      properties:
        name:
          type: string
          required: true
        setting:
          type: integer
          minimum: 0
          required: true
      additionalProperties: false
    groups_user_xtr_role:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/users_user_full'
        -
          properties:
            role:
              $ref: '#/components/schemas/groups_role_options'
      additionalProperties: false
    leadForms_answer:
      type: object
      properties:
        key:
          type: string
          required: true
        answer:
          oneOf:
            -
              $ref: '#/components/schemas/leadForms_answer_item'
            -
              type: array
              items:
                $ref: '#/components/schemas/leadForms_answer_item'
          required: true
      additionalProperties: false
    leadForms_answer_item:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
          required: true
      additionalProperties: false
    leadForms_form:
      type: object
      properties:
        form_id:
          type: integer
          required: true
        group_id:
          type: integer
          entity: groups
          format: int64
          required: true
        photo:
          type: string
        name:
          type: string
        title:
          type: string
        description:
          type: string
        confirmation:
          type: string
        site_link_url:
          type: string
          format: uri
        policy_link_url:
          type: string
          format: uri
        questions:
          type: array
          items:
            $ref: '#/components/schemas/leadForms_question_item'
        active:
          $ref: '#/components/schemas/base_bool_int'
        leads_count:
          type: integer
          required: true
        pixel_code:
          type: string
        once_per_user:
          type: integer
        notify_admins:
          type: string
        notify_emails:
          type: string
        url:
          type: string
          format: uri
          required: true
      additionalProperties: false
    leadForms_lead:
      type: object
      properties:
        lead_id:
          type: integer
          required: true
        user_id:
          type: integer
          entity: owner
          format: int64
          required: true
        date:
          type: integer
          required: true
        answers:
          type: array
          items:
            $ref: '#/components/schemas/leadForms_answer'
          required: true
        ad_id:
          type: integer
      additionalProperties: false
    leadForms_question_item:
      type: object
      properties:
        key:
          type: string
          required: true
        type:
          type: string
          enum:
            - input
            - textarea
            - radio
            - checkbox
            - select
          required: true
        label:
          type: string
        options:
          description: 'Опции выбора для типов radio, checkbox, select'
          type: array
          items:
            $ref: '#/components/schemas/leadForms_question_item_option'
      additionalProperties: false
    leadForms_question_item_option:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
          required: true
      additionalProperties: false
    likes_type:
      type: string
      enum:
        - post
        - comment
        - photo
        - audio
        - video
        - note
        - market
        - photo_comment
        - video_comment
        - topic_comment
        - market_comment
        - sitepage
        - textpost
    link_target_object:
      type: object
      properties:
        type:
          type: string
          description: 'Object type'
        owner_id:
          type: integer
          description: 'Owner ID'
          entity: owner
          format: int64
        item_id:
          type: integer
          description: 'Item ID'
      additionalProperties: false
    market_currency:
      type: object
      properties:
        id:
          type: integer
          description: 'Currency ID'
          minimum: 0
          required: true
        name:
          type: string
          description: 'Currency sign'
          required: true
        title:
          type: string
          description: 'Currency title'
          required: true
      additionalProperties: false
    market_market_album:
      type: object
      properties:
        id:
          type: integer
          description: 'Market album ID'
          minimum: 1
          required: true
        owner_id:
          type: integer
          description: "Market album owner's ID"
          entity: owner
          format: int64
          required: true
        title:
          type: string
          description: 'Market album title'
          required: true
        count:
          type: integer
          description: 'Items number'
          minimum: 0
          required: true
        is_main:
          type: boolean
          description: 'Is album main for owner'
        is_hidden:
          type: boolean
          description: 'Is album hidden'
        photo:
          $ref: '#/components/schemas/photos_photo'
        updated_time:
          type: integer
          description: 'Date when album has been updated last time in Unixtime'
          minimum: 0
          required: true
      additionalProperties: false
    market_market_category:
      type: object
      properties:
        $ref: '#/components/schemas/market_market_category_old'
    market_market_category_nested:
      type: object
      properties:
        id:
          type: integer
          description: 'Category ID'
          required: true
        name:
          type: string
          description: 'Category name'
          required: true
        parent:
          $ref: '#/components/schemas/market_market_category_nested'
      additionalProperties: false
    market_market_category_old:
      type: object
      properties:
        id:
          type: integer
          description: 'Category ID'
          required: true
        name:
          type: string
          description: 'Category name'
          required: true
        section:
          $ref: '#/components/schemas/market_section'
          required: true
      additionalProperties: false
    market_market_category_tree:
      type: object
      properties:
        id:
          type: integer
          description: 'Category ID'
          required: true
        name:
          type: string
          description: 'Category name'
          required: true
        children:
          type: array
          items:
            $ref: '#/components/schemas/market_market_category_tree'
      additionalProperties: false
    market_market_item:
      type: object
      properties:
        access_key:
          type: string
          description: 'Access key for the market item'
        availability:
          $ref: '#/components/schemas/market_market_item_availability'
          required: true
        button_title:
          type: string
          description: 'Title for button for url'
        category:
          $ref: '#/components/schemas/market_market_category'
          required: true
        date:
          type: integer
          description: 'Date when the item has been created in Unixtime'
          minimum: 0
        description:
          type: string
          description: 'Item description'
          required: true
        external_id:
          type: string
        id:
          type: integer
          description: 'Item ID'
          minimum: 0
          required: true
        is_favorite:
          type: boolean
        owner_id:
          type: integer
          entity: owner
          description: "Item owner's ID"
          format: int64
          required: true
        price:
          $ref: '#/components/schemas/market_price'
          required: true
        thumb_photo:
          type: string
          format: uri
          description: 'URL of the preview image'
        title:
          type: string
          description: 'Item title'
          required: true
        url:
          type: string
          format: uri
          description: 'URL to item'
        variants_grouping_id:
          type: integer
          minimum: 0
        is_main_variant:
          type: boolean
        sku:
          type: string
          maxLength: 50
      additionalProperties: false
    market_market_item_availability:
      type: integer
      description: 'Information whether the item is available'
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - available
        - removed
        - unavailable
    market_market_item_full:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/market_market_item'
        -
          properties:
            albums_ids:
              type: array
              items:
                type: integer
            photos:
              type: array
              items:
                $ref: '#/components/schemas/photos_photo'
            can_comment:
              description: 'Information whether current use can comment the item'
              $ref: '#/components/schemas/base_bool_int'
            can_repost:
              description: 'Information whether current use can repost the item'
              $ref: '#/components/schemas/base_bool_int'
            likes:
              $ref: '#/components/schemas/base_likes'
            reposts:
              $ref: '#/components/schemas/base_reposts_info'
            views_count:
              type: integer
              description: 'Views number'
            wishlist_item_id:
              type: integer
              description: 'Object identifier in wishlist of viewer'
            cancel_info:
              description: 'Information for cancel and revert order'
              $ref: '#/components/schemas/base_link'
            user_agreement_info:
              description: 'User agreement info'
              type: string
            ad_id:
              description: 'Contains ad ID if it has'
              type: integer
      additionalProperties: false
    market_order:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          required: true
        group_id:
          type: integer
          minimum: 0
          entity: groups
          format: int64
          required: true
        user_id:
          type: integer
          minimum: 0
          entity: owner
          format: int64
          required: true
        display_order_id:
          type: string
        date:
          type: integer
          minimum: 0
          required: true
        status:
          type: integer
          minimum: 0
          required: true
        items_count:
          type: integer
          minimum: 0
          required: true
        track_number:
          type: string
        track_link:
          type: string
        comment:
          type: string
        address:
          type: string
        merchant_comment:
          type: string
        weight:
          type: integer
          minimum: 0
        total_price:
          $ref: '#/components/schemas/market_price'
          required: true
        preview_order_items:
          type: array
          description: 'Several order items for preview'
          items:
            $ref: '#/components/schemas/market_order_item'
        cancel_info:
          description: 'Information for cancel and revert order'
          $ref: '#/components/schemas/base_link'
      additionalProperties: false
    market_order_item:
      type: object
      properties:
        owner_id:
          type: integer
          entity: owner
          format: int64
          required: true
        item_id:
          type: integer
          required: true
        price:
          $ref: '#/components/schemas/market_price'
          required: true
        quantity:
          type: integer
          minimum: 0
          required: true
        item:
          $ref: '#/components/schemas/market_market_item'
          required: true
        title:
          type: string
        photo:
          $ref: '#/components/schemas/photos_photo'
        variants:
          type: array
          items:
            type: string
      additionalProperties: false
    market_price:
      type: object
      properties:
        amount:
          type: string
          description: Amount
          required: true
        currency:
          $ref: '#/components/schemas/market_currency'
          required: true
        discount_rate:
          type: integer
        old_amount:
          type: string
        text:
          type: string
          description: Text
          required: true
        old_amount_text:
          type: string
          description: 'Textual representation of old price'
      additionalProperties: false
    market_section:
      type: object
      properties:
        id:
          type: integer
          description: 'Section ID'
          minimum: 0
          required: true
        name:
          type: string
          description: 'Section name'
          required: true
      additionalProperties: false
    market_services_view_type:
      type: integer
      description: 'Type of view. 1 - cards, 2 - rows'
      enum:
        - 1
        - 2
      enumNames:
        - cards
        - rows
    messages_audio_message:
      type: object
      properties:
        access_key:
          type: string
          description: 'Access key for audio message'
        transcript_error:
          type: integer
          minimum: 1
          maximum: 11
        duration:
          type: integer
          description: 'Audio message duration in seconds'
          minimum: 0
          required: true
        id:
          type: integer
          description: 'Audio message ID'
          minimum: 0
          required: true
        link_mp3:
          type: string
          format: uri
          description: 'MP3 file URL'
          required: true
        link_ogg:
          type: string
          format: uri
          description: 'OGG file URL'
          required: true
        owner_id:
          type: integer
          description: 'Audio message owner ID'
          entity: owner
          format: int64
          required: true
        waveform:
          type: array
          items:
            type: integer
            description: 'Sound visualisation'
            minimum: 0
          required: true
      additionalProperties: false
    messages_chat:
      type: object
      properties:
        admin_id:
          type: integer
          format: int64
          entity: owner
          description: 'Chat creator ID'
          required: true
        id:
          type: integer
          description: 'Chat ID'
          required: true
        kicked:
          description: 'Shows that user has been kicked from the chat'
          $ref: '#/components/schemas/base_bool_int'
        left:
          description: 'Shows that user has been left the chat'
          $ref: '#/components/schemas/base_bool_int'
        photo_100:
          type: string
          format: uri
          description: 'URL of the preview image with 100 px in width'
        photo_200:
          type: string
          format: uri
          description: 'URL of the preview image with 200 px in width'
        photo_50:
          type: string
          format: uri
          description: 'URL of the preview image with 50 px in width'
        push_settings:
          $ref: '#/components/schemas/messages_chat_push_settings'
        title:
          type: string
          description: 'Chat title'
        type:
          type: string
          description: 'Chat type'
          required: true
        users:
          type: array
          items:
            type: integer
            format: int64
            entity: owner
            description: 'User ID'
          required: true
        is_default_photo:
          type: boolean
          description: 'If provided photo is default'
        members_count:
          type: integer
          description: 'Count members in a chat'
          required: true
        is_group_channel:
          type: boolean
          description: 'If chat is group channel'
      additionalProperties: false
    messages_chat_full:
      type: object
      properties:
        admin_id:
          type: integer
          format: int64
          entity: owner
          description: 'Chat creator ID'
          required: true
        id:
          type: integer
          description: 'Chat ID'
          required: true
        kicked:
          description: 'Shows that user has been kicked from the chat'
          $ref: '#/components/schemas/base_bool_int'
        left:
          description: 'Shows that user has been left the chat'
          $ref: '#/components/schemas/base_bool_int'
        photo_100:
          type: string
          format: uri
          description: 'URL of the preview image with 100 px in width'
        photo_200:
          type: string
          format: uri
          description: 'URL of the preview image with 200 px in width'
        photo_50:
          type: string
          format: uri
          description: 'URL of the preview image with 50 px in width'
        push_settings:
          $ref: '#/components/schemas/messages_chat_push_settings'
        title:
          type: string
          description: 'Chat title'
        type:
          type: string
          description: 'Chat type'
          required: true
        users:
          type: array
          items:
            $ref: '#/components/schemas/messages_user_xtr_invited_by'
          required: true
      additionalProperties: false
    messages_chat_preview:
      type: object
      properties:
        admin_id:
          type: integer
          format: int64
          entity: owner
          minimum: 0
        joined:
          type: boolean
        local_id:
          type: integer
        members:
          type: array
          items:
            type: integer
            format: int64
            entity: owner
        members_count:
          type: integer
          minimum: 0
        title:
          type: string
        is_member:
          type: boolean
        photo:
          $ref: '#/components/schemas/messages_chat_settings_photo'
        is_don:
          type: boolean
        is_group_channel:
          type: boolean
        button:
          $ref: '#/components/schemas/base_link_button'
      additionalProperties: false
    messages_chat_push_settings:
      type: object
      properties:
        disabled_until:
          type: integer
          description: 'Time until that notifications are disabled'
        sound:
          description: 'Information whether the sound is on'
          $ref: '#/components/schemas/base_bool_int'
      additionalProperties: false
    messages_chat_restrictions:
      type: object
      properties:
        admins_promote_users:
          type: boolean
          description: 'Only admins can promote users to admins'
        only_admins_edit_info:
          type: boolean
          description: 'Only admins can change chat info'
        only_admins_edit_pin:
          type: boolean
          description: 'Only admins can edit pinned message'
        only_admins_invite:
          type: boolean
          description: 'Only admins can invite users to this chat'
        only_admins_kick:
          type: boolean
          description: 'Only admins can kick users from this chat'
      additionalProperties: false
    messages_chat_settings:
      type: object
      properties:
        members_count:
          type: integer
        friends_count:
          type: integer
        owner_id:
          type: integer
          entity: owner
          format: int64
          required: true
        title:
          type: string
          description: 'Chat title'
          required: true
        pinned_message:
          $ref: '#/components/schemas/messages_pinned_message'
        state:
          $ref: '#/components/schemas/messages_chat_settings_state'
          required: true
        photo:
          $ref: '#/components/schemas/messages_chat_settings_photo'
        admin_ids:
          type: array
          description: 'Ids of chat admins'
          items:
            type: integer
            format: int64
            entity: owner
            description: 'Admin id'
        active_ids:
          type: array
          items:
            type: integer
            format: int64
            entity: owner
            description: 'Active member ID'
          required: true
        is_group_channel:
          type: boolean
        acl:
          $ref: '#/components/schemas/messages_chat_settings_acl'
          required: true
        permissions:
          $ref: '#/components/schemas/messages_chat_settings_permissions'
        is_disappearing:
          type: boolean
        theme:
          type: string
        disappearing_chat_link:
          type: string
        is_service:
          type: boolean
      additionalProperties: false
    messages_chat_settings_acl:
      type: object
      properties:
        can_change_info:
          type: boolean
          description: 'Can you change photo, description and name'
          required: true
        can_change_invite_link:
          type: boolean
          description: 'Can you change invite link for this chat'
          required: true
        can_change_pin:
          type: boolean
          description: 'Can you pin/unpin message for this chat'
          required: true
        can_invite:
          type: boolean
          description: 'Can you invite other peers in chat'
          required: true
        can_promote_users:
          type: boolean
          description: 'Can you promote simple users to chat admins'
          required: true
        can_see_invite_link:
          type: boolean
          description: 'Can you see invite link for this chat'
          required: true
        can_moderate:
          type: boolean
          description: "Can you moderate (delete) other users' messages"
          required: true
        can_copy_chat:
          type: boolean
          description: 'Can you copy chat'
          required: true
        can_call:
          type: boolean
          description: 'Can you init group call in the chat'
          required: true
        can_use_mass_mentions:
          type: boolean
          description: 'Can you use mass mentions'
          required: true
        can_change_service_type:
          type: boolean
          description: 'Can you change chat service type'
      additionalProperties: false
    messages_chat_settings_permissions:
      type: object
      properties:
        invite:
          type: string
          description: 'Who can invite users to chat'
          enum:
            - owner
            - owner_and_admins
            - all
        change_info:
          type: string
          description: 'Who can change chat info'
          enum:
            - owner
            - owner_and_admins
            - all
        change_pin:
          type: string
          description: 'Who can change pinned message'
          enum:
            - owner
            - owner_and_admins
            - all
        use_mass_mentions:
          type: string
          description: 'Who can use mass mentions'
          enum:
            - owner
            - owner_and_admins
            - all
        see_invite_link:
          type: string
          description: 'Who can see invite link'
          enum:
            - owner
            - owner_and_admins
            - all
        call:
          type: string
          description: 'Who can make calls'
          enum:
            - owner
            - owner_and_admins
            - all
        change_admins:
          type: string
          description: 'Who can change admins'
          enum:
            - owner
            - owner_and_admins
      additionalProperties: false
    messages_chat_settings_photo:
      type: object
      properties:
        photo_50:
          type: string
          format: uri
          description: 'URL of the preview image with 50px in width'
        photo_100:
          type: string
          format: uri
          description: 'URL of the preview image with 100px in width'
        photo_200:
          type: string
          format: uri
          description: 'URL of the preview image with 200px in width'
        is_default_photo:
          type: boolean
          description: 'If provided photo is default'
        is_default_call_photo:
          type: boolean
          description: 'If provided photo is default call photo'
      additionalProperties: false
    messages_chat_settings_state:
      type: string
      enum:
        - in
        - kicked
        - left
    messages_conversation:
      type: object
      properties:
        peer:
          $ref: '#/components/schemas/messages_conversation_peer'
          required: true
        sort_id:
          $ref: '#/components/schemas/messages_conversation_sort_id'
        last_message_id:
          type: integer
          minimum: 0
          description: 'ID of the last message in conversation'
          required: true
        last_conversation_message_id:
          type: integer
          minimum: 0
          description: 'Conversation message ID of the last message in conversation'
        in_read:
          type: integer
          minimum: 0
          description: 'Last message user have read'
          required: true
        out_read:
          type: integer
          minimum: 0
          description: 'Last outcoming message have been read by the opponent'
          required: true
        unread_count:
          type: integer
          minimum: 0
          description: 'Unread messages number'
        is_marked_unread:
          type: boolean
          description: 'Is this conversation uread'
        out_read_by:
          $ref: '#/components/schemas/messages_out_read_by'
        important:
          type: boolean
        unanswered:
          type: boolean
        special_service_type:
          type: string
          enum:
            - business_notify
        message_request_data:
          $ref: '#/components/schemas/messages_message_request_data'
        mentions:
          type: array
          description: 'Ids of messages with mentions'
          items:
            type: integer
            description: 'Message id of message with mention'
        current_keyboard:
          $ref: '#/components/schemas/messages_keyboard'
        push_settings:
          $ref: '#/components/schemas/messages_push_settings'
        can_write:
          $ref: '#/components/schemas/messages_conversation_can_write'
        chat_settings:
          $ref: '#/components/schemas/messages_chat_settings'
      additionalProperties: false
    messages_conversation_can_write:
      type: object
      properties:
        allowed:
          type: boolean
          required: true
        reason:
          type: integer
      additionalProperties: false
    messages_conversation_member:
      type: object
      properties:
        can_kick:
          type: boolean
          description: 'Is it possible for user to kick this member'
        invited_by:
          type: integer
          format: int64
          entity: owner
        is_admin:
          type: boolean
        is_owner:
          type: boolean
        is_message_request:
          type: boolean
        join_date:
          type: integer
          minimum: 0
        request_date:
          type: integer
          minimum: 0
          description: 'Message request date'
        member_id:
          type: integer
          format: int64
          entity: owner
          required: true
      additionalProperties: false
    messages_conversation_peer:
      type: object
      properties:
        id:
          type: integer
          required: true
        local_id:
          type: integer
        type:
          $ref: '#/components/schemas/messages_conversation_peer_type'
          required: true
      additionalProperties: false
    messages_conversation_peer_type:
      type: string
      enum:
        - chat
        - email
        - user
        - group
      description: 'Peer type'
    messages_conversation_sort_id:
      type: object
      properties:
        major_id:
          type: integer
          minimum: 0
          description: 'Major id for sorting conversations'
          required: true
        minor_id:
          type: integer
          minimum: 0
          description: 'Minor id for sorting conversations'
          required: true
      additionalProperties: false
    messages_conversation_with_message:
      type: object
      properties:
        conversation:
          $ref: '#/components/schemas/messages_conversation'
          required: true
        last_message:
          $ref: '#/components/schemas/messages_message'
      additionalProperties: false
    messages_foreign_message:
      type: object
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/messages_message_attachment'
        conversation_message_id:
          type: integer
          description: 'Conversation message ID'
        date:
          type: integer
          description: 'Date when the message was created'
          required: true
        from_id:
          type: integer
          format: int64
          entity: owner
          description: "Message author's ID"
          required: true
        fwd_messages:
          type: array
          items:
            $ref: '#/components/schemas/messages_foreign_message'
        geo:
          $ref: '#/components/schemas/base_geo'
        id:
          type: integer
          description: 'Message ID'
        peer_id:
          type: integer
          description: 'Peer ID'
        reply_message:
          $ref: '#/components/schemas/messages_foreign_message'
        text:
          type: string
          description: 'Message text'
          required: true
        update_time:
          type: integer
          description: 'Date when the message has been updated in Unixtime'
        was_listened:
          type: boolean
          description: 'Was the audio message inside already listened by you'
        payload:
          type: string
          description: 'Additional data sent along with message for developer convenience'
      additionalProperties: false
    messages_forward:
      type: object
      properties:
        owner_id:
          type: integer
          description: 'Messages owner_id'
          entity: owner
          format: int64
        peer_id:
          type: integer
          description: 'Messages peer_id'
        conversation_message_ids:
          type: array
          items:
            type: integer
            description: 'Message conversation_message_id'
        message_ids:
          type: array
          items:
            type: integer
            description: 'Message message_id'
        is_reply:
          type: boolean
          description: 'If you need to reply to a message'
      additionalProperties: false
    messages_getConversationById:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Total number'
          required: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/messages_conversation'
          required: true
      additionalProperties: false
    messages_getConversationById_extended:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/messages_getConversationById'
        -
          type: object
          properties:
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
      additionalProperties: false
    messages_getConversationMembers:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/messages_conversation_member'
          required: true
        count:
          type: integer
          description: 'Chat members count'
          minimum: 0
          required: true
        chat_restrictions:
          $ref: '#/components/schemas/messages_chat_restrictions'
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/users_user_full'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/groups_group_full'
      additionalProperties: false
    messages_graffiti:
      type: object
      properties:
        access_key:
          type: string
          description: 'Access key for graffiti'
        id:
          type: integer
          description: 'Graffiti ID'
          minimum: 0
          required: true
        owner_id:
          type: integer
          description: 'Graffiti owner ID'
          entity: owner
          format: int64
          required: true
        url:
          type: string
          format: uri
          description: 'Graffiti URL'
          required: true
        width:
          type: integer
          description: 'Graffiti width'
          minimum: 0
          required: true
        height:
          type: integer
          description: 'Graffiti height'
          minimum: 0
          required: true
      additionalProperties: false
    messages_history_attachment:
      type: object
      properties:
        attachment:
          $ref: '#/components/schemas/messages_history_message_attachment'
          required: true
        message_id:
          type: integer
          description: 'Message ID'
          required: true
        from_id:
          type: integer
          format: int64
          entity: owner
          description: "Message author's ID"
          required: true
        forward_level:
          type: integer
          description: 'Forward level (optional)'
        was_listened:
          type: boolean
      additionalProperties: false
    messages_history_message_attachment:
      type: object
      properties:
        audio:
          $ref: '#/components/schemas/audio_audio'
        audio_message:
          $ref: '#/components/schemas/messages_audio_message'
        doc:
          $ref: '#/components/schemas/docs_doc'
        graffiti:
          $ref: '#/components/schemas/messages_graffiti'
        link:
          $ref: '#/components/schemas/base_link'
        market:
          $ref: '#/components/schemas/market_market_item'
        photo:
          $ref: '#/components/schemas/photos_photo'
        type:
          $ref: '#/components/schemas/messages_history_message_attachment_type'
          required: true
        video:
          $ref: '#/components/schemas/video_video'
        wall:
          $ref: '#/components/schemas/wall_wallpost_full'
      additionalProperties: false
    messages_history_message_attachment_type:
      type: string
      description: 'Attachments type'
      enum:
        - photo
        - video
        - audio
        - doc
        - link
        - market
        - wall
        - share
        - graffiti
        - audio_message
    messages_keyboard:
      type: object
      properties:
        one_time:
          type: boolean
          description: 'Should this keyboard disappear on first use'
          required: true
        buttons:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/messages_keyboard_button'
          required: true
        author_id:
          type: integer
          format: int64
          entity: owner
          description: 'Community or bot, which set this keyboard'
        inline:
          type: boolean
      additionalProperties: false
    messages_keyboard_button:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/messages_keyboard_button_property_action'
          required: true
        color:
          type: string
          enum:
            - default
            - positive
            - negative
            - primary
          description: 'Button color'
      additionalProperties: false
    messages_keyboard_button_action_callback:
      type: object
      description: 'Description of the action, that should be performed on button click'
      properties:
        label:
          type: string
          description: 'Label for button'
          required: true
        payload:
          type: string
          description: 'Additional data sent along with message for developer convenience'
        type:
          type: string
          enum:
            - callback
          required: true
      additionalProperties: false
    messages_keyboard_button_action_location:
      type: object
      description: 'Description of the action, that should be performed on button click'
      properties:
        payload:
          type: string
          description: 'Additional data sent along with message for developer convenience'
        type:
          type: string
          enum:
            - location
          required: true
      additionalProperties: false
    messages_keyboard_button_action_open_app:
      type: object
      description: 'Description of the action, that should be performed on button click'
      properties:
        app_id:
          type: integer
          description: 'Fragment value in app link like vk.com/app{app_id}_-654321#hash'
          required: true
        hash:
          type: string
          description: 'Fragment value in app link like vk.com/app123456_-654321#{hash}'
        label:
          type: string
          description: 'Label for button'
          required: true
        owner_id:
          type: integer
          description: 'Fragment value in app link like vk.com/app123456_{owner_id}#hash'
          entity: owner
          format: int64
          required: true
        payload:
          type: string
          description: 'Additional data sent along with message for developer convenience'
        type:
          type: string
          enum:
            - open_app
          required: true
      additionalProperties: false
    messages_keyboard_button_action_open_link:
      type: object
      description: 'Description of the action, that should be performed on button click'
      properties:
        label:
          type: string
          description: 'Label for button'
          required: true
        link:
          type: string
          description: 'link for button'
          required: true
        payload:
          type: string
          description: 'Additional data sent along with message for developer convenience'
        type:
          type: string
          enum:
            - open_link
          required: true
      additionalProperties: false
    messages_keyboard_button_action_open_photo:
      type: object
      description: 'Description of the action, that should be performed on button click'
      properties:
        type:
          type: string
          enum:
            - open_photo
          required: true
      additionalProperties: false
    messages_keyboard_button_action_text:
      type: object
      description: 'Description of the action, that should be performed on button click'
      properties:
        label:
          type: string
          description: 'Label for button'
          required: true
        payload:
          type: string
          description: 'Additional data sent along with message for developer convenience'
        type:
          type: string
          enum:
            - text
          required: true
      additionalProperties: false
    messages_keyboard_button_action_vkpay:
      type: object
      description: 'Description of the action, that should be performed on button click'
      properties:
        hash:
          type: string
          description: 'Fragment value in app link like vk.com/app123456_-654321#{hash}'
          required: true
        payload:
          type: string
          description: 'Additional data sent along with message for developer convenience'
        type:
          type: string
          enum:
            - vkpay
          required: true
      additionalProperties: false
    messages_keyboard_button_property_action:
      type: object
      oneOf:
        -
          $ref: '#/components/schemas/messages_keyboard_button_action_location'
        -
          $ref: '#/components/schemas/messages_keyboard_button_action_open_app'
        -
          $ref: '#/components/schemas/messages_keyboard_button_action_open_link'
        -
          $ref: '#/components/schemas/messages_keyboard_button_action_open_photo'
        -
          $ref: '#/components/schemas/messages_keyboard_button_action_text'
        -
          $ref: '#/components/schemas/messages_keyboard_button_action_callback'
        -
          $ref: '#/components/schemas/messages_keyboard_button_action_vkpay'
    messages_last_activity:
      type: object
      properties:
        online:
          description: 'Information whether user is online'
          $ref: '#/components/schemas/base_bool_int'
          required: true
        time:
          type: integer
          description: 'Time when user was online in Unixtime'
          required: true
      additionalProperties: false
    messages_longpoll_messages:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Total number'
        items:
          type: array
          items:
            $ref: '#/components/schemas/messages_message'
      additionalProperties: false
    messages_longpoll_params:
      type: object
      properties:
        server:
          type: string
          description: 'Server URL'
          required: true
        key:
          type: string
          description: Key
          required: true
        ts:
          type: integer
          description: Timestamp
          required: true
        pts:
          type: integer
          description: 'Persistent timestamp'
      additionalProperties: false
    messages_message:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/messages_message_action'
        admin_author_id:
          type: integer
          format: int64
          entity: owner
          description: 'Only for messages from community. Contains user ID of community admin, who sent this message.'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/messages_message_attachment'
        conversation_message_id:
          type: integer
          description: 'Unique auto-incremented number for all messages with this peer'
        date:
          type: integer
          description: 'Date when the message has been sent in Unixtime'
          required: true
        deleted:
          description: 'Is it an deleted message'
          $ref: '#/components/schemas/base_bool_int'
        from_id:
          type: integer
          format: int64
          entity: owner
          description: "Message author's ID"
          required: true
        fwd_messages:
          description: 'Forwarded messages'
          type: array
          items:
            $ref: '#/components/schemas/messages_foreign_message'
        geo:
          $ref: '#/components/schemas/base_geo'
        id:
          type: integer
          description: 'Message ID'
          required: true
        important:
          type: boolean
          description: 'Is it an important message'
        is_hidden:
          type: boolean
        is_cropped:
          type: boolean
          description: 'this message is cropped for bot'
        keyboard:
          $ref: '#/components/schemas/messages_keyboard'
        members_count:
          type: integer
          description: 'Members number'
        out:
          description: 'Information whether the message is outcoming'
          $ref: '#/components/schemas/base_bool_int'
          required: true
        payload:
          type: string
        peer_id:
          type: integer
          description: 'Peer ID'
          required: true
        random_id:
          type: integer
          description: 'ID used for sending messages. It returned only for outgoing messages'
        ref:
          type: string
        ref_source:
          type: string
        reply_message:
          $ref: '#/components/schemas/messages_foreign_message'
        text:
          type: string
          description: 'Message text'
          required: true
        update_time:
          type: integer
          description: 'Date when the message has been updated in Unixtime'
        was_listened:
          type: boolean
          description: 'Was the audio message inside already listened by you'
        pinned_at:
          type: integer
          description: 'Date when the message has been pinned in Unixtime'
        is_silent:
          type: boolean
          description: 'Is silent message, push without sound'
      additionalProperties: false
    messages_message_action:
      type: object
      properties:
        conversation_message_id:
          type: integer
          description: 'Message ID'
        email:
          type: string
          description: 'Email address for chat_invite_user or chat_kick_user actions'
        member_id:
          type: integer
          format: int64
          entity: owner
          description: 'User or email peer ID'
        message:
          type: string
          description: 'Message body of related message'
        photo:
          $ref: '#/components/schemas/messages_message_action_photo'
        text:
          type: string
          description: 'New chat title for chat_create and chat_title_update actions'
        type:
          $ref: '#/components/schemas/messages_message_action_status'
          required: true
      additionalProperties: false
    messages_message_action_photo:
      type: object
      properties:
        photo_50:
          type: string
          format: uri
          description: 'URL of the preview image with 50px in width'
          required: true
        photo_100:
          type: string
          format: uri
          description: 'URL of the preview image with 100px in width'
          required: true
        photo_200:
          type: string
          format: uri
          description: 'URL of the preview image with 200px in width'
          required: true
      additionalProperties: false
    messages_message_action_status:
      type: string
      description: 'Action status'
      enum:
        - chat_photo_update
        - chat_photo_remove
        - chat_create
        - chat_title_update
        - chat_invite_user
        - chat_kick_user
        - chat_pin_message
        - chat_unpin_message
        - chat_invite_user_by_link
        - chat_invite_user_by_message_request
        - chat_screenshot
    messages_message_attachment:
      type: object
      properties:
        audio:
          $ref: '#/components/schemas/audio_audio'
        audio_message:
          $ref: '#/components/schemas/messages_audio_message'
        call:
          $ref: '#/components/schemas/calls_call'
        doc:
          $ref: '#/components/schemas/docs_doc'
        gift:
          $ref: '#/components/schemas/gifts_layout'
        graffiti:
          $ref: '#/components/schemas/messages_graffiti'
        market:
          $ref: '#/components/schemas/market_market_item'
        market_market_album:
          $ref: '#/components/schemas/market_market_album'
        photo:
          $ref: '#/components/schemas/photos_photo'
        sticker:
          $ref: '#/components/schemas/base_sticker'
        story:
          $ref: '#/components/schemas/stories_story'
        type:
          $ref: '#/components/schemas/messages_message_attachment_type'
          required: true
        video:
          $ref: '#/components/schemas/video_video_full'
        wall_reply:
          $ref: '#/components/schemas/wall_wall_comment'
        poll:
          $ref: '#/components/schemas/polls_poll'
      additionalProperties: false
    messages_message_attachment_type:
      type: string
      description: 'Attachment type'
      enum:
        - photo
        - audio
        - video
        - doc
        - link
        - market
        - market_album
        - gift
        - sticker
        - wall
        - wall_reply
        - article
        - poll
        - call
        - graffiti
        - audio_message
    messages_message_request_data:
      type: object
      properties:
        status:
          type: string
          description: 'Status of message request'
        inviter_id:
          type: integer
          format: int64
          entity: owner
          description: 'Message request sender id'
        request_date:
          type: integer
          description: 'Message request date'
      additionalProperties: false
    messages_messages_array:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
        items:
          type: array
          items:
            $ref: '#/components/schemas/messages_message'
      additionalProperties: false
    messages_out_read_by:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
        member_ids:
          type: array
          items:
            type: integer
            format: int64
            entity: owner
            description: 'Member IDs'
      additionalProperties: false
    messages_pinned_message:
      type: object
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/messages_message_attachment'
        conversation_message_id:
          type: integer
          description: 'Unique auto-incremented number for all messages with this peer'
        id:
          type: integer
          description: 'Message ID'
          required: true
        date:
          type: integer
          description: 'Date when the message has been sent in Unixtime'
          required: true
        from_id:
          type: integer
          format: int64
          entity: owner
          description: "Message author's ID"
          required: true
        fwd_messages:
          description: 'Forwarded messages'
          type: array
          items:
            $ref: '#/components/schemas/messages_foreign_message'
        geo:
          $ref: '#/components/schemas/base_geo'
        peer_id:
          type: integer
          description: 'Peer ID'
          required: true
        reply_message:
          $ref: '#/components/schemas/messages_foreign_message'
        text:
          type: string
          description: 'Message text'
          required: true
        keyboard:
          $ref: '#/components/schemas/messages_keyboard'
      additionalProperties: false
    messages_push_settings:
      type: object
      properties:
        disabled_forever:
          type: boolean
          description: 'Information whether push notifications are disabled forever'
          required: true
        disabled_until:
          type: integer
          description: 'Time until what notifications are disabled'
        no_sound:
          type: boolean
          description: 'Information whether the sound is on'
          required: true
        disabled_mentions:
          type: boolean
          description: 'Information whether the mentions are disabled'
        disabled_mass_mentions:
          type: boolean
          description: "Information whether the mass mentions (like '@all', '@online') are disabled"
      additionalProperties: false
    messages_send_user_ids_response_item:
      type: object
      properties:
        peer_id:
          type: integer
          required: true
        message_id:
          type: integer
          minimum: 0
          required: true
        conversation_message_id:
          type: integer
          minimum: 0
        error:
          $ref: '#/components/schemas/base_message_error'
      additionalProperties: false
    messages_template_action_type_names:
      type: string
      description: 'Template action type names'
      enum:
        - text
        - start
        - location
        - vkpay
        - open_app
        - open_photo
        - open_link
        - callback
        - intent_subscribe
        - intent_unsubscribe
    messages_user_xtr_invited_by:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/users_user_xtr_type'
        -
          properties:
            invited_by:
              type: integer
              format: int64
              entity: owner
              description: 'ID of the inviter'
      additionalProperties: false
    newsfeed_comments_filters:
      type: string
      enum:
        - post
        - photo
        - video
        - topic
        - note
    newsfeed_ignore_item_type:
      type: string
      enum:
        - wall
        - tag
        - profilephoto
        - video
        - photo
        - audio
      enumNames:
        - 'post on the wall'
        - 'tag on a photo'
        - 'profile photo'
        - video
        - photo
        - audio
    newsfeed_item_audio:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/newsfeed_item_base'
        -
          properties:
            audio:
              $ref: '#/components/schemas/newsfeed_item_audio_audio'
            post_id:
              type: integer
              description: 'Post ID'
      additionalProperties: false
    newsfeed_item_audio_audio:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Audios number'
        items:
          type: array
          items:
            $ref: '#/components/schemas/audio_audio'
      additionalProperties: false
    newsfeed_item_base:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/newsfeed_newsfeed_item_type'
          required: true
        source_id:
          type: integer
          description: 'Item source ID'
          entity: owner
          format: int64
          required: true
        date:
          type: integer
          description: 'Date when item has been added in Unixtime'
          required: true
      additionalProperties: false
    newsfeed_item_digest:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/newsfeed_item_base'
        -
          properties:
            feed_id:
              type: string
              description: 'id of feed in digest'
            items:
              type: array
              items:
                $ref: '#/components/schemas/newsfeed_item_digest_item'
            main_post_ids:
              type: array
              items:
                type: string
            template:
              type: string
              enum:
                - list
                - grid
                - single
              description: 'type of digest'
            header:
              $ref: '#/components/schemas/newsfeed_item_digest_header'
            footer:
              $ref: '#/components/schemas/newsfeed_item_digest_footer'
            track_code:
              type: string
      additionalProperties: false
    newsfeed_item_digest_button:
      type: object
      properties:
        title:
          type: string
          required: true
        style:
          type: string
          enum:
            - primary
      additionalProperties: false
    newsfeed_item_digest_footer:
      type: object
      properties:
        style:
          type: string
          enum:
            - text
            - button
          required: true
        text:
          type: string
          description: 'text for invite to enable smart feed'
          required: true
        button:
          $ref: '#/components/schemas/newsfeed_item_digest_button'
      additionalProperties: false
    newsfeed_item_digest_full_item:
      type: object
      properties:
        text:
          type: string
        source_name:
          type: string
        attachment_index:
          type: integer
        attachment:
          $ref: '#/components/schemas/wall_wallpost_attachment'
        style:
          type: string
          enum:
            - default
            - inversed
            - spotlight
        post:
          $ref: '#/components/schemas/wall_wallpost'
          required: true
      additionalProperties: false
    newsfeed_item_digest_header:
      type: object
      properties:
        title:
          type: string
          description: 'Title of the header'
          required: true
        subtitle:
          type: string
          description: 'Subtitle of the header, when title have two strings'
        style:
          type: string
          enum:
            - singleline
            - multiline
          required: true
        button:
          $ref: '#/components/schemas/newsfeed_item_digest_button'
      additionalProperties: false
    newsfeed_item_digest_item:
      type: object
      properties:
        $ref: '#/components/schemas/wall_wallpost'
    newsfeed_item_friend:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/newsfeed_item_base'
        -
          properties:
            friends:
              $ref: '#/components/schemas/newsfeed_item_friend_friends'
      additionalProperties: false
    newsfeed_item_friend_friends:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Number of friends has been added'
        items:
          type: array
          items:
            $ref: '#/components/schemas/base_user_id'
      additionalProperties: false
    newsfeed_item_holiday_recommendations_block_header:
      type: object
      properties:
        title:
          type: string
          description: 'Title of the header'
        subtitle:
          type: string
          description: 'Subtitle of the header'
        image:
          type: array
          items:
            $ref: '#/components/schemas/base_image'
        action:
          $ref: '#/components/schemas/base_link_button_action'
      additionalProperties: false
    newsfeed_item_photo:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/wall_carousel_base'
        -
          $ref: '#/components/schemas/newsfeed_item_base'
        -
          properties:
            photos:
              $ref: '#/components/schemas/newsfeed_item_photo_photos'
            post_id:
              type: integer
              description: 'Post ID'
      additionalProperties: false
    newsfeed_item_photo_photos:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Photos number'
        items:
          type: array
          items:
            $ref: '#/components/schemas/newsfeed_newsfeed_photo'
      additionalProperties: false
    newsfeed_item_photo_tag:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/wall_carousel_base'
        -
          $ref: '#/components/schemas/newsfeed_item_base'
        -
          properties:
            photo_tags:
              $ref: '#/components/schemas/newsfeed_item_photo_tag_photo_tags'
            post_id:
              type: integer
              description: 'Post ID'
      additionalProperties: false
    newsfeed_item_photo_tag_photo_tags:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Tags number'
        items:
          type: array
          items:
            $ref: '#/components/schemas/newsfeed_newsfeed_photo'
      additionalProperties: false
    newsfeed_item_promo_button:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/newsfeed_item_base'
        -
          properties:
            text:
              type: string
            title:
              type: string
            action:
              $ref: '#/components/schemas/newsfeed_item_promo_button_action'
            images:
              type: array
              items:
                $ref: '#/components/schemas/newsfeed_item_promo_button_image'
            track_code:
              type: string
      additionalProperties: false
    newsfeed_item_promo_button_action:
      type: object
      properties:
        url:
          type: string
        type:
          type: string
        target:
          type: string
      additionalProperties: false
    newsfeed_item_promo_button_image:
      type: object
      properties:
        width:
          type: integer
        height:
          type: integer
        url:
          type: string
      additionalProperties: false
    newsfeed_item_topic:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/newsfeed_item_base'
        -
          properties:
            comments:
              $ref: '#/components/schemas/base_comments_info'
            likes:
              $ref: '#/components/schemas/base_likes_info'
            post_id:
              type: integer
              description: 'Topic post ID'
              required: true
            text:
              type: string
              description: 'Post text'
              required: true
      additionalProperties: false
    newsfeed_item_video:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/wall_carousel_base'
        -
          $ref: '#/components/schemas/newsfeed_item_base'
        -
          properties:
            video:
              $ref: '#/components/schemas/newsfeed_item_video_video'
      additionalProperties: false
    newsfeed_item_video_video:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Tags number'
        items:
          type: array
          items:
            $ref: '#/components/schemas/video_video'
      additionalProperties: false
    newsfeed_item_wallpost:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/wall_carousel_base'
        -
          $ref: '#/components/schemas/newsfeed_item_base'
        -
          $ref: '#/components/schemas/wall_wallpost_full'
        -
          properties:
            feedback:
              $ref: '#/components/schemas/newsfeed_item_wallpost_feedback'
      additionalProperties: false
    newsfeed_item_wallpost_feedback:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/newsfeed_item_wallpost_feedback_type'
          required: true
        question:
          type: string
          required: true
        answers:
          type: array
          items:
            $ref: '#/components/schemas/newsfeed_item_wallpost_feedback_answer'
        stars_count:
          type: integer
          minimum: 2
          maximum: 5
        gratitude:
          type: string
      additionalProperties: false
    newsfeed_item_wallpost_feedback_answer:
      type: object
      properties:
        title:
          type: string
          required: true
        id:
          type: string
          required: true
      additionalProperties: false
    newsfeed_item_wallpost_feedback_type:
      type: string
      enum:
        - buttons
        - stars
    newsfeed_list:
      type: object
      properties:
        id:
          type: integer
          description: 'List ID'
          required: true
        title:
          type: string
          description: 'List title'
          required: true
      additionalProperties: false
    newsfeed_list_full:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/newsfeed_list'
        -
          properties:
            no_reposts:
              description: 'Information whether reposts hiding is enabled'
              $ref: '#/components/schemas/base_bool_int'
            source_ids:
              type: array
              items:
                type: integer
                format: int64
                description: 'Users and communities IDs'
                entity: owner
      additionalProperties: false
    newsfeed_newsfeed_item:
      type: object
      oneOf:
        -
          $ref: '#/components/schemas/newsfeed_item_wallpost'
        -
          $ref: '#/components/schemas/newsfeed_item_photo'
        -
          $ref: '#/components/schemas/newsfeed_item_photo_tag'
        -
          $ref: '#/components/schemas/newsfeed_item_friend'
        -
          $ref: '#/components/schemas/newsfeed_item_audio'
        -
          $ref: '#/components/schemas/newsfeed_item_video'
        -
          $ref: '#/components/schemas/newsfeed_item_topic'
        -
          $ref: '#/components/schemas/newsfeed_item_digest'
        -
          $ref: '#/components/schemas/newsfeed_item_promo_button'
    newsfeed_newsfeed_item_type:
      type: string
      description: 'Item type'
      enum:
        - post
        - photo
        - photo_tag
        - wall_photo
        - friend
        - audio
        - video
        - topic
        - digest
        - stories
        - note
        - audio_playlist
        - clip
    newsfeed_newsfeed_photo:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/photos_photo'
        -
          properties:
            likes:
              $ref: '#/components/schemas/base_likes'
            comments:
              $ref: '#/components/schemas/base_object_count'
            can_repost:
              description: 'Information whether current user can repost the photo'
              $ref: '#/components/schemas/base_bool_int'
      additionalProperties: false
    notes_note:
      type: object
      properties:
        read_comments:
          type: integer
          minimum: 0
        can_comment:
          description: 'Information whether current user can comment the note'
          $ref: '#/components/schemas/base_bool_int'
        comments:
          type: integer
          description: 'Comments number'
          minimum: 0
          required: true
        date:
          type: integer
          description: 'Date when the note has been created in Unixtime'
          minimum: 0
          required: true
        id:
          type: integer
          description: 'Note ID'
          minimum: 1
          required: true
        owner_id:
          type: integer
          description: "Note owner's ID"
          minimum: 1
          entity: owner
          format: int64
          required: true
        text:
          type: string
          description: 'Note text'
        text_wiki:
          type: string
          description: 'Note text in wiki format'
        title:
          type: string
          description: 'Note title'
          required: true
        view_url:
          type: string
          format: uri
          description: 'URL of the page with note preview'
          required: true
        privacy_view:
          type: array
          items:
            type: string
        privacy_comment:
          type: array
          items:
            type: string
      additionalProperties: false
    notes_note_comment:
      type: object
      properties:
        date:
          type: integer
          description: 'Date when the comment has beed added in Unixtime'
          required: true
        id:
          type: integer
          description: 'Comment ID'
          required: true
        message:
          type: string
          description: 'Comment text'
          required: true
        nid:
          type: integer
          description: 'Note ID'
          required: true
        oid:
          type: integer
          description: 'Note ID'
          required: true
        reply_to:
          type: integer
          description: 'ID of replied comment '
        uid:
          type: integer
          description: "Comment author's ID"
          required: true
      additionalProperties: false
    notifications_feedback:
      type: object
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/wall_wallpost_attachment'
        from_id:
          type: integer
          description: "Reply author's ID"
        geo:
          $ref: '#/components/schemas/base_geo'
        id:
          type: integer
          description: 'Item ID'
        likes:
          $ref: '#/components/schemas/base_likes_info'
        text:
          type: string
          description: 'Reply text'
        to_id:
          type: integer
          description: "Wall owner's ID"
      additionalProperties: false
    notifications_notification:
      type: object
      properties:
        date:
          type: integer
          description: 'Date when the event has been occurred'
        feedback:
          $ref: '#/components/schemas/notifications_feedback'
        parent:
          $ref: '#/components/schemas/notifications_notification'
        reply:
          $ref: '#/components/schemas/notifications_reply'
        type:
          type: string
          description: 'Notification type'
      additionalProperties: false
    notifications_notification_item:
      type: object
      properties:
        $ref: '#/components/schemas/notifications_notification'
    notifications_notification_parent:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/wall_wallpost_to_id'
        -
          $ref: '#/components/schemas/photos_photo'
        -
          $ref: '#/components/schemas/board_topic'
        -
          $ref: '#/components/schemas/video_video'
        -
          $ref: '#/components/schemas/notifications_notifications_comment'
      additionalProperties: false
    notifications_notifications_comment:
      type: object
      properties:
        date:
          type: integer
          description: 'Date when the comment has been added in Unixtime'
          minimum: 0
        id:
          type: integer
          description: 'Comment ID'
          minimum: 1
        owner_id:
          type: integer
          description: 'Author ID'
          entity: owner
          format: int64
        photo:
          $ref: '#/components/schemas/photos_photo'
        post:
          $ref: '#/components/schemas/wall_wallpost'
        text:
          type: string
          description: 'Comment text'
        topic:
          $ref: '#/components/schemas/board_topic'
        video:
          $ref: '#/components/schemas/video_video'
      additionalProperties: false
    notifications_reply:
      type: object
      properties:
        date:
          type: integer
          description: 'Date when the reply has been created in Unixtime'
        id:
          type: integer
          description: 'Reply ID'
        text:
          type: integer
          description: 'Reply text'
      additionalProperties: false
    notifications_send_message_error:
      type: object
      properties:
        code:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
          enumNames:
            - 'notifications disabled'
            - 'flood control per hour'
            - 'flood control per day'
            - 'app is not installed'
          description: 'Error code'
        description:
          type: string
          description: 'Error description'
      additionalProperties: false
    notifications_send_message_item:
      type: object
      properties:
        user_id:
          type: integer
          description: 'User ID'
          entity: owner
          format: int64
        status:
          type: boolean
          description: 'Notification status'
        error:
          $ref: '#/components/schemas/notifications_send_message_error'
      additionalProperties: false
    oauth_error:
      type: object
      properties:
        error:
          type: string
          description: 'Error type'
          required: true
        error_description:
          type: string
          description: 'Error description'
          required: true
        redirect_uri:
          type: string
          description: 'URI for validation'
      additionalProperties: false
    orders_amount:
      type: object
      properties:
        amounts:
          type: array
          items:
            $ref: '#/components/schemas/orders_amount_item'
        currency:
          type: string
          description: 'Currency name'
      additionalProperties: false
    orders_amount_item:
      type: object
      properties:
        amount:
          type: number
          description: "Votes amount in user's currency"
        description:
          type: string
          description: 'Amount description'
        votes:
          type: string
          description: 'Votes number'
      additionalProperties: false
    orders_order:
      type: object
      properties:
        amount:
          type: string
          description: Amount
          required: true
        app_order_id:
          type: string
          description: 'App order ID'
          required: true
        cancel_transaction_id:
          type: string
          description: 'Cancel transaction ID'
        date:
          type: string
          description: 'Date of creation in Unixtime'
          required: true
        id:
          type: string
          description: 'Order ID'
          required: true
        item:
          type: string
          description: 'Order item'
          required: true
        receiver_id:
          type: string
          description: 'Receiver ID'
          required: true
        status:
          type: string
          description: 'Order status'
          enum:
            - created
            - charged
            - refunded
            - chargeable
            - cancelled
            - declined
          required: true
        transaction_id:
          type: string
          description: 'Transaction ID'
        user_id:
          type: string
          description: 'User ID'
          required: true
      additionalProperties: false
    orders_subscription:
      type: object
      properties:
        cancel_reason:
          type: string
          description: 'Cancel reason'
        create_time:
          type: integer
          description: 'Date of creation in Unixtime'
          required: true
        id:
          type: integer
          description: 'Subscription ID'
          required: true
        item_id:
          type: string
          description: 'Subscription order item'
          required: true
        next_bill_time:
          type: integer
          description: 'Date of next bill in Unixtime'
        expire_time:
          type: integer
          description: 'Subscription expiration time in Unixtime'
        pending_cancel:
          type: boolean
          description: 'Pending cancel state'
        period:
          type: integer
          description: 'Subscription period'
          required: true
        period_start_time:
          type: integer
          description: 'Date of last period start in Unixtime'
          required: true
        price:
          type: integer
          description: 'Subscription price'
          required: true
        title:
          type: string
          description: 'Subscription name'
        app_id:
          type: integer
          description: "Subscription's application id"
        application_name:
          type: string
          description: "Subscription's application name"
        photo_url:
          type: string
          description: 'Item photo image url'
        status:
          type: string
          description: 'Subscription status'
          required: true
        test_mode:
          type: boolean
          description: 'Is test subscription'
        trial_expire_time:
          type: integer
          description: 'Date of trial expire in Unixtime'
        update_time:
          type: integer
          description: 'Date of last change in Unixtime'
          required: true
      additionalProperties: false
    owner_state:
      type: object
      properties:
        state:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
          enumNames:
            - banned
            - adult
            - hidden
            - deleted
            - blacklisted
        description:
          type: string
          description: 'wiki text to describe user state'
      additionalProperties: false
    pages_privacy_settings:
      type: integer
      enum:
        - 0
        - 1
        - 2
      enumNames:
        - 'community managers only'
        - 'community members only'
        - everyone
    pages_wikipage:
      type: object
      properties:
        creator_id:
          type: integer
          description: 'Page creator ID'
        creator_name:
          type: string
          description: 'Page creator name'
        editor_id:
          type: integer
          description: 'Last editor ID'
        editor_name:
          type: string
          description: 'Last editor name'
        group_id:
          type: integer
          description: 'Community ID'
          minimum: 1
          entity: groups
          format: int64
          required: true
        id:
          type: integer
          description: 'Page ID'
          minimum: 1
          required: true
        title:
          type: string
          description: 'Page title'
          required: true
        views:
          type: integer
          description: 'Views number'
          required: true
        who_can_edit:
          description: 'Edit settings of the page'
          $ref: '#/components/schemas/pages_privacy_settings'
          required: true
        who_can_view:
          description: 'View settings of the page'
          $ref: '#/components/schemas/pages_privacy_settings'
          required: true
      additionalProperties: false
    pages_wikipage_full:
      type: object
      properties:
        created:
          type: integer
          description: 'Date when the page has been created in Unixtime'
          required: true
        creator_id:
          type: integer
          description: 'Page creator ID'
        current_user_can_edit:
          description: 'Information whether current user can edit the page'
          $ref: '#/components/schemas/base_bool_int'
        current_user_can_edit_access:
          description: 'Information whether current user can edit the page access settings'
          $ref: '#/components/schemas/base_bool_int'
        edited:
          type: integer
          description: 'Date when the page has been edited in Unixtime'
          required: true
        editor_id:
          type: integer
          description: 'Last editor ID'
        group_id:
          type: integer
          description: 'Community ID'
          minimum: 1
          entity: groups
          format: int64
          required: true
        html:
          type: string
          description: 'Page content, HTML'
        id:
          type: integer
          description: 'Page ID'
          minimum: 1
          required: true
        source:
          type: string
          description: 'Page content, wiki'
        title:
          type: string
          description: 'Page title'
          required: true
        view_url:
          type: string
          format: uri
          description: 'URL of the page preview'
          required: true
        views:
          type: integer
          description: 'Views number'
          required: true
        who_can_edit:
          description: 'Edit settings of the page'
          $ref: '#/components/schemas/pages_privacy_settings'
          required: true
        who_can_view:
          description: 'View settings of the page'
          $ref: '#/components/schemas/pages_privacy_settings'
          required: true
        url:
          type: string
          format: uri
          description: URL
        parent:
          type: string
          description: Parent
        parent2:
          type: string
          description: Parent2
        owner_id:
          type: integer
          description: 'Owner ID'
          entity: owner
          format: int64
      additionalProperties: false
    pages_wikipage_history:
      type: object
      properties:
        id:
          type: integer
          description: 'Version ID'
          minimum: 0
          required: true
        length:
          type: integer
          minimum: 0
          description: 'Page size in bytes'
          required: true
        date:
          type: integer
          minimum: 0
          description: 'Date when the page has been edited in Unixtime'
          required: true
        editor_id:
          type: integer
          description: 'Last editor ID'
          required: true
        editor_name:
          type: string
          description: 'Last editor name'
          required: true
      additionalProperties: false
    photos_image:
      type: object
      properties:
        height:
          type: integer
          description: 'Height of the photo in px.'
        type:
          $ref: '#/components/schemas/photos_image_type'
        url:
          type: string
          format: uri
          description: 'Photo URL.'
        width:
          type: integer
          description: 'Width of the photo in px.'
      additionalProperties: false
    photos_image_type:
      type: string
      description: "Photo's type."
      enum:
        - s
        - m
        - x
        - l
        - o
        - p
        - q
        - r
        - 'y'
        - z
        - w
    photos_photo:
      type: object
      properties:
        access_key:
          type: string
          description: 'Access key for the photo'
        album_id:
          type: integer
          description: 'Album ID'
          required: true
        date:
          type: integer
          description: 'Date when uploaded'
          minimum: 0
          required: true
        height:
          type: integer
          description: 'Original photo height'
          minimum: 0
        id:
          type: integer
          description: 'Photo ID'
          minimum: 0
          required: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/photos_image'
        lat:
          type: number
          description: Latitude
        long:
          type: number
          description: Longitude
        owner_id:
          type: integer
          description: "Photo owner's ID"
          entity: owner
          format: int64
          required: true
        photo_256:
          type: string
          format: uri
          description: 'URL of image with 2560 px width'
        can_comment:
          description: 'Information whether current user can comment the photo'
          $ref: '#/components/schemas/base_bool_int'
        place:
          type: string
        post_id:
          type: integer
          description: 'Post ID'
          minimum: 1
        sizes:
          type: array
          items:
            $ref: '#/components/schemas/photos_photo_sizes'
        text:
          type: string
          description: 'Photo caption'
        user_id:
          type: integer
          description: 'ID of the user who have uploaded the photo'
          minimum: 1
          entity: owner
          format: int64
        width:
          type: integer
          description: 'Original photo width'
          minimum: 0
        has_tags:
          type: boolean
          description: 'Whether photo has attached tag links'
          required: true
        likes:
          $ref: '#/components/schemas/base_likes'
        comments:
          $ref: '#/components/schemas/base_object_count'
        reposts:
          $ref: '#/components/schemas/base_reposts_info'
        tags:
          $ref: '#/components/schemas/base_object_count'
      additionalProperties: false
    photos_photo_album:
      type: object
      properties:
        created:
          type: integer
          description: 'Date when the album has been created in Unixtime'
          minimum: 0
          required: true
        description:
          type: string
          description: 'Photo album description'
        id:
          type: integer
          description: 'Photo album ID'
          required: true
        owner_id:
          type: integer
          description: "Album owner's ID"
          entity: owner
          format: int64
          required: true
        size:
          type: integer
          description: 'Photos number'
          minimum: 0
          required: true
        thumb:
          $ref: '#/components/schemas/photos_photo'
        title:
          type: string
          description: 'Photo album title'
          required: true
        updated:
          type: integer
          description: 'Date when the album has been updated last time in Unixtime'
          minimum: 0
          required: true
      additionalProperties: false
    photos_photo_album_full:
      type: object
      properties:
        can_upload:
          description: 'Information whether current user can upload photo to the album'
          $ref: '#/components/schemas/base_bool_int'
        comments_disabled:
          description: 'Information whether album comments are disabled'
          $ref: '#/components/schemas/base_bool_int'
        created:
          type: integer
          description: 'Date when the album has been created in Unixtime'
          minimum: 0
          required: true
        description:
          type: string
          description: 'Photo album description'
        can_delete:
          type: boolean
          description: 'album can delete'
        id:
          type: integer
          description: 'Photo album ID'
          required: true
        owner_id:
          type: integer
          description: "Album owner's ID"
          entity: owner
          format: int64
          required: true
        size:
          type: integer
          description: 'Photos number'
          minimum: 0
          required: true
        sizes:
          type: array
          items:
            $ref: '#/components/schemas/photos_photo_sizes'
        thumb_id:
          type: integer
          description: 'Thumb photo ID'
          minimum: 0
        thumb_is_last:
          description: 'Information whether the album thumb is last photo'
          $ref: '#/components/schemas/base_bool_int'
        thumb_src:
          type: string
          format: uri
          description: 'URL of the thumb image'
        title:
          type: string
          description: 'Photo album title'
          required: true
        updated:
          type: integer
          description: 'Date when the album has been updated last time in Unixtime'
          minimum: 0
          required: true
        upload_by_admins_only:
          description: 'Information whether only community administrators can upload photos'
          $ref: '#/components/schemas/base_bool_int'
      additionalProperties: false
    photos_photo_falseable:
      type: object
      oneOf:
        -
          type: boolean
        -
          type: string
    photos_photo_full_xtr_real_offset:
      type: object
      properties:
        access_key:
          type: string
          description: 'Access key for the photo'
        album_id:
          type: integer
          description: 'Album ID'
          required: true
        can_comment:
          $ref: '#/components/schemas/base_bool_int'
        comments:
          $ref: '#/components/schemas/base_object_count'
        date:
          type: integer
          description: 'Date when uploaded'
          minimum: 0
          required: true
        height:
          type: integer
          description: 'Original photo height'
          minimum: 0
        hidden:
          description: 'Returns if the photo is hidden above the wall'
          $ref: '#/components/schemas/base_property_exists'
        id:
          type: integer
          description: 'Photo ID'
          minimum: 0
          required: true
        lat:
          type: number
          description: Latitude
        likes:
          $ref: '#/components/schemas/base_likes'
        long:
          type: number
          description: Longitude
        owner_id:
          type: integer
          description: "Photo owner's ID"
          entity: owner
          format: int64
          required: true
        photo_1280:
          type: string
          format: uri
          description: 'URL of image with 1280 px width'
        photo_130:
          type: string
          format: uri
          description: 'URL of image with 130 px width'
        photo_2560:
          type: string
          format: uri
          description: 'URL of image with 2560 px width'
        photo_604:
          type: string
          format: uri
          description: 'URL of image with 604 px width'
        photo_75:
          type: string
          format: uri
          description: 'URL of image with 75 px width'
        photo_807:
          type: string
          format: uri
          description: 'URL of image with 807 px width'
        post_id:
          type: integer
          description: 'Post ID'
          minimum: 1
        real_offset:
          type: integer
          description: 'Real position of the photo'
        reposts:
          $ref: '#/components/schemas/base_object_count'
        sizes:
          type: array
          items:
            $ref: '#/components/schemas/photos_photo_sizes'
        tags:
          $ref: '#/components/schemas/base_object_count'
        text:
          type: string
          description: 'Photo caption'
        user_id:
          type: integer
          description: 'ID of the user who have uploaded the photo'
          minimum: 1
          entity: owner
          format: int64
        width:
          type: integer
          description: 'Original photo width'
          minimum: 0
      additionalProperties: false
    photos_photo_sizes:
      type: object
      properties:
        height:
          type: integer
          description: 'Height in px'
          minimum: 0
          required: true
        url:
          type: string
          format: uri
          description: 'URL of the image'
          required: true
        src:
          type: string
          format: uri
          description: 'URL of the image'
        type:
          $ref: '#/components/schemas/photos_photo_sizes_type'
          required: true
        width:
          type: integer
          description: 'Width in px'
          minimum: 0
          required: true
      additionalProperties: false
    photos_photo_sizes_type:
      type: string
      description: 'Size type'
      enum:
        - s
        - m
        - x
        - o
        - p
        - q
        - r
        - k
        - l
        - 'y'
        - z
        - c
        - w
        - a
        - b
        - e
        - i
        - d
        - j
        - temp
        - h
        - g
        - 'n'
        - f
        - max
    photos_photo_tag:
      type: object
      properties:
        date:
          type: integer
          description: 'Date when tag has been added in Unixtime'
          minimum: 0
          required: true
        id:
          type: integer
          description: 'Tag ID'
          required: true
        placer_id:
          type: integer
          description: 'ID of the tag creator'
          required: true
        tagged_name:
          type: string
          description: 'Tag description'
          required: true
        description:
          description: 'Tagged description.'
          type: string
        user_id:
          type: integer
          description: 'Tagged user ID'
          entity: owner
          format: int64
          required: true
        viewed:
          description: 'Information whether the tag is reviewed'
          $ref: '#/components/schemas/base_bool_int'
          required: true
        x:
          type: number
          description: 'Coordinate X of the left upper corner'
          required: true
        x2:
          type: number
          description: 'Coordinate X of the right lower corner'
          required: true
        'y':
          type: number
          description: 'Coordinate Y of the left upper corner'
          required: true
        y2:
          type: number
          description: 'Coordinate Y of the right lower corner'
          required: true
      additionalProperties: false
    photos_photo_upload:
      type: object
      properties:
        album_id:
          type: integer
          description: 'Album ID'
          required: true
        upload_url:
          type: string
          format: uri
          description: 'URL to upload photo'
          required: true
        fallback_upload_url:
          type: string
          format: uri
          description: 'Fallback URL if upload_url returned error'
        user_id:
          type: integer
          description: 'User ID'
          entity: owner
          format: int64
          required: true
        group_id:
          type: integer
          description: 'Group ID'
          entity: groups
          format: int64
      additionalProperties: false
    photos_photo_xtr_real_offset:
      type: object
      properties:
        access_key:
          type: string
          description: 'Access key for the photo'
        album_id:
          type: integer
          description: 'Album ID'
          required: true
        date:
          type: integer
          description: 'Date when uploaded'
          minimum: 0
          required: true
        height:
          type: integer
          description: 'Original photo height'
          minimum: 0
        hidden:
          description: 'Returns if the photo is hidden above the wall'
          $ref: '#/components/schemas/base_property_exists'
        id:
          type: integer
          description: 'Photo ID'
          minimum: 0
          required: true
        lat:
          type: number
          description: Latitude
        long:
          type: number
          description: Longitude
        owner_id:
          type: integer
          description: "Photo owner's ID"
          entity: owner
          format: int64
          required: true
        photo_1280:
          type: string
          format: uri
          description: 'URL of image with 1280 px width'
        photo_130:
          type: string
          format: uri
          description: 'URL of image with 130 px width'
        photo_2560:
          type: string
          format: uri
          description: 'URL of image with 2560 px width'
        photo_604:
          type: string
          format: uri
          description: 'URL of image with 604 px width'
        photo_75:
          type: string
          format: uri
          description: 'URL of image with 75 px width'
        photo_807:
          type: string
          format: uri
          description: 'URL of image with 807 px width'
        post_id:
          type: integer
          description: 'Post ID'
          minimum: 1
        real_offset:
          type: integer
          description: 'Real position of the photo'
        sizes:
          type: array
          items:
            $ref: '#/components/schemas/photos_photo_sizes'
        text:
          type: string
          description: 'Photo caption'
        user_id:
          type: integer
          description: 'ID of the user who have uploaded the photo'
          minimum: 1
          entity: owner
          format: int64
        width:
          type: integer
          description: 'Original photo width'
          minimum: 0
      additionalProperties: false
    photos_photo_xtr_tag_info:
      type: object
      properties:
        access_key:
          type: string
          description: 'Access key for the photo'
        album_id:
          type: integer
          description: 'Album ID'
          required: true
        date:
          type: integer
          description: 'Date when uploaded'
          minimum: 0
          required: true
        height:
          type: integer
          description: 'Original photo height'
          minimum: 0
        id:
          type: integer
          description: 'Photo ID'
          minimum: 0
          required: true
        lat:
          type: number
          description: Latitude
        long:
          type: number
          description: Longitude
        owner_id:
          type: integer
          description: "Photo owner's ID"
          entity: owner
          format: int64
          required: true
        photo_1280:
          type: string
          format: uri
          description: 'URL of image with 1280 px width'
        photo_130:
          type: string
          format: uri
          description: 'URL of image with 130 px width'
        photo_2560:
          type: string
          format: uri
          description: 'URL of image with 2560 px width'
        photo_604:
          type: string
          format: uri
          description: 'URL of image with 604 px width'
        photo_75:
          type: string
          format: uri
          description: 'URL of image with 75 px width'
        photo_807:
          type: string
          format: uri
          description: 'URL of image with 807 px width'
        placer_id:
          type: integer
          description: 'ID of the tag creator'
        post_id:
          type: integer
          description: 'Post ID'
          minimum: 1
        sizes:
          type: array
          items:
            $ref: '#/components/schemas/photos_photo_sizes'
        tag_created:
          type: integer
          description: 'Date when tag has been added in Unixtime'
          minimum: 0
        tag_id:
          type: integer
          description: 'Tag ID'
        text:
          type: string
          description: 'Photo caption'
        user_id:
          type: integer
          description: 'ID of the user who have uploaded the photo'
          minimum: 1
          entity: owner
          format: int64
        width:
          type: integer
          description: 'Original photo width'
          minimum: 0
      additionalProperties: false
    photos_tags_suggestion_item:
      type: object
      properties:
        title:
          type: string
        caption:
          type: string
        type:
          type: string
        buttons:
          type: array
          items:
            $ref: '#/components/schemas/photos_tags_suggestion_item_button'
        photo:
          $ref: '#/components/schemas/photos_photo'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/photos_photo_tag'
        track_code:
          type: string
      additionalProperties: false
    photos_tags_suggestion_item_button:
      type: object
      properties:
        title:
          type: string
        action:
          type: string
          enum:
            - confirm
            - decline
            - show_tags
        style:
          type: string
          enum:
            - primary
            - secondary
      additionalProperties: false
    podcast_cover:
      type: object
      properties:
        sizes:
          type: array
          items:
            $ref: '#/components/schemas/photos_photo_sizes'
      additionalProperties: false
    podcast_external_data:
      type: object
      properties:
        url:
          type: string
          description: 'Url of the podcast page'
        owner_url:
          type: string
          description: 'Url of the podcasts owner community'
        title:
          type: string
          description: 'Podcast title'
        owner_name:
          type: string
          description: 'Name of the podcasts owner community'
        cover:
          $ref: '#/components/schemas/podcast_cover'
          description: 'Podcast cover'
      additionalProperties: false
    polls_answer:
      type: object
      properties:
        id:
          type: integer
          description: 'Answer ID'
          minimum: 0
          required: true
        rate:
          type: number
          description: 'Answer rate in percents'
          minimum: 0
          required: true
        text:
          type: string
          description: 'Answer text'
          required: true
        votes:
          type: integer
          description: 'Votes number'
          minimum: 0
          required: true
      additionalProperties: false
    polls_background:
      type: object
      properties:
        angle:
          description: 'Gradient angle with 0 on positive X axis'
          type: integer
        color:
          type: string
          description: 'Hex color code without #'
        height:
          description: 'Original height of pattern tile'
          type: integer
          minimum: 0
        id:
          type: integer
        name:
          type: string
        images:
          description: 'Pattern tiles'
          type: array
          items:
            $ref: '#/components/schemas/base_image'
        points:
          description: 'Gradient points'
          type: array
          items:
            $ref: '#/components/schemas/base_gradient_point'
        type:
          type: string
          enum:
            - gradient
            - tile
        width:
          description: 'Original with of pattern tile'
          type: integer
          minimum: 0
      additionalProperties: false
    polls_friend:
      type: object
      properties:
        id:
          type: integer
          entity: owner
          minimum: 0
          format: int64
          required: true
      additionalProperties: false
    polls_poll:
      type: object
      properties:
        anonymous:
          $ref: '#/components/schemas/polls_poll_anonymous'
        friends:
          type: array
          items:
            $ref: '#/components/schemas/polls_friend'
        multiple:
          description: 'Information whether the poll with multiple choices'
          type: boolean
          required: true
        answer_id:
          type: integer
          description: "Current user's answer ID"
          minimum: 0
        end_date:
          type: integer
          minimum: 0
          required: true
        answer_ids:
          type: array
          description: "Current user's answer IDs"
          items:
            type: integer
            minimum: 0
        closed:
          type: boolean
          required: true
        is_board:
          type: boolean
          required: true
        can_edit:
          type: boolean
          required: true
        can_vote:
          type: boolean
          required: true
        can_report:
          type: boolean
          required: true
        can_share:
          type: boolean
          required: true
        embed_hash:
          type: string
        photo:
          $ref: '#/components/schemas/polls_background'
        answers:
          type: array
          items:
            $ref: '#/components/schemas/polls_answer'
          required: true
        created:
          type: integer
          description: 'Date when poll has been created in Unixtime'
          minimum: 0
          required: true
        id:
          type: integer
          description: 'Poll ID'
          minimum: 1
          required: true
        owner_id:
          type: integer
          entity: owner
          description: "Poll owner's ID"
          format: int64
          required: true
        author_id:
          type: integer
          description: "Poll author's ID"
        question:
          type: string
          description: 'Poll question'
          required: true
        background:
          $ref: '#/components/schemas/polls_background'
        votes:
          type: integer
          description: 'Votes number'
          minimum: 0
          required: true
        disable_unvote:
          type: boolean
          required: true
      additionalProperties: false
    polls_poll_anonymous:
      type: boolean
      description: 'Information whether the field is anonymous'
    polls_voters:
      type: object
      properties:
        answer_id:
          type: integer
          description: 'Answer ID'
        users:
          $ref: '#/components/schemas/polls_voters_users'
      additionalProperties: false
    polls_voters_users:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Votes number'
        items:
          type: array
          items:
            type: integer
            entity: profiles
            format: int64
            description: 'User ID'
      additionalProperties: false
    prettyCards_prettyCard:
      type: object
      properties:
        button:
          description: 'Button key'
          oneOf:
            -
              type: object
              $ref: '#/components/schemas/base_link_button'
            -
              type: string
        button_text:
          type: string
          description: 'Button text in current language'
        card_id:
          type: string
          description: 'Card ID (long int returned as string)'
          required: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/base_image'
        link_url:
          type: string
          description: 'Link URL'
          required: true
        photo:
          type: string
          description: 'Photo ID (format "<owner_id>_<media_id>")'
          required: true
        price:
          type: string
          description: 'Price if set (decimal number returned as string)'
        price_old:
          type: string
          description: 'Old price if set (decimal number returned as string)'
        title:
          type: string
          description: Title
          required: true
      additionalProperties: false
    prettyCards_prettyCardOrError:
      type: object
      oneOf:
        -
          $ref: '#/components/schemas/prettyCards_prettyCard'
        -
          $ref: '#/components/schemas/base_error'
    search_hint:
      type: object
      properties:
        app:
          $ref: '#/components/schemas/apps_app'
        description:
          type: string
          description: 'Object description'
          required: true
        global:
          description: 'Information whether the object has been found globally'
          $ref: '#/components/schemas/base_bool_int'
        group:
          $ref: '#/components/schemas/groups_group'
        profile:
          $ref: '#/components/schemas/users_user_min'
        section:
          $ref: '#/components/schemas/search_hint_section'
        type:
          $ref: '#/components/schemas/search_hint_type'
          required: true
        link:
          $ref: '#/components/schemas/base_link'
      additionalProperties: false
    search_hint_section:
      type: string
      description: 'Section title'
      enum:
        - groups
        - events
        - publics
        - correspondents
        - people
        - friends
        - mutual_friends
        - promo
    search_hint_type:
      type: string
      description: 'Object type'
      enum:
        - group
        - profile
        - vk_app
        - app
        - html5_game
        - link
    secure_giveEventSticker_item:
      type: object
      properties:
        user_id:
          type: integer
          entity: owner
          format: int64
        status:
          type: string
      additionalProperties: false
    secure_level:
      type: object
      properties:
        level:
          type: integer
          description: Level
        uid:
          type: integer
          description: 'User ID'
      additionalProperties: false
    secure_setCounter_item:
      type: object
      properties:
        id:
          type: integer
          description: 'User ID'
          entity: owner
          format: int64
          required: true
        result:
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    secure_sms_notification:
      type: object
      properties:
        app_id:
          type: string
          description: 'Application ID'
        date:
          type: string
          description: 'Date when message has been sent in Unixtime'
        id:
          type: string
          description: 'Notification ID'
        message:
          type: string
          description: 'Messsage text'
        user_id:
          type: string
          description: 'User ID'
      additionalProperties: false
    secure_token_checked:
      type: object
      properties:
        date:
          type: integer
          description: 'Date when access_token has been generated in Unixtime'
        expire:
          type: integer
          description: 'Date when access_token will expire in Unixtime'
        success:
          description: 'Returns if successfully processed'
          type: integer
          default: 1
        user_id:
          type: integer
          description: 'User ID'
          entity: owner
          format: int64
      additionalProperties: false
    secure_transaction:
      type: object
      properties:
        date:
          type: integer
          description: 'Transaction date in Unixtime'
        id:
          type: integer
          description: 'Transaction ID'
        uid_from:
          type: integer
          description: 'From ID'
        uid_to:
          type: integer
          description: 'To ID'
        votes:
          type: integer
          description: 'Votes number'
      additionalProperties: false
    stats_activity:
      type: object
      description: 'Activity stats'
      properties:
        comments:
          type: integer
          minimum: 0
          description: 'Comments number'
        copies:
          type: integer
          minimum: 0
          description: 'Reposts number'
        hidden:
          type: integer
          minimum: 0
          description: 'Hidden from news count'
        likes:
          type: integer
          minimum: 0
          description: 'Likes number'
        subscribed:
          type: integer
          minimum: 0
          description: 'New subscribers count'
        unsubscribed:
          type: integer
          minimum: 0
          description: 'Unsubscribed count'
      additionalProperties: false
    stats_city:
      type: object
      properties:
        count:
          type: integer
          description: 'Visitors number'
          minimum: 0
        name:
          type: string
          description: 'City name'
        value:
          type: integer
          description: 'City ID'
      additionalProperties: false
    stats_country:
      type: object
      properties:
        code:
          type: string
          description: 'Country code'
        count:
          type: integer
          minimum: 0
          description: 'Visitors number'
        name:
          type: string
          description: 'Country name'
        value:
          type: integer
          description: 'Country ID'
      additionalProperties: false
    stats_period:
      type: object
      properties:
        activity:
          $ref: '#/components/schemas/stats_activity'
        period_from:
          type: integer
          description: 'Unix timestamp'
        period_to:
          type: integer
          description: 'Unix timestamp'
        reach:
          $ref: '#/components/schemas/stats_reach'
        visitors:
          $ref: '#/components/schemas/stats_views'
      additionalProperties: false
    stats_reach:
      type: object
      description: 'Reach stats'
      properties:
        age:
          type: array
          items:
            $ref: '#/components/schemas/stats_sex_age'
        cities:
          type: array
          items:
            $ref: '#/components/schemas/stats_city'
        countries:
          type: array
          items:
            $ref: '#/components/schemas/stats_country'
        mobile_reach:
          type: integer
          minimum: 0
          description: 'Reach count from mobile devices'
        reach:
          type: integer
          minimum: 0
          description: 'Reach count'
        reach_subscribers:
          type: integer
          minimum: 0
          description: 'Subscribers reach count'
        sex:
          type: array
          items:
            $ref: '#/components/schemas/stats_sex_age'
        sex_age:
          type: array
          items:
            $ref: '#/components/schemas/stats_sex_age'
      additionalProperties: false
    stats_sex_age:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Visitors number'
        value:
          type: string
          description: 'Sex/age value'
          required: true
        reach:
          type: integer
        reach_subscribers:
          type: integer
        count_subscribers:
          type: integer
      additionalProperties: false
    stats_views:
      type: object
      description: 'Views stats'
      properties:
        age:
          type: array
          items:
            $ref: '#/components/schemas/stats_sex_age'
        cities:
          type: array
          items:
            $ref: '#/components/schemas/stats_city'
        countries:
          type: array
          items:
            $ref: '#/components/schemas/stats_country'
        mobile_views:
          type: integer
          minimum: 0
          description: 'Number of views from mobile devices'
        sex:
          type: array
          items:
            $ref: '#/components/schemas/stats_sex_age'
        sex_age:
          type: array
          items:
            $ref: '#/components/schemas/stats_sex_age'
        views:
          type: integer
          minimum: 0
          description: 'Views number'
        visitors:
          type: integer
          minimum: 0
          description: 'Visitors number'
      additionalProperties: false
    stats_wallpost_stat:
      type: object
      properties:
        post_id:
          type: integer
        hide:
          type: integer
          description: 'Hidings number'
        join_group:
          type: integer
          description: 'People have joined the group'
        links:
          type: integer
          description: 'Link clickthrough'
        reach_subscribers:
          type: integer
          description: 'Subscribers reach'
        reach_subscribers_count:
          type: integer
        reach_total:
          type: integer
          description: 'Total reach'
        reach_total_count:
          type: integer
        reach_viral:
          type: integer
        reach_ads:
          type: integer
        report:
          type: integer
          description: 'Reports number'
        to_group:
          type: integer
          description: 'Clickthrough to community'
        unsubscribe:
          type: integer
          description: 'Unsubscribed members'
        sex_age:
          type: array
          items:
            $ref: '#/components/schemas/stats_sex_age'
      additionalProperties: false
    status_status:
      type: object
      properties:
        text:
          type: string
          description: 'Status text'
          required: true
        audio:
          $ref: '#/components/schemas/audio_audio'
      additionalProperties: false
    stickers_image_set:
      type: object
      properties:
        base_url:
          type: string
          format: uri
          description: 'Base URL for images in set'
          required: true
        version:
          type: integer
          description: 'Version number to be appended to the image URL'
      additionalProperties: false
    storage_value:
      type: object
      properties:
        key:
          type: string
          required: true
        value:
          type: string
          required: true
      additionalProperties: false
    store_product:
      type: object
      properties:
        id:
          type: integer
          description: 'Id of the product'
          required: true
        type:
          type: string
          description: 'Product type'
          enum:
            - stickers
          required: true
        is_new:
          type: boolean
          description: "Information whether sticker product wasn't used after being purchased"
        purchased:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether the product is purchased (1 - yes, 0 - no)'
        active:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether the product is active (1 - yes, 0 - no)'
        promoted:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether the product is promoted (1 - yes, 0 - no)'
        purchase_date:
          type: integer
          minimum: 0
          description: 'Date (Unix time) when the product was purchased'
        title:
          type: string
          description: 'Title of the product'
        stickers:
          $ref: '#/components/schemas/base_stickers_list'
        style_sticker_ids:
          type: array
          items:
            type: integer
          description: 'Array of style sticker ids (for sticker pack styles)'
        icon:
          $ref: '#/components/schemas/store_product_icon'
          description: 'Array of icon images or icon set object of the product (for stickers product type)'
        previews:
          type: array
          items:
            $ref: '#/components/schemas/base_image'
          description: 'Array of preview images of the product (for stickers product type)'
        has_animation:
          type: boolean
          description: 'Information whether the product is an animated sticker pack (for stickers product type)'
        subtitle:
          type: string
          description: 'Subtitle of the product'
        payment_region:
          type: string
      additionalProperties: false
    store_product_icon:
      deprecated_from_version: '5.134'
      type: array
      items:
        $ref: '#/components/schemas/base_image'
    store_stickers_keyword:
      type: object
      properties:
        words:
          type: array
          items:
            type: string
          required: true
        user_stickers:
          $ref: '#/components/schemas/store_stickers_keyword_stickers'
        promoted_stickers:
          $ref: '#/components/schemas/store_stickers_keyword_stickers'
        stickers:
          type: array
          items:
            $ref: '#/components/schemas/store_stickers_keyword_sticker'
      additionalProperties: false
    store_stickers_keyword_sticker:
      type: object
      properties:
        pack_id:
          type: integer
          description: 'Pack id'
          required: true
        sticker_id:
          type: integer
          description: 'Sticker id'
          required: true
      additionalProperties: false
    store_stickers_keyword_stickers:
      type: object
      properties:
        $ref: '#/components/schemas/base_stickers_list'
    stories_clickable_area:
      type: object
      properties:
        x:
          type: integer
          required: true
        'y':
          type: integer
          required: true
      additionalProperties: false
    stories_clickable_sticker:
      type: object
      properties:
        clickable_area:
          type: array
          items:
            $ref: '#/components/schemas/stories_clickable_area'
          required: true
        id:
          type: integer
          description: 'Clickable sticker ID'
          required: true
        hashtag:
          type: string
        link_object:
          $ref: '#/components/schemas/base_link'
        mention:
          type: string
        tooltip_text:
          type: string
        owner_id:
          type: integer
          entity: owner
          format: int64
        story_id:
          type: integer
        question:
          type: string
        question_button:
          type: string
        place_id:
          type: integer
        market_item:
          $ref: '#/components/schemas/market_market_item'
        audio:
          $ref: '#/components/schemas/audio_audio'
        audio_start_time:
          type: integer
        style:
          type: string
          enum:
            - transparent
            - blue_gradient
            - red_gradient
            - underline
            - blue
            - green
            - white
            - question_reply
            - light
            - impressive
        type:
          type: string
          enum:
            - hashtag
            - mention
            - link
            - question
            - place
            - market_item
            - music
            - story_reply
            - owner
            - post
            - poll
            - sticker
            - app
            - situational_theme
          required: true
        subtype:
          type: string
          enum:
            - market_item
            - aliexpress_product
        post_owner_id:
          type: integer
          entity: owner
          format: int64
        post_id:
          type: integer
        poll:
          $ref: '#/components/schemas/polls_poll'
        color:
          type: string
          description: 'Color, hex format'
        sticker_id:
          type: integer
          description: 'Sticker ID'
        sticker_pack_id:
          type: integer
          description: 'Sticker pack ID'
        app:
          $ref: '#/components/schemas/apps_app_min'
        app_context:
          type: string
          description: 'Additional context for app sticker'
        has_new_interactions:
          type: boolean
          description: 'Whether current user has unread interaction with this app'
        is_broadcast_notify_allowed:
          type: boolean
          description: 'Whether current user allowed broadcast notify from this app'
        situational_theme_id:
          type: integer
        situational_app_url:
          type: string
      additionalProperties: false
    stories_clickable_stickers:
      type: object
      properties:
        clickable_stickers:
          type: array
          items:
            $ref: '#/components/schemas/stories_clickable_sticker'
          required: true
        original_height:
          type: integer
          minimum: 0
          required: true
        original_width:
          type: integer
          minimum: 0
          required: true
      additionalProperties: false
    stories_feed_item:
      type: object
      properties:
        type:
          type: string
          enum:
            - promo_stories
            - stories
            - live_active
            - live_finished
            - community_grouped_stories
            - app_grouped_stories
            - birthday
            - discover
            - advices
          description: 'Type of Feed Item'
          required: true
        id:
          type: string
        stories:
          type: array
          items:
            $ref: '#/components/schemas/stories_story'
          description: 'Author stories'
        grouped:
          type: array
          items:
            $ref: '#/components/schemas/stories_feed_item'
          description: 'Grouped stories of various authors (for types community_grouped_stories/app_grouped_stories type)'
        app:
          $ref: '#/components/schemas/apps_app_min'
          description: 'App, which stories has been grouped (for type app_grouped_stories)'
        promo_data:
          $ref: '#/components/schemas/stories_promo_block'
          description: 'Additional data for promo stories (for type promo_stories)'
        birthday_user_id:
          type: integer
        track_code:
          type: string
        has_unseen:
          type: boolean
        name:
          type: string
      additionalProperties: false
    stories_promo_block:
      type: object
      description: 'Additional data for promo stories'
      properties:
        name:
          type: string
          description: 'Promo story title'
          required: true
        photo_50:
          type: string
          description: 'RL of square photo of the story with 50 pixels in width'
          required: true
        photo_100:
          type: string
          description: 'RL of square photo of the story with 100 pixels in width'
          required: true
        not_animated:
          type: boolean
          description: 'Hide animation for promo story'
          required: true
      additionalProperties: false
    stories_replies:
      type: object
      properties:
        count:
          type: integer
          description: 'Replies number.'
          minimum: 0
          required: true
        new:
          type: integer
          description: 'New replies number.'
      additionalProperties: false
    stories_stat_line:
      type: object
      properties:
        name:
          type: string
          required: true
        counter:
          type: integer
          minimum: 0
        is_unavailable:
          type: boolean
      additionalProperties: false
    stories_story:
      type: object
      properties:
        access_key:
          type: string
          description: 'Access key for private object.'
        can_comment:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether current user can comment the story (0 - no, 1 - yes).'
        can_reply:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether current user can reply to the story (0 - no, 1 - yes).'
        can_see:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether current user can see the story (0 - no, 1 - yes).'
        can_like:
          type: boolean
          description: 'Information whether current user can like the story.'
        can_share:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether current user can share the story (0 - no, 1 - yes).'
        can_hide:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether current user can hide the story (0 - no, 1 - yes).'
        date:
          type: integer
          minimum: 0
          description: 'Date when story has been added in Unixtime.'
        expires_at:
          type: integer
          minimum: 0
          description: 'Story expiration time. Unixtime.'
        id:
          type: integer
          description: 'Story ID.'
          required: true
        is_deleted:
          type: boolean
          description: 'Information whether the story is deleted (false - no, true - yes).'
        is_expired:
          type: boolean
          description: 'Information whether the story is expired (false - no, true - yes).'
        link:
          $ref: '#/components/schemas/stories_story_link'
        owner_id:
          type: integer
          description: "Story owner's ID."
          entity: owner
          format: int64
          required: true
        parent_story:
          $ref: '#/components/schemas/stories_story'
        parent_story_access_key:
          type: string
          description: 'Access key for private object.'
        parent_story_id:
          type: integer
          description: 'Parent story ID.'
        parent_story_owner_id:
          type: integer
          description: "Parent story owner's ID."
        photo:
          $ref: '#/components/schemas/photos_photo'
        replies:
          description: 'Replies counters to current story.'
          $ref: '#/components/schemas/stories_replies'
        seen:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether current user has seen the story or not (0 - no, 1 - yes).'
        type:
          $ref: '#/components/schemas/stories_story_type'
        clickable_stickers:
          $ref: '#/components/schemas/stories_clickable_stickers'
        video:
          $ref: '#/components/schemas/video_video_full'
        views:
          type: integer
          minimum: 0
          description: 'Views number.'
        can_ask:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether story has question sticker and current user can send question to the author'
        can_ask_anonymous:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether story has question sticker and current user can send anonymous question to the author'
        narratives_count:
          type: integer
        first_narrative_title:
          type: string
        birthday_wish_user_id:
          type: integer
        can_use_in_narrative:
          type: boolean
      additionalProperties: false
    stories_story_link:
      type: object
      properties:
        text:
          type: string
          description: 'Link text'
          required: true
        url:
          type: string
          format: uri
          description: 'Link URL'
          required: true
        link_url_target:
          type: string
          description: 'How to open url'
      additionalProperties: false
    stories_story_stats:
      type: object
      properties:
        answer:
          $ref: '#/components/schemas/stories_story_stats_stat'
          required: true
        bans:
          $ref: '#/components/schemas/stories_story_stats_stat'
          required: true
        open_link:
          $ref: '#/components/schemas/stories_story_stats_stat'
          required: true
        replies:
          $ref: '#/components/schemas/stories_story_stats_stat'
          required: true
        shares:
          $ref: '#/components/schemas/stories_story_stats_stat'
          required: true
        subscribers:
          $ref: '#/components/schemas/stories_story_stats_stat'
          required: true
        views:
          $ref: '#/components/schemas/stories_story_stats_stat'
          required: true
        likes:
          $ref: '#/components/schemas/stories_story_stats_stat'
          required: true
      additionalProperties: false
    stories_story_stats_stat:
      type: object
      properties:
        count:
          type: integer
          description: 'Stat value'
          minimum: 0
        state:
          $ref: '#/components/schemas/stories_story_stats_state'
          required: true
      additionalProperties: false
    stories_story_stats_state:
      type: string
      description: 'Statistic state'
      enum:
        - 'on'
        - 'off'
        - hidden
    stories_story_type:
      type: string
      description: 'Story type.'
      enum:
        - photo
        - video
        - live_active
        - live_finished
        - birthday_invite
    stories_upload_link_text:
      type: string
      enum:
        - to_store
        - vote
        - more
        - book
        - order
        - enroll
        - fill
        - signup
        - buy
        - ticket
        - write
        - open
        - learn_more
        - view
        - go_to
        - contact
        - watch
        - play
        - install
        - read
        - calendar
    stories_viewers_item:
      type: object
      properties:
        is_liked:
          type: boolean
          description: 'user has like for this object'
          required: true
        user_id:
          type: integer
          description: 'user id'
          entity: owner
          format: int64
          required: true
        user:
          $ref: '#/components/schemas/users_user_full'
      additionalProperties: false
    users_career:
      type: object
      properties:
        city_id:
          type: integer
          description: 'City ID'
        city_name:
          type: string
          description: 'City name'
        company:
          type: string
          description: 'Company name'
        country_id:
          type: integer
          description: 'Country ID'
        from:
          type: integer
          description: 'From year'
        group_id:
          type: integer
          description: 'Community ID'
          entity: groups
          format: int64
        id:
          type: integer
          description: 'Career ID'
        position:
          type: string
          description: Position
        until:
          type: integer
          description: 'Till year'
      additionalProperties: false
    users_exports:
      type: object
      properties:
        facebook:
          type: integer
        livejournal:
          type: integer
        twitter:
          type: integer
      additionalProperties: false
    users_fields:
      type: string
      enum:
        - first_name_nom
        - first_name_gen
        - first_name_dat
        - first_name_acc
        - first_name_ins
        - first_name_abl
        - last_name_nom
        - last_name_gen
        - last_name_dat
        - last_name_acc
        - last_name_ins
        - last_name_abl
        - photo_id
        - verified
        - sex
        - bdate
        - bdate_visibility
        - city
        - country
        - home_town
        - has_photo
        - photo
        - photo_rec
        - photo_50
        - photo_100
        - photo_200_orig
        - photo_200
        - photo_400
        - photo_400_orig
        - photo_big
        - photo_medium
        - photo_medium_rec
        - photo_max
        - photo_max_orig
        - photo_max_size
        - third_party_buttons
        - online
        - lists
        - domain
        - has_mobile
        - contacts
        - language
        - site
        - education
        - universities
        - schools
        - status
        - last_seen
        - followers_count
        - counters
        - common_count
        - online_info
        - occupation
        - nickname
        - relatives
        - relation
        - personal
        - connections
        - exports
        - wall_comments
        - wall_default
        - activities
        - activity
        - interests
        - music
        - movies
        - tv
        - books
        - is_no_index
        - games
        - about
        - quotes
        - can_post
        - can_see_all_posts
        - can_see_audio
        - can_see_gifts
        - work
        - places
        - can_write_private_message
        - can_send_friend_request
        - can_upload_doc
        - is_favorite
        - is_hidden_from_feed
        - timezone
        - screen_name
        - maiden_name
        - crop_photo
        - is_friend
        - friend_status
        - career
        - military
        - blacklisted
        - blacklisted_by_me
        - can_subscribe_posts
        - descriptions
        - trending
        - mutual
        - friendship_weeks
        - can_invite_to_chats
        - stories_archive_count
        - has_unseen_stories
        - video_live
        - video_live_level
        - video_live_count
        - clips_count
        - service_description
        - can_see_wishes
        - is_subscribed_podcasts
        - can_subscribe_podcasts
    users_last_seen:
      type: object
      properties:
        platform:
          type: integer
          description: 'Type of the platform that used for the last authorization'
        time:
          type: integer
          description: 'Last visit date (in Unix time)'
      additionalProperties: false
    users_military:
      type: object
      properties:
        country_id:
          type: integer
          description: 'Country ID'
          required: true
        from:
          type: integer
          description: 'From year'
        id:
          type: integer
          description: 'Military ID'
        unit:
          type: string
          description: 'Unit name'
          required: true
        unit_id:
          type: integer
          description: 'Unit ID'
          required: true
        until:
          type: integer
          description: 'Till year'
      additionalProperties: false
    users_occupation:
      type: object
      properties:
        id:
          type: integer
          description: 'ID of school, university, company group'
          minimum: 0
        name:
          type: string
          description: 'Name of occupation'
        type:
          type: string
          description: 'Type of occupation'
      additionalProperties: false
    users_online_info:
      type: object
      properties:
        visible:
          type: boolean
          description: 'Whether you can see real online status of user or not'
          required: true
        last_seen:
          type: integer
          description: 'Last time we saw user being active'
          minimum: 0
        is_online:
          type: boolean
          description: 'Whether user is currently online or not'
        app_id:
          type: integer
          description: 'Application id from which user is currently online or was last seen online'
          minimum: 0
        is_mobile:
          type: boolean
          description: 'Is user online from desktop app or mobile app'
        status:
          type: string
          description: 'In case user online is not visible, it indicates approximate timeframe of user online'
          enum:
            - recently
            - last_week
            - last_month
            - long_ago
            - not_show
      additionalProperties: false
    users_personal:
      type: object
      properties:
        alcohol:
          type: integer
          description: "User's views on alcohol"
        inspired_by:
          type: string
          description: "User's inspired by"
        langs:
          type: array
          items:
            type: string
            description: "User's languages"
        life_main:
          type: integer
          description: "User's personal priority in life"
        people_main:
          type: integer
          description: "User's personal priority in people"
        political:
          type: integer
          description: "User's political views"
        religion:
          type: string
          description: "User's religion"
        religion_id:
          type: integer
          description: "User's religion id"
        smoking:
          type: integer
          description: "User's views on smoking"
      additionalProperties: false
    users_relative:
      type: object
      properties:
        birth_date:
          type: string
          description: 'Date of child birthday (format dd.mm.yyyy)'
        id:
          type: integer
          entity: owner
          format: int64
          description: 'Relative ID'
        name:
          type: string
          description: 'Name of relative'
        type:
          type: string
          description: 'Relative type'
          enum:
            - parent
            - child
            - grandparent
            - grandchild
            - sibling
          required: true
      additionalProperties: false
    users_school:
      type: object
      properties:
        city:
          type: integer
          description: 'City ID'
        class:
          type: string
          description: 'School class letter'
        country:
          type: integer
          description: 'Country ID'
        id:
          type: string
          description: 'School ID'
        name:
          type: string
          description: 'School name'
        type:
          type: integer
          description: 'School type ID'
        type_str:
          type: string
          description: 'School type name'
        year_from:
          type: integer
          description: 'Year the user started to study'
        year_graduated:
          type: integer
          description: 'Graduation year'
        year_to:
          type: integer
          description: 'Year the user finished to study'
        speciality:
          type: string
      additionalProperties: false
    users_subscriptions_item:
      type: object
      oneOf:
        -
          $ref: '#/components/schemas/users_user_xtr_type'
        -
          $ref: '#/components/schemas/groups_group_full'
    users_university:
      type: object
      properties:
        chair:
          type: integer
          description: 'Chair ID'
        chair_name:
          type: string
          description: 'Chair name'
        city:
          type: integer
          description: 'City ID'
        country:
          type: integer
          description: 'Country ID'
        education_form:
          type: string
          description: 'Education form'
        education_status:
          type: string
          description: 'Education status'
        faculty:
          type: integer
          description: 'Faculty ID'
        faculty_name:
          type: string
          description: 'Faculty name'
        graduation:
          type: integer
          description: 'Graduation year'
        id:
          type: integer
          description: 'University ID'
        name:
          type: string
          description: 'University name'
        university_group_id:
          type: integer
      additionalProperties: false
    users_user:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/users_user_min'
        -
          properties:
            sex:
              $ref: '#/components/schemas/base_sex'
              description: 'User sex'
            screen_name:
              type: string
              description: "Domain name of the user's page"
            photo_50:
              type: string
              format: uri
              description: 'URL of square photo of the user with 50 pixels in width'
            photo_100:
              type: string
              format: uri
              description: 'URL of square photo of the user with 100 pixels in width'
            online_info:
              $ref: '#/components/schemas/users_online_info'
            online:
              description: 'Information whether the user is online'
              $ref: '#/components/schemas/base_bool_int'
            online_mobile:
              description: 'Information whether the user is online in mobile site or application'
              $ref: '#/components/schemas/base_bool_int'
            online_app:
              type: integer
              description: 'Application ID'
            verified:
              $ref: '#/components/schemas/base_bool_int'
              description: 'Information whether the user is verified'
            trending:
              $ref: '#/components/schemas/base_bool_int'
              description: 'Information whether the user has a "fire" pictogram.'
            friend_status:
              $ref: '#/components/schemas/friends_friend_status_status'
            mutual:
              $ref: '#/components/schemas/friends_requests_mutual'
      additionalProperties: false
    users_user_connections:
      type: object
      properties:
        skype:
          type: string
          description: "User's Skype nickname"
          required: true
        facebook:
          type: string
          description: "User's Facebook account"
          required: true
        facebook_name:
          type: string
          description: "User's Facebook name"
        twitter:
          type: string
          description: "User's Twitter account"
          required: true
        livejournal:
          type: string
          description: "User's Livejournal account"
        instagram:
          type: string
          description: "User's Instagram account"
          required: true
      additionalProperties: false
    users_user_counters:
      type: object
      properties:
        albums:
          type: integer
          description: 'Albums number'
        badges:
          type: integer
          description: 'Badges number'
        audios:
          type: integer
          description: 'Audios number'
        followers:
          type: integer
          description: 'Followers number'
        friends:
          type: integer
          description: 'Friends number'
        gifts:
          type: integer
          description: 'Gifts number'
        groups:
          type: integer
          description: 'Communities number'
        notes:
          type: integer
          description: 'Notes number'
        online_friends:
          type: integer
          description: 'Online friends number'
        pages:
          type: integer
          description: 'Public pages number'
        photos:
          type: integer
          description: 'Photos number'
        subscriptions:
          type: integer
          description: 'Subscriptions number'
        user_photos:
          type: integer
          description: 'Number of photos with user'
        user_videos:
          type: integer
          description: 'Number of videos with user'
        videos:
          type: integer
          description: 'Videos number'
        new_photo_tags:
          type: integer
        new_recognition_tags:
          type: integer
        mutual_friends:
          type: integer
        posts:
          type: integer
        articles:
          type: integer
        wishes:
          type: integer
        podcasts:
          type: integer
        clips:
          type: integer
        clips_followers:
          type: integer
      additionalProperties: false
    users_user_full:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/users_user'
        -
          properties:
            first_name_nom:
              type: string
              description: "User's first name in nominative case"
            first_name_gen:
              type: string
              description: "User's first name in genitive case"
            first_name_dat:
              type: string
              description: "User's first name in dative case"
            first_name_acc:
              type: string
              description: "User's first name in accusative case"
            first_name_ins:
              type: string
              description: "User's first name in instrumental case"
            first_name_abl:
              type: string
              description: "User's first name in prepositional case"
            last_name_nom:
              type: string
              description: "User's last name in nominative case"
            last_name_gen:
              type: string
              description: "User's last name in genitive case"
            last_name_dat:
              type: string
              description: "User's last name in dative case"
            last_name_acc:
              type: string
              description: "User's last name in accusative case"
            last_name_ins:
              type: string
              description: "User's last name in instrumental case"
            last_name_abl:
              type: string
              description: "User's last name in prepositional case"
            nickname:
              type: string
              description: 'User nickname'
            maiden_name:
              type: string
              description: 'User maiden name'
            contact_name:
              type: string
              description: 'User contact name'
            domain:
              type: string
              description: "Domain name of the user's page"
            bdate:
              type: string
              description: "User's date of birth"
            city:
              $ref: '#/components/schemas/base_city'
            country:
              $ref: '#/components/schemas/base_country'
            timezone:
              type: number
              description: "User's timezone"
            owner_state:
              $ref: '#/components/schemas/owner_state'
            photo_200:
              type: string
              format: uri
              description: 'URL of square photo of the user with 200 pixels in width'
            photo_max:
              type: string
              format: uri
              description: 'URL of square photo of the user with maximum width'
            photo_200_orig:
              type: string
              format: uri
              description: "URL of user's photo with 200 pixels in width"
            photo_400_orig:
              type: string
              format: uri
              description: "URL of user's photo with 400 pixels in width"
            photo_max_orig:
              type: string
              format: uri
              description: "URL of user's photo of maximum size"
            photo_id:
              type: string
              description: "ID of the user's main photo"
            has_photo:
              $ref: '#/components/schemas/base_bool_int'
              description: 'Information whether the user has main photo'
            has_mobile:
              description: 'Information whether the user specified his phone number'
              $ref: '#/components/schemas/base_bool_int'
            is_friend:
              description: 'Information whether the user is a friend of current user'
              $ref: '#/components/schemas/base_bool_int'
            wall_comments:
              description: 'Information whether current user can comment wall posts'
              $ref: '#/components/schemas/base_bool_int'
            can_post:
              description: "Information whether current user can post on the user's wall"
              $ref: '#/components/schemas/base_bool_int'
            can_see_all_posts:
              description: "Information whether current user can see other users' audio on the wall"
              $ref: '#/components/schemas/base_bool_int'
            can_see_audio:
              description: "Information whether current user can see the user's audio"
              $ref: '#/components/schemas/base_bool_int'
            type:
              $ref: '#/components/schemas/users_user_type'
            email:
              type: string
            skype:
              type: string
            facebook:
              type: string
            facebook_name:
              type: string
            twitter:
              type: string
            livejournal:
              type: string
            instagram:
              type: string
            test:
              $ref: '#/components/schemas/base_bool_int'
            video_live:
              $ref: '#/components/schemas/video_live_info'
            is_video_live_notifications_blocked:
              $ref: '#/components/schemas/base_bool_int'
            is_service:
              type: boolean
            service_description:
              type: string
            photo_rec:
              $ref: '#/components/schemas/photos_photo_falseable'
            photo_medium:
              $ref: '#/components/schemas/photos_photo_falseable'
            photo_medium_rec:
              $ref: '#/components/schemas/photos_photo_falseable'
            photo:
              type: string
            photo_big:
              type: string
            photo_400:
              type: string
            photo_max_size:
              $ref: '#/components/schemas/photos_photo'
            language:
              type: string
            stories_archive_count:
              type: integer
            has_unseen_stories:
              type: boolean
            wall_default:
              type: string
              enum:
                - owner
                - all
            can_call:
              description: 'Information whether current user can call'
              type: boolean
            can_call_from_group:
              description: 'Information whether group can call user'
              type: boolean
            can_see_wishes:
              description: "Information whether current user can see the user's wishes"
              type: boolean
            can_see_gifts:
              description: "Information whether current user can see the user's gifts"
              $ref: '#/components/schemas/base_bool_int'
            interests:
              type: string
            books:
              type: string
            tv:
              type: string
            quotes:
              type: string
            about:
              type: string
            games:
              type: string
            movies:
              type: string
            activities:
              type: string
            music:
              type: string
            can_write_private_message:
              description: 'Information whether current user can write private message'
              $ref: '#/components/schemas/base_bool_int'
            can_send_friend_request:
              description: 'Information whether current user can send a friend request'
              $ref: '#/components/schemas/base_bool_int'
            can_be_invited_group:
              type: boolean
              description: 'Information whether current user can be invited to the community'
            mobile_phone:
              type: string
              description: "User's mobile phone number"
            home_phone:
              type: string
              description: "User's additional phone number"
            site:
              type: string
              description: "User's website"
            status_audio:
              $ref: '#/components/schemas/audio_audio'
            status:
              type: string
              description: "User's status"
            activity:
              type: string
              description: "User's status"
            last_seen:
              $ref: '#/components/schemas/users_last_seen'
            exports:
              $ref: '#/components/schemas/users_exports'
            crop_photo:
              $ref: '#/components/schemas/base_crop_photo'
            followers_count:
              type: integer
              description: "Number of user's followers"
              minimum: 0
            video_live_level:
              type: integer
              description: 'User level in live streams achievements'
              minimum: 0
            video_live_count:
              type: integer
              description: "Number of user's live streams"
              minimum: 0
            clips_count:
              type: integer
              description: "Number of user's clips"
              minimum: 0
            blacklisted:
              description: "Information whether current user is in the requested user's blacklist."
              $ref: '#/components/schemas/base_bool_int'
            blacklisted_by_me:
              description: "Information whether the requested user is in current user's blacklist"
              $ref: '#/components/schemas/base_bool_int'
            is_favorite:
              description: 'Information whether the requested user is in faves of current user'
              $ref: '#/components/schemas/base_bool_int'
            is_hidden_from_feed:
              description: "Information whether the requested user is hidden from current user's newsfeed"
              $ref: '#/components/schemas/base_bool_int'
            common_count:
              type: integer
              description: 'Number of common friends with current user'
              minimum: 0
            occupation:
              $ref: '#/components/schemas/users_occupation'
            career:
              type: array
              items:
                $ref: '#/components/schemas/users_career'
            military:
              type: array
              items:
                $ref: '#/components/schemas/users_military'
            university:
              type: integer
              description: 'University ID'
            university_name:
              type: string
              description: 'University name'
            university_group_id:
              type: integer
            faculty:
              type: integer
              description: 'Faculty ID'
            faculty_name:
              type: string
              description: 'Faculty name'
            graduation:
              type: integer
              description: 'Graduation year'
            education_form:
              type: string
              description: 'Education form'
            education_status:
              type: string
              description: "User's education status"
            home_town:
              type: string
              description: 'User hometown'
            relation:
              $ref: '#/components/schemas/users_user_relation'
              description: 'User relationship status'
            relation_partner:
              $ref: '#/components/schemas/users_user_min'
            personal:
              $ref: '#/components/schemas/users_personal'
            universities:
              type: array
              items:
                $ref: '#/components/schemas/users_university'
            schools:
              type: array
              items:
                $ref: '#/components/schemas/users_school'
            relatives:
              type: array
              items:
                $ref: '#/components/schemas/users_relative'
            is_subscribed_podcasts:
              description: 'Information whether current user is subscribed to podcasts'
              type: boolean
            can_subscribe_podcasts:
              description: 'Owner in whitelist or not'
              type: boolean
            can_subscribe_posts:
              description: 'Can subscribe to wall'
              type: boolean
            counters:
              $ref: '#/components/schemas/users_user_counters'
            access_key:
              type: string
            can_upload_doc:
              $ref: '#/components/schemas/base_bool_int'
            hash:
              type: string
            is_no_index:
              type: boolean
              description: 'Access to user profile is restricted for search engines'
            contact_id:
              type: integer
              description: 'Contact person ID'
            is_message_request:
              type: boolean
            descriptions:
              type: array
              items:
                type: string
            lists:
              type: array
              items:
                type: integer
                description: 'IDs of friend lists with user'
          additionalProperties: false
      additionalProperties: false
    users_user_min:
      type: object
      properties:
        properties:
          deactivated:
            type: string
            description: 'Returns if a profile is deleted or blocked'
          first_name:
            type: string
            description: 'User first name'
          hidden:
            type: integer
            description: 'Returns if a profile is hidden.'
          id:
            type: integer
            entity: owner
            format: int64
            description: 'User ID'
            required: true
          last_name:
            type: string
            description: 'User last name'
          can_access_closed:
            type: boolean
          is_closed:
            type: boolean
    users_user_relation:
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
      enumNames:
        - 'not specified'
        - single
        - 'in a relationship'
        - engaged
        - married
        - complicated
        - 'actively searching'
        - 'in love'
        - 'in a civil union'
    users_user_settings_xtr:
      type: object
      properties:
        connections:
          $ref: '#/components/schemas/users_user_connections'
        bdate:
          type: string
          description: "User's date of birth"
        bdate_visibility:
          type: integer
          minimum: 0
          description: "Information whether user's birthdate are hidden"
        city:
          $ref: '#/components/schemas/base_city'
        country:
          $ref: '#/components/schemas/base_country'
        first_name:
          type: string
          description: 'User first name'
        home_town:
          type: string
          description: "User's hometown"
          required: true
        last_name:
          type: string
          description: 'User last name'
        maiden_name:
          type: string
          description: 'User maiden name'
        name_request:
          $ref: '#/components/schemas/account_name_request'
        personal:
          $ref: '#/components/schemas/users_personal'
        phone:
          type: string
          description: 'User phone number with some hidden digits'
        relation:
          $ref: '#/components/schemas/users_user_relation'
          description: 'User relationship status'
        relation_partner:
          $ref: '#/components/schemas/users_user_min'
        relation_pending:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether relation status is pending'
        relation_requests:
          type: array
          items:
            $ref: '#/components/schemas/users_user_min'
        screen_name:
          type: string
          description: "Domain name of the user's page"
        sex:
          $ref: '#/components/schemas/base_sex'
          description: 'User sex'
        status:
          type: string
          description: 'User status'
          required: true
        status_audio:
          $ref: '#/components/schemas/audio_audio'
        interests:
          $ref: '#/components/schemas/account_user_settings_interests'
        languages:
          type: array
          items:
            type: string
      additionalProperties: false
    users_user_type:
      type: string
      description: 'Object type'
      enum:
        - profile
    users_user_xtr_type:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/users_user'
        -
          properties:
            type:
              $ref: '#/components/schemas/users_user_type'
      additionalProperties: false
    users_users_array:
      type: object
      properties:
        count:
          type: integer
          description: 'Users number'
          minimum: 0
          required: true
        items:
          type: array
          items:
            type: integer
            description: 'User ID'
            entity: profiles
            format: int64
          required: true
      additionalProperties: false
    utils_domain_resolved:
      type: object
      properties:
        object_id:
          type: integer
          description: 'Object ID'
        group_id:
          type: integer
          description: 'Group ID'
          entity: groups
          format: int64
        type:
          $ref: '#/components/schemas/utils_domain_resolved_type'
      additionalProperties: false
    utils_domain_resolved_type:
      type: string
      description: 'Object type'
      enum:
        - user
        - group
        - application
        - page
        - vk_app
        - community_application
    utils_last_shortened_link:
      type: object
      properties:
        access_key:
          type: string
          description: 'Access key for private stats'
        key:
          type: string
          description: 'Link key (characters after vk.cc/)'
        short_url:
          type: string
          format: uri
          description: 'Short link URL'
        timestamp:
          type: integer
          description: 'Creation time in Unixtime'
        url:
          type: string
          format: uri
          description: 'Full URL'
        views:
          type: integer
          description: 'Total views number'
      additionalProperties: false
    utils_link_checked:
      type: object
      properties:
        link:
          type: string
          format: uri
          description: 'Link URL'
        status:
          $ref: '#/components/schemas/utils_link_checked_status'
      additionalProperties: false
    utils_link_checked_status:
      type: string
      description: 'Link status'
      enum:
        - not_banned
        - banned
        - processing
    utils_link_stats:
      type: object
      properties:
        key:
          type: string
          description: 'Link key (characters after vk.cc/)'
        stats:
          type: array
          items:
            $ref: '#/components/schemas/utils_stats'
      additionalProperties: false
    utils_link_stats_extended:
      type: object
      properties:
        key:
          type: string
          description: 'Link key (characters after vk.cc/)'
        stats:
          type: array
          items:
            $ref: '#/components/schemas/utils_stats_extended'
      additionalProperties: false
    utils_short_link:
      type: object
      properties:
        access_key:
          type: string
          description: 'Access key for private stats'
        key:
          type: string
          description: 'Link key (characters after vk.cc/)'
        short_url:
          type: string
          format: uri
          description: 'Short link URL'
        url:
          type: string
          format: uri
          description: 'Full URL'
      additionalProperties: false
    utils_stats:
      type: object
      properties:
        timestamp:
          type: integer
          description: 'Start time'
        views:
          type: integer
          description: 'Total views number'
      additionalProperties: false
    utils_stats_city:
      type: object
      properties:
        city_id:
          type: integer
          description: 'City ID'
        views:
          type: integer
          description: 'Views number'
      additionalProperties: false
    utils_stats_country:
      type: object
      properties:
        country_id:
          type: integer
          description: 'Country ID'
        views:
          type: integer
          description: 'Views number'
      additionalProperties: false
    utils_stats_extended:
      type: object
      properties:
        cities:
          type: array
          items:
            $ref: '#/components/schemas/utils_stats_city'
        countries:
          type: array
          items:
            $ref: '#/components/schemas/utils_stats_country'
        sex_age:
          type: array
          items:
            $ref: '#/components/schemas/utils_stats_sex_age'
        timestamp:
          type: integer
          description: 'Start time'
        views:
          type: integer
          description: 'Total views number'
      additionalProperties: false
    utils_stats_sex_age:
      type: object
      properties:
        age_range:
          type: string
          description: 'Age denotation'
        female:
          type: integer
          description: ' Views by female users'
        male:
          type: integer
          description: ' Views by male users'
      additionalProperties: false
    video_live_info:
      type: object
      properties:
        enabled:
          $ref: '#/components/schemas/base_bool_int'
          required: true
        is_notifications_blocked:
          $ref: '#/components/schemas/base_bool_int'
      additionalProperties: false
    video_live_settings:
      description: 'Video live settings'
      type: object
      properties:
        can_rewind:
          description: 'If user car rewind live or not'
          $ref: '#/components/schemas/base_bool_int'
        is_endless:
          description: 'If live is endless or not'
          $ref: '#/components/schemas/base_bool_int'
        max_duration:
          description: 'Max possible time for rewind'
          type: integer
      additionalProperties: false
    video_save_result:
      type: object
      properties:
        access_key:
          type: string
          description: 'Video access key'
        description:
          type: string
          description: 'Video description'
        owner_id:
          type: integer
          description: 'Video owner ID'
          entity: owner
          format: int64
        title:
          type: string
          description: 'Video title'
        upload_url:
          type: string
          format: uri
          description: 'URL for the video uploading'
        video_id:
          type: integer
          description: 'Video ID'
      additionalProperties: false
    video_video:
      type: object
      properties:
        properties:
          access_key:
            type: string
            description: 'Video access key'
          adding_date:
            type: integer
            description: 'Date when the video has been added in Unixtime'
            minimum: 0
          can_comment:
            description: 'Information whether current user can comment the video'
            $ref: '#/components/schemas/base_bool_int'
          can_edit:
            description: 'Information whether current user can edit the video'
            $ref: '#/components/schemas/base_bool_int'
          can_like:
            description: 'Information whether current user can like the video'
            $ref: '#/components/schemas/base_bool_int'
          can_repost:
            $ref: '#/components/schemas/base_bool_int'
            description: 'Information whether current user can repost the video'
          can_subscribe:
            description: 'Information whether current user can subscribe to author of the video'
            $ref: '#/components/schemas/base_bool_int'
          can_add_to_faves:
            description: 'Information whether current user can add the video to favourites'
            $ref: '#/components/schemas/base_bool_int'
          can_add:
            description: 'Information whether current user can add the video'
            $ref: '#/components/schemas/base_bool_int'
          can_attach_link:
            description: 'Information whether current user can attach action button to the video'
            $ref: '#/components/schemas/base_bool_int'
          is_private:
            description: '1 if video is private'
            $ref: '#/components/schemas/base_bool_int'
          comments:
            type: integer
            description: 'Number of comments'
            minimum: 0
          date:
            type: integer
            description: 'Date when video has been uploaded in Unixtime'
            minimum: 0
          description:
            type: string
            description: 'Video description'
          duration:
            type: integer
            description: 'Video duration in seconds'
            minimum: 0
          image:
            type: array
            items:
              $ref: '#/components/schemas/video_video_image'
          first_frame:
            type: array
            items:
              $ref: '#/components/schemas/video_video_image'
          width:
            type: integer
            minimum: 0
            description: 'Video width'
          height:
            type: integer
            minimum: 0
            description: 'Video height'
          id:
            type: integer
            minimum: 0
            description: 'Video ID'
          owner_id:
            type: integer
            entity: owner
            description: 'Video owner ID'
            format: int64
          user_id:
            type: integer
            minimum: 0
            description: 'Id of the user who uploaded the video if it was uploaded to a group by member'
            entity: owner
            format: int64
          title:
            type: string
            description: 'Video title'
          is_favorite:
            type: boolean
            description: 'Whether video is added to bookmarks'
          player:
            type: string
            format: uri
            description: 'Video embed URL'
          processing:
            description: 'Returns if the video is processing'
            $ref: '#/components/schemas/base_property_exists'
          converting:
            $ref: '#/components/schemas/base_bool_int'
            description: '1 if  video is being converted'
          added:
            $ref: '#/components/schemas/base_bool_int'
            description: "1 if video is added to user's albums"
          is_subscribed:
            $ref: '#/components/schemas/base_bool_int'
            description: '1 if user is subscribed to author of the video'
          track_code:
            type: string
          repeat:
            description: 'Information whether the video is repeated'
            $ref: '#/components/schemas/base_property_exists'
          type:
            type: string
            enum:
              - video
              - music_video
              - movie
          views:
            type: integer
            description: 'Number of views'
            minimum: 0
          local_views:
            type: integer
            description: 'If video is external, number of views on vk'
            minimum: 0
          content_restricted:
            type: integer
            minimum: 0
            description: 'Restriction code'
          content_restricted_message:
            type: string
            description: 'Restriction text'
          balance:
            type: integer
            description: 'Live donations balance'
            minimum: 0
          live_status:
            type: string
            description: 'Live stream status'
            enum:
              - waiting
              - started
              - finished
              - failed
              - upcoming
          live:
            description: '1 if the video is a live stream'
            $ref: '#/components/schemas/base_property_exists'
          upcoming:
            description: '1 if the video is an upcoming stream'
            $ref: '#/components/schemas/base_property_exists'
          live_start_time:
            description: 'Date in Unixtime when the live stream is scheduled to start by the author'
            type: integer
            minimum: 0
          live_notify:
            description: 'Whether current user is subscribed to the upcoming live stream notification (if not subscribed to the author)'
            $ref: '#/components/schemas/base_bool_int'
          spectators:
            type: integer
            minimum: 0
            description: 'Number of spectators of the stream'
          platform:
            type: string
            description: 'External platform'
          likes:
            $ref: '#/components/schemas/base_likes'
          reposts:
            $ref: '#/components/schemas/base_reposts_info'
    video_video_album:
      type: object
      properties:
        id:
          type: integer
          description: 'Album ID'
          required: true
        owner_id:
          type: integer
          description: "Album owner's ID"
          entity: owner
          format: int64
          required: true
        title:
          type: string
          description: 'Album title'
          required: true
      additionalProperties: false
    video_video_album_full:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/video_video_album'
        -
          type: object
          properties:
            count:
              type: integer
              minimum: 0
              description: 'Total number of videos in album'
              required: true
            image:
              type: array
              items:
                $ref: '#/components/schemas/video_video_image'
              description: 'Album cover image in different sizes'
            image_blur:
              $ref: '#/components/schemas/base_property_exists'
              description: 'Need blur album thumb or not'
            is_system:
              $ref: '#/components/schemas/base_property_exists'
              description: 'Information whether album is system'
            updated_time:
              type: integer
              description: 'Date when the album has been updated last time in Unixtime'
              minimum: 0
              required: true
          additionalProperties: false
      additionalProperties: false
    video_video_files:
      type: object
      properties:
        external:
          type: string
          format: uri
          description: 'URL of the external player'
        mp4_144:
          type: string
          format: uri
          description: 'URL of the mpeg4 file with 144p quality'
        mp4_240:
          type: string
          format: uri
          description: 'URL of the mpeg4 file with 240p quality'
        mp4_360:
          type: string
          format: uri
          description: 'URL of the mpeg4 file with 360p quality'
        mp4_480:
          type: string
          format: uri
          description: 'URL of the mpeg4 file with 480p quality'
        mp4_720:
          type: string
          format: uri
          description: 'URL of the mpeg4 file with 720p quality'
        mp4_1080:
          type: string
          format: uri
          description: 'URL of the mpeg4 file with 1080p quality'
        mp4_1440:
          type: string
          format: uri
          description: 'URL of the mpeg4 file with 2K quality'
        mp4_2160:
          type: string
          format: uri
          description: 'URL of the mpeg4 file with 4K quality'
        flv_320:
          type: string
          format: uri
          description: 'URL of the flv file with 320p quality'
      minProperties: 1
      additionalProperties: false
    video_video_full:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/video_video'
        -
          properties:
            files:
              $ref: '#/components/schemas/video_video_files'
            trailer:
              $ref: '#/components/schemas/video_video_files'
            live_settings:
              description: 'Settings for live stream'
              $ref: '#/components/schemas/video_live_settings'
      additionalProperties: false
    video_video_image:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/base_image'
        -
          properties:
            with_padding:
              $ref: '#/components/schemas/base_property_exists'
      additionalProperties: false
    wall_app_post:
      type: object
      properties:
        id:
          type: integer
          description: 'Application ID'
        name:
          type: string
          description: 'Application name'
        photo_130:
          type: string
          format: uri
          description: 'URL of the preview image with 130 px in width'
        photo_604:
          type: string
          format: uri
          description: 'URL of the preview image with 604 px in width'
      additionalProperties: false
    wall_attached_note:
      type: object
      properties:
        comments:
          type: integer
          description: 'Comments number'
          minimum: 0
          required: true
        date:
          type: integer
          description: 'Date when the note has been created in Unixtime'
          minimum: 0
          required: true
        id:
          type: integer
          description: 'Note ID'
          minimum: 1
          required: true
        owner_id:
          type: integer
          description: "Note owner's ID"
          minimum: 1
          entity: owner
          format: int64
          required: true
        read_comments:
          type: integer
          description: 'Read comments number'
          minimum: 0
          required: true
        title:
          type: string
          description: 'Note title'
          required: true
        text:
          type: string
          description: 'Note text'
        privacy_view:
          type: array
          items:
            type: string
        privacy_comment:
          type: array
          items:
            type: string
        can_comment:
          type: integer
        text_wiki:
          type: string
          description: 'Note wiki text'
        view_url:
          type: string
          format: uri
          description: 'URL of the page with note preview'
          required: true
      additionalProperties: false
    wall_carousel_base:
      type: object
      properties:
        carousel_offset:
          type: integer
          minimum: 0
          description: 'Index of current carousel element'
      additionalProperties: false
    wall_comment_attachment:
      type: object
      properties:
        audio:
          $ref: '#/components/schemas/audio_audio'
        doc:
          $ref: '#/components/schemas/docs_doc'
        link:
          $ref: '#/components/schemas/base_link'
        market:
          $ref: '#/components/schemas/market_market_item'
        market_market_album:
          $ref: '#/components/schemas/market_market_album'
        note:
          $ref: '#/components/schemas/wall_attached_note'
        page:
          $ref: '#/components/schemas/pages_wikipage_full'
        photo:
          $ref: '#/components/schemas/photos_photo'
        sticker:
          $ref: '#/components/schemas/base_sticker'
        type:
          $ref: '#/components/schemas/wall_comment_attachment_type'
          required: true
        video:
          $ref: '#/components/schemas/video_video'
      additionalProperties: false
    wall_comment_attachment_type:
      type: string
      description: 'Attachment type'
      enum:
        - photo
        - audio
        - video
        - doc
        - link
        - note
        - page
        - market_market_album
        - market
        - sticker
    wall_geo:
      type: object
      properties:
        coordinates:
          type: string
          description: 'Coordinates as string. <latitude> <longtitude>'
        place:
          $ref: '#/components/schemas/base_place'
        showmap:
          type: integer
          description: 'Information whether a map is showed'
        type:
          type: string
          description: 'Place type'
          enum:
            - place
            - point
      additionalProperties: false
    wall_get_filter:
      description: "Filter to apply: 'owner' — posts by the wall owner, 'others' — posts by someone else, 'all' — posts by the wall owner and others (default), 'postponed' — timed posts (only available for calls with an 'access_token'), 'suggests' — suggested posts on a community wall"
      type: string
      enum:
        - owner
        - others
        - all
        - postponed
        - suggests
        - archived
        - donut
    wall_graffiti:
      type: object
      properties:
        id:
          type: integer
          description: 'Graffiti ID'
        owner_id:
          type: integer
          description: "Graffiti owner's ID"
          entity: owner
          format: int64
        photo_200:
          type: string
          format: uri
          description: 'URL of the preview image with 200 px in width'
        photo_586:
          type: string
          format: uri
          description: 'URL of the preview image with 586 px in width'
        height:
          type: integer
          description: 'Graffiti height'
          minimum: 0
        url:
          type: string
          format: uri
          description: 'Graffiti URL'
        width:
          type: integer
          description: 'Graffiti width'
          minimum: 0
        access_key:
          type: string
          description: 'Access key for graffiti'
      additionalProperties: false
    wall_post_copyright:
      type: object
      properties:
        id:
          type: integer
          entity: owner
          format: int64
        link:
          type: string
          required: true
        name:
          type: string
          required: true
        type:
          type: string
          required: true
      additionalProperties: false
    wall_post_source:
      type: object
      properties:
        data:
          type: string
          description: 'Additional data'
        platform:
          type: string
          description: 'Platform name'
        type:
          $ref: '#/components/schemas/wall_post_source_type'
        url:
          type: string
          format: uri
          description: 'URL to an external site used to publish the post'
        link:
          $ref: '#/components/schemas/base_link'
      additionalProperties: false
    wall_post_source_type:
      type: string
      description: 'Type of post source'
      enum:
        - vk
        - widget
        - api
        - rss
        - sms
        - mvk
    wall_post_type:
      type: string
      description: 'Post type'
      enum:
        - post
        - copy
        - reply
        - postpone
        - suggest
        - post_ads
        - photo
        - video
    wall_posted_photo:
      type: object
      properties:
        id:
          type: integer
          description: 'Photo ID'
        owner_id:
          type: integer
          description: "Photo owner's ID"
          entity: owner
          format: int64
        photo_130:
          type: string
          format: uri
          description: 'URL of the preview image with 130 px in width'
        photo_604:
          type: string
          format: uri
          description: 'URL of the preview image with 604 px in width'
      additionalProperties: false
    wall_views:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: Count
      additionalProperties: false
    wall_wall_comment:
      type: object
      properties:
        id:
          type: integer
          description: 'Comment ID'
          minimum: 1
          required: true
        from_id:
          type: integer
          entity: owner
          format: int64
          description: 'Author ID'
          required: true
        can_edit:
          $ref: '#/components/schemas/base_bool_int'
        post_id:
          type: integer
        owner_id:
          type: integer
          entity: owner
          format: int64
        parents_stack:
          type: array
          items:
            type: integer
        photo_id:
          type: integer
        video_id:
          type: integer
        date:
          type: integer
          description: 'Date when the comment has been added in Unixtime'
          minimum: 0
          required: true
        text:
          type: string
          description: 'Comment text'
          required: true
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/wall_comment_attachment'
        donut:
          $ref: '#/components/schemas/wall_wall_comment_donut'
        likes:
          $ref: '#/components/schemas/base_likes_info'
        real_offset:
          type: integer
          description: 'Real position of the comment'
        reply_to_user:
          type: integer
          entity: owner
          format: int64
          description: 'Replied user ID'
        reply_to_comment:
          type: integer
          description: 'Replied comment ID'
        thread:
          $ref: '#/components/schemas/comment_thread'
        deleted:
          type: boolean
        pid:
          type: integer
          minimum: 0
          description: 'Photo ID'
      additionalProperties: false
    wall_wall_comment_donut:
      type: object
      properties:
        is_don:
          description: 'Means commentator is donator'
          type: boolean
        placeholder:
          $ref: '#/components/schemas/wall_wall_comment_donut_placeholder'
      additionalProperties: false
    wall_wall_comment_donut_placeholder:
      type: object
      properties:
        text:
          type: string
          required: true
      additionalProperties: false
    wall_wallpost:
      type: object
      properties:
        access_key:
          type: string
          description: 'Access key to private object'
        is_deleted:
          type: boolean
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/wall_wallpost_attachment'
        copyright:
          $ref: '#/components/schemas/wall_post_copyright'
          description: 'Information about the source of the post'
        date:
          type: integer
          description: 'Date of publishing in Unixtime'
        edited:
          type: integer
          minimum: 0
          description: 'Date of editing in Unixtime'
        from_id:
          type: integer
          description: 'Post author ID'
          entity: owner
          format: int64
        geo:
          $ref: '#/components/schemas/wall_geo'
        id:
          type: integer
          description: 'Post ID'
        is_archived:
          type: boolean
          description: 'Is post archived, only for post owners'
        is_favorite:
          type: boolean
          description: 'Information whether the post in favorites list'
        likes:
          description: 'Count of likes'
          $ref: '#/components/schemas/base_likes_info'
        owner_id:
          type: integer
          description: "Wall owner's ID"
          entity: owner
          format: int64
        post_id:
          type: integer
          description: "If post type 'reply', contains original post ID"
        parents_stack:
          type: array
          items:
            type: integer
          description: "If post type 'reply', contains original parent IDs stack"
        post_source:
          $ref: '#/components/schemas/wall_post_source'
        post_type:
          $ref: '#/components/schemas/wall_post_type'
        reposts:
          $ref: '#/components/schemas/base_reposts_info'
        signer_id:
          type: integer
          description: 'Post signer ID'
          entity: owner
          format: int64
        text:
          type: string
          description: 'Post text'
        views:
          description: 'Count of views'
          $ref: '#/components/schemas/wall_views'
      additionalProperties: false
    wall_wallpost_attachment:
      type: object
      properties:
        access_key:
          type: string
          description: 'Access key for the audio'
        album:
          $ref: '#/components/schemas/photos_photo_album'
        app:
          $ref: '#/components/schemas/wall_app_post'
        audio:
          $ref: '#/components/schemas/audio_audio'
        doc:
          $ref: '#/components/schemas/docs_doc'
        event:
          $ref: '#/components/schemas/events_event_attach'
        group:
          $ref: '#/components/schemas/groups_group_attach'
        graffiti:
          $ref: '#/components/schemas/wall_graffiti'
        link:
          $ref: '#/components/schemas/base_link'
        market:
          $ref: '#/components/schemas/market_market_item'
        market_album:
          $ref: '#/components/schemas/market_market_album'
        note:
          $ref: '#/components/schemas/notes_note'
        page:
          $ref: '#/components/schemas/pages_wikipage_full'
        photo:
          $ref: '#/components/schemas/photos_photo'
        poll:
          $ref: '#/components/schemas/polls_poll'
        posted_photo:
          $ref: '#/components/schemas/wall_posted_photo'
        type:
          $ref: '#/components/schemas/wall_wallpost_attachment_type'
          required: true
        video:
          $ref: '#/components/schemas/video_video_full'
      additionalProperties: false
    wall_wallpost_attachment_type:
      type: string
      description: 'Attachment type'
      enum:
        - photo
        - photos_list
        - posted_photo
        - audio
        - audio_playlist
        - video
        - doc
        - link
        - graffiti
        - note
        - app
        - poll
        - page
        - album
        - market_album
        - market
        - event
        - donut_link
        - article
        - textlive
        - textpost
        - textpost_publish
        - situational_theme
        - group
        - sticker
        - podcast
    wall_wallpost_comments_donut:
      type: object
      properties:
        placeholder:
          $ref: '#/components/schemas/wall_wallpost_comments_donut_placeholder'
      additionalProperties: false
    wall_wallpost_comments_donut_placeholder:
      description: 'Info about paid comments feature'
      type: object
      properties:
        text:
          type: string
          required: true
      additionalProperties: false
    wall_wallpost_donut:
      description: 'Info about paid wall post'
      type: object
      properties:
        is_donut:
          description: 'Post only for dons'
          type: boolean
          required: true
        paid_duration:
          description: 'Value of this field need to pass in wall.post/edit in donut_paid_duration'
          type: integer
        placeholder:
          description: 'If placeholder was respond, text and all attachments will be hidden'
          $ref: '#/components/schemas/wall_wallpost_donut_placeholder'
        can_publish_free_copy:
          description: 'Says whether group admin can post free copy of this donut post'
          type: boolean
        edit_mode:
          description: 'Says what user can edit in post about donut properties'
          type: string
          enum:
            - all
            - duration
      additionalProperties: false
    wall_wallpost_donut_placeholder:
      type: object
      properties:
        text:
          type: string
          required: true
      additionalProperties: false
    wall_wallpost_full:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/wall_carousel_base'
        -
          $ref: '#/components/schemas/wall_wallpost'
        -
          properties:
            copy_history:
              type: array
              items:
                $ref: '#/components/schemas/wall_wallpost_full'
            can_edit:
              $ref: '#/components/schemas/base_bool_int'
              description: 'Information whether current user can edit the post'
            created_by:
              type: integer
              description: 'Post creator ID (if post still can be edited)'
              entity: owner
              format: int64
            can_delete:
              $ref: '#/components/schemas/base_bool_int'
              description: 'Information whether current user can delete the post'
            can_pin:
              $ref: '#/components/schemas/base_bool_int'
              description: 'Information whether current user can pin the post'
            donut:
              $ref: '#/components/schemas/wall_wallpost_donut'
            is_pinned:
              type: integer
              description: 'Information whether the post is pinned'
            comments:
              $ref: '#/components/schemas/base_comments_info'
            marked_as_ads:
              $ref: '#/components/schemas/base_bool_int'
              description: 'Information whether the post is marked as ads'
            topic_id:
              type: integer
              minimum: 0
              description: 'Topic ID. Allowed values can be obtained from newsfeed.getPostTopics method'
              enum:
                - 0
                - 1
                - 7
                - 12
                - 16
                - 19
                - 21
                - 23
                - 25
                - 26
                - 32
                - 43
              enumNames:
                - empty_topic
                - art
                - it
                - games
                - music
                - photo
                - science_and_tech
                - sport
                - travel
                - tv_and_cinema
                - humor
                - fashion
            short_text_rate:
              type: number
              description: 'Preview length control parameter'
              minimum: 0
              maximum: 1
            hash:
              type: string
              description: 'Hash for sharing'
      additionalProperties: false
    wall_wallpost_to_id:
      type: object
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/wall_wallpost_attachment'
        comments:
          $ref: '#/components/schemas/base_comments_info'
        copy_owner_id:
          type: integer
          description: 'ID of the source post owner'
          entity: owner
          format: int64
        copy_post_id:
          type: integer
          description: 'ID of the source post'
        date:
          type: integer
          description: 'Date of publishing in Unixtime'
        from_id:
          type: integer
          description: 'Post author ID'
          entity: owner
          format: int64
        geo:
          $ref: '#/components/schemas/wall_geo'
        id:
          type: integer
          description: 'Post ID'
        is_favorite:
          type: boolean
          description: 'Information whether the post in favorites list'
        likes:
          $ref: '#/components/schemas/base_likes_info'
        post_id:
          type: integer
          description: 'wall post ID (if comment)'
        post_source:
          $ref: '#/components/schemas/wall_post_source'
        post_type:
          $ref: '#/components/schemas/wall_post_type'
        reposts:
          $ref: '#/components/schemas/base_reposts_info'
        signer_id:
          type: integer
          description: 'Post signer ID'
          entity: owner
          format: int64
        text:
          type: string
          description: 'Post text'
        to_id:
          type: integer
          description: "Wall owner's ID"
          entity: owner
          format: int64
      additionalProperties: false
    widgets_comment_media:
      type: object
      properties:
        item_id:
          type: integer
          description: 'Media item ID'
        owner_id:
          type: integer
          description: "Media owner's ID"
          entity: owner
          format: int64
        thumb_src:
          type: string
          format: uri
          description: 'URL of the preview image (type=photo only)'
        type:
          $ref: '#/components/schemas/widgets_comment_media_type'
      additionalProperties: false
    widgets_comment_media_type:
      type: string
      description: 'Media type'
      enum:
        - audio
        - photo
        - video
    widgets_comment_replies:
      type: object
      properties:
        can_post:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether current user can comment the post'
        count:
          type: integer
          minimum: 0
          description: 'Comments number'
        replies:
          type: array
          items:
            $ref: '#/components/schemas/widgets_comment_replies_item'
      additionalProperties: false
    widgets_comment_replies_item:
      type: object
      properties:
        cid:
          type: integer
          description: 'Comment ID'
        date:
          type: integer
          description: 'Date when the comment has been added in Unixtime'
        likes:
          $ref: '#/components/schemas/widgets_widget_likes'
        text:
          type: string
          description: 'Comment text'
        uid:
          type: integer
          description: 'User ID'
        user:
          $ref: '#/components/schemas/users_user_full'
      additionalProperties: false
    widgets_widget_comment:
      type: object
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/wall_comment_attachment'
        can_delete:
          $ref: '#/components/schemas/base_bool_int'
          description: 'Information whether current user can delete the comment'
        comments:
          $ref: '#/components/schemas/widgets_comment_replies'
        date:
          type: integer
          description: 'Date when the comment has been added in Unixtime'
          required: true
        from_id:
          type: integer
          description: 'Comment author ID'
          required: true
        id:
          type: integer
          description: 'Comment ID'
          required: true
        likes:
          $ref: '#/components/schemas/base_likes_info'
        media:
          $ref: '#/components/schemas/widgets_comment_media'
        post_source:
          $ref: '#/components/schemas/wall_post_source'
        post_type:
          type: integer
          description: 'Post type'
          required: true
        reposts:
          $ref: '#/components/schemas/base_reposts_info'
        text:
          type: string
          description: 'Comment text'
          required: true
        to_id:
          type: integer
          description: 'Wall owner'
          required: true
        user:
          $ref: '#/components/schemas/users_user_full'
      additionalProperties: false
    widgets_widget_likes:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: 'Likes number'
      additionalProperties: false
    widgets_widget_page:
      type: object
      properties:
        comments:
          $ref: '#/components/schemas/base_object_count'
        date:
          type: integer
          description: 'Date when widgets on the page has been initialized firstly in Unixtime'
        description:
          type: string
          description: 'Page description'
        id:
          type: integer
          description: 'Page ID'
        likes:
          $ref: '#/components/schemas/base_object_count'
        page_id:
          type: string
          description: 'page_id parameter value'
        photo:
          type: string
          format: uri
          description: 'URL of the preview image'
        title:
          type: string
          description: 'Page title'
        url:
          type: string
          format: uri
          description: 'Page absolute URL'
      additionalProperties: false
    account_changePassword_response:
      type: object
      properties:
        response:
          type: object
          properties:
            token:
              type: string
              description: 'New token'
              required: true
            secret:
              type: string
              description: 'New secret'
          additionalProperties: false
          required: true
      additionalProperties: false
    account_getActiveOffers_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/account_offer'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    account_getAppPermissions_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Permissions mask'
          required: true
      additionalProperties: false
    account_getBanned_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                entity: owner
                format: int64
                type: integer
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group'
          additionalProperties: false
          required: true
      additionalProperties: false
    account_getCounters_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/account_account_counters'
          required: true
      additionalProperties: false
    account_getInfo_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/account_info'
          required: true
      additionalProperties: false
    account_getProfileInfo_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/account_user_settings'
          required: true
      additionalProperties: false
    account_getPushSettings_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/account_push_settings'
          required: true
      additionalProperties: false
    account_saveProfileInfo_response:
      type: object
      properties:
        response:
          type: object
          properties:
            changed:
              description: '1 if changes has been processed'
              $ref: '#/components/schemas/base_bool_int'
              required: true
            name_request:
              $ref: '#/components/schemas/account_name_request'
          additionalProperties: false
          required: true
      additionalProperties: false
    ads_addOfficeUsers_response:
      type: object
      properties:
        response:
          type: boolean
          description: 'true if success'
          required: true
      additionalProperties: false
    ads_checkLink_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/ads_link_status'
          required: true
      additionalProperties: false
    ads_createAds_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_create_ad_status'
          required: true
      additionalProperties: false
    ads_createCampaigns_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_create_campaign_status'
          required: true
      additionalProperties: false
    ads_createClients_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: integer
            description: 'Client ID'
          required: true
      additionalProperties: false
    ads_createTargetGroup_response:
      type: object
      properties:
        response:
          type: object
          properties:
            id:
              type: integer
              description: 'Group ID'
            pixel:
              type: string
              description: 'Pixel code'
          additionalProperties: false
          required: true
      additionalProperties: false
    ads_deleteAds_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: integer
            description: '0 if success'
          required: true
      additionalProperties: false
    ads_deleteCampaigns_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: integer
            description: '0 if success'
          required: true
      additionalProperties: false
    ads_deleteClients_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: integer
            description: '0 if success'
          required: true
      additionalProperties: false
    ads_getAccounts_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_account'
          required: true
      additionalProperties: false
    ads_getAdsLayout_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_ad_layout'
          required: true
      additionalProperties: false
    ads_getAdsTargeting_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_targ_settings'
          required: true
      additionalProperties: false
    ads_getAds_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_ad'
          required: true
      additionalProperties: false
    ads_getBudget_response:
      type: object
      properties:
        response:
          type: integer
          description: Budget
          required: true
      additionalProperties: false
    ads_getCampaigns_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_campaign'
          required: true
      additionalProperties: false
    ads_getCategories_response:
      type: object
      properties:
        response:
          type: object
          properties:
            v1:
              type: array
              items:
                $ref: '#/components/schemas/ads_category'
              description: 'Old categories'
            v2:
              type: array
              items:
                $ref: '#/components/schemas/ads_category'
              description: 'Actual categories'
          additionalProperties: false
          required: true
      additionalProperties: false
    ads_getClients_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_client'
          required: true
      additionalProperties: false
    ads_getDemographics_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_demo_stats'
          required: true
      additionalProperties: false
    ads_getFloodStats_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/ads_flood_stats'
          required: true
      additionalProperties: false
    ads_getLookalikeRequests_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total count of found lookalike requests'
              minimum: 0
              required: true
            items:
              type: array
              description: 'found lookalike requests'
              items:
                $ref: '#/components/schemas/ads_lookalike_request'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    ads_getMusicians_response:
      type: object
      properties:
        response:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/ads_musician'
              description: Musicians
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    ads_getOfficeUsers_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_users'
          required: true
      additionalProperties: false
    ads_getPostsReach_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_promoted_post_reach'
          required: true
      additionalProperties: false
    ads_getRejectionReason_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/ads_reject_reason'
          required: true
      additionalProperties: false
    ads_getStatistics_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_stats'
          required: true
      additionalProperties: false
    ads_getSuggestions_cities_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_targ_suggestions_cities'
          required: true
      additionalProperties: false
    ads_getSuggestions_regions_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_targ_suggestions_regions'
          required: true
      additionalProperties: false
    ads_getSuggestions_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_targ_suggestions'
          required: true
      additionalProperties: false
    ads_getSuggestions_schools_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_targ_suggestions_schools'
          required: true
      additionalProperties: false
    ads_getTargetGroups_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_target_group'
          required: true
      additionalProperties: false
    ads_getTargetingStats_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/ads_targ_stats'
          required: true
      additionalProperties: false
    ads_getUploadURL_response:
      type: object
      properties:
        response:
          type: string
          description: 'Photo upload URL'
          required: true
      additionalProperties: false
    ads_getVideoUploadURL_response:
      type: object
      properties:
        response:
          type: string
          description: 'Video upload URL'
          required: true
      additionalProperties: false
    ads_importTargetContacts_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Imported contacts number'
          required: true
      additionalProperties: false
    ads_removeOfficeUsers_response:
      type: object
      properties:
        response:
          type: boolean
          description: 'true if success'
          required: true
      additionalProperties: false
    ads_updateAds_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: integer
            description: 'Ad ID'
          required: true
      additionalProperties: false
    ads_updateCampaigns_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Campaign ID'
          required: true
      additionalProperties: false
    ads_updateClients_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Client ID'
          required: true
      additionalProperties: false
    ads_updateOfficeUsers_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ads_updateOfficeUsers_result'
          required: true
      additionalProperties: false
    adsweb_getAdCategories_response:
      type: object
      properties:
        response:
          type: object
          properties:
            categories:
              type: array
              items:
                $ref: '#/components/schemas/adsweb_getAdCategories_response_categories_category'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    adsweb_getAdUnitCode_response:
      type: object
      properties:
        response:
          type: object
          properties:
            html:
              type: string
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    adsweb_getAdUnits_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              required: true
            ad_units:
              type: array
              items:
                $ref: '#/components/schemas/adsweb_getAdUnits_response_ad_units_ad_unit'
          additionalProperties: false
          required: true
      additionalProperties: false
    adsweb_getFraudHistory_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              required: true
            entries:
              type: array
              items:
                $ref: '#/components/schemas/adsweb_getFraudHistory_response_entries_entry'
          additionalProperties: false
          required: true
      additionalProperties: false
    adsweb_getSites_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              required: true
            sites:
              type: array
              items:
                $ref: '#/components/schemas/adsweb_getSites_response_sites_site'
          additionalProperties: false
          required: true
      additionalProperties: false
    adsweb_getStatistics_response:
      type: object
      properties:
        response:
          type: object
          properties:
            next_page_id:
              type: string
            items:
              type: array
              items:
                $ref: '#/components/schemas/adsweb_getStatistics_response_items_item'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    appWidgets_getAppImageUploadServer_response:
      type: object
      properties:
        response:
          type: object
          properties:
            upload_url:
              type: string
              description: 'To upload an image, generate POST-request to upload_url with a file in photo field. Then call appWidgets.saveAppImage method'
          additionalProperties: false
          required: true
      additionalProperties: false
    appWidgets_getAppImages_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/appWidgets_photos'
          required: true
      additionalProperties: false
    appWidgets_getGroupImageUploadServer_response:
      type: object
      properties:
        response:
          type: object
          properties:
            upload_url:
              type: string
              description: 'To upload an image, generate POST-request to upload_url with a file in photo field. Then call appWidgets.saveAppImage method'
          additionalProperties: false
          required: true
      additionalProperties: false
    appWidgets_getGroupImages_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/appWidgets_photos'
          required: true
      additionalProperties: false
    appWidgets_getImagesById_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/appWidgets_photo'
          required: true
      additionalProperties: false
    appWidgets_saveAppImage_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/appWidgets_photo'
          required: true
      additionalProperties: false
    appWidgets_saveGroupImage_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/appWidgets_photo'
          required: true
      additionalProperties: false
    apps_getCatalog_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/apps_catalog_list'
          required: true
      additionalProperties: false
    apps_getFriendsList_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    apps_getFriendsList_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                type: integer
                format: int64
                entity: owner
          additionalProperties: false
          required: true
      additionalProperties: false
    apps_getLeaderboard_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/apps_leaderboard'
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user'
          additionalProperties: false
          required: true
      additionalProperties: false
    apps_getLeaderboard_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/apps_leaderboard'
          additionalProperties: false
          required: true
      additionalProperties: false
    apps_getMiniAppPolicies_response:
      type: object
      properties:
        response:
          type: object
          properties:
            privacy_policy:
              type: string
              format: uri
              description: "URL of the app's privacy policy"
            terms:
              type: string
              format: uri
              description: "URL of the app's terms"
          additionalProperties: false
          required: true
      additionalProperties: false
    apps_getScopes_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/apps_scope'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    apps_getScore_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Score number'
          required: true
      additionalProperties: false
    apps_get_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number of applications'
              minimum: 0
            items:
              type: array
              description: 'List of applications'
              items:
                $ref: '#/components/schemas/apps_app'
          additionalProperties: false
          required: true
      additionalProperties: false
    apps_image_upload_response:
      type: object
      properties:
        response:
          type: object
          properties:
            hash:
              type: string
              description: 'Uploading hash'
            image:
              type: string
              description: 'Uploaded photo data'
          additionalProperties: false
          required: true
      additionalProperties: false
    apps_sendRequest_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Request ID'
          required: true
      additionalProperties: false
    auth_restore_response:
      type: object
      properties:
        response:
          type: object
          properties:
            success:
              type: integer
              description: '1 if success'
              enum:
                - 1
              enumNames:
                - ok
            sid:
              type: string
              description: 'Parameter needed to grant access by code'
          additionalProperties: false
          required: true
      additionalProperties: false
    base_bool_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    base_getUploadServer_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/base_upload_server'
          required: true
      additionalProperties: false
    base_ok_response:
      type: object
      properties:
        response:
          type: integer
          default: 1
          enum:
            - 1
          enumNames:
            - ok
          required: true
      additionalProperties: false
    board_addTopic_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Topic ID'
          required: true
      additionalProperties: false
    board_createComment_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Comment ID'
          required: true
      additionalProperties: false
    board_getComments_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/board_topic_comment'
              required: true
            poll:
              type: object
              $ref: '#/components/schemas/polls_poll'
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
            real_offset:
              type: integer
              description: 'Offset of comment'
          additionalProperties: false
          required: true
      additionalProperties: false
    board_getComments_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/board_topic_comment'
              required: true
            poll:
              type: object
              $ref: '#/components/schemas/polls_poll'
            real_offset:
              type: integer
              description: 'Offset of comment'
          additionalProperties: false
          required: true
      additionalProperties: false
    board_getTopics_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/board_topic'
              required: true
            default_order:
              $ref: '#/components/schemas/board_default_order'
              required: true
            can_add_topics:
              description: 'Information whether current user can add topic'
              $ref: '#/components/schemas/base_bool_int'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    board_getTopics_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/board_topic'
              required: true
            default_order:
              $ref: '#/components/schemas/board_default_order'
              required: true
            can_add_topics:
              description: 'Information whether current user can add topic'
              $ref: '#/components/schemas/base_bool_int'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    database_getChairs_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/base_object'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    database_getCitiesById_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/database_city_by_id'
          required: true
      additionalProperties: false
    database_getCities_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/database_city'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    database_getCountriesById_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/base_country'
          required: true
      additionalProperties: false
    database_getCountries_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/base_country'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    database_getFaculties_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/database_faculty'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    database_getMetroStationsById_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/database_station'
          required: true
      additionalProperties: false
    database_getMetroStations_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/database_station'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    database_getRegions_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/database_region'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    database_getSchoolClasses_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: array
            items:
              type:
                - string
                - integer
              description: 'Class ID or letter'
          required: true
      additionalProperties: false
    database_getSchools_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/database_school'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    database_getUniversities_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/database_university'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    docs_add_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Document ID'
          required: true
      additionalProperties: false
    docs_doc_upload_response:
      type: object
      properties:
        response:
          type: object
          properties:
            file:
              type: string
              description: 'Uploaded file data'
          additionalProperties: false
          required: true
      additionalProperties: false
    docs_getById_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/docs_doc'
          required: true
      additionalProperties: false
    docs_getTypes_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/docs_doc_types'
          additionalProperties: false
          required: true
      additionalProperties: false
    docs_getUploadServer_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/base_upload_server'
          required: true
      additionalProperties: false
    docs_get_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/docs_doc'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    docs_save_response:
      type: object
      properties:
        response:
          type: object
          properties:
            type:
              $ref: '#/components/schemas/docs_doc_attachment_type'
            audio_message:
              $ref: '#/components/schemas/messages_audio_message'
            doc:
              $ref: '#/components/schemas/docs_doc'
            graffiti:
              $ref: '#/components/schemas/messages_graffiti'
          additionalProperties: false
          required: true
      additionalProperties: false
    docs_search_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/docs_doc'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    donut_getSubscription_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/donut_donator_subscription_info'
          required: true
      additionalProperties: false
    donut_getSubscriptions_response:
      type: object
      properties:
        response:
          type: object
          properties:
            subscriptions:
              type: array
              items:
                $ref: '#/components/schemas/donut_donator_subscription_info'
              required: true
            count:
              type: integer
              minimum: 0
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    downloadedGames_paid_status_response:
      type: object
      properties:
        response:
          type: object
          properties:
            is_paid:
              type: boolean
              description: 'Game has been paid'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    fave_addTag_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/fave_tag'
          required: true
      additionalProperties: false
    fave_getPages_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
            items:
              type: array
              items:
                $ref: '#/components/schemas/fave_page'
          additionalProperties: false
          required: true
      additionalProperties: false
    fave_getTags_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
            items:
              type: array
              items:
                $ref: '#/components/schemas/fave_tag'
          additionalProperties: false
          required: true
      additionalProperties: false
    fave_get_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/fave_bookmark'
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group'
          additionalProperties: false
          required: true
      additionalProperties: false
    fave_get_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/fave_bookmark'
          additionalProperties: false
          required: true
      additionalProperties: false
    friends_addList_response:
      type: object
      properties:
        response:
          type: object
          properties:
            list_id:
              type: integer
              description: 'List ID'
              minimum: 1
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    friends_add_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Friend request status'
          enum:
            - 1
            - 2
            - 4
          enumNames:
            - SEND
            - APPROVED
            - RESEND
          required: true
      additionalProperties: false
    friends_areFriends_extended_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/friends_friend_extended_status'
          required: true
      additionalProperties: false
    friends_areFriends_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/friends_friend_status'
          required: true
      additionalProperties: false
    friends_delete_response:
      type: object
      properties:
        response:
          type: object
          properties:
            success:
              type: integer
              default: 1
              required: true
            friend_deleted:
              type: integer
              description: 'Returns 1 if friend has been deleted'
              enum:
                - 1
              enumNames:
                - ok
            out_request_deleted:
              type: integer
              description: 'Returns 1 if out request has been canceled'
              enum:
                - 1
              enumNames:
                - ok
            in_request_deleted:
              type: integer
              description: 'Returns 1 if incoming request has been declined'
              enum:
                - 1
              enumNames:
                - ok
            suggestion_deleted:
              type: integer
              description: 'Returns 1 if suggestion has been declined'
              enum:
                - 1
              enumNames:
                - ok
          maxProperties: 2
          additionalProperties: false
          required: true
      additionalProperties: false
    friends_getAppUsers_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: integer
            description: 'User ID'
            minimum: 1
            format: int64
            entity: owner
          required: true
      additionalProperties: false
    friends_getByPhones_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/friends_user_xtr_phone'
          required: true
      additionalProperties: false
    friends_getLists_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number of friends lists'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/friends_friends_list'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    friends_getMutual_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: integer
            description: 'User ID'
            entity: owner
            format: int64
            minimum: 1
          required: true
      additionalProperties: false
    friends_getMutual_target_uids_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/friends_mutual_friend'
          required: true
      additionalProperties: false
    friends_getOnline_online_mobile_response:
      type: object
      properties:
        response:
          type: object
          properties:
            online:
              type: array
              required: true
              items:
                type: integer
                description: 'User ID'
                minimum: 1
                format: int64
                entity: owner
            online_mobile:
              type: array
              required: true
              items:
                type: integer
                description: 'User ID'
                minimum: 1
                format: int64
                entity: owner
          additionalProperties: false
          required: true
      additionalProperties: false
    friends_getOnline_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: integer
            description: 'User ID'
            minimum: 1
            format: int64
            entity: owner
          required: true
      additionalProperties: false
    friends_getRecent_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: integer
            description: 'User ID'
            minimum: 1
          required: true
      additionalProperties: false
    friends_getRequests_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total requests number'
              minimum: 0
            items:
              type: array
              items:
                $ref: '#/components/schemas/friends_requests_xtr_message'
          additionalProperties: false
          required: true
      additionalProperties: false
    friends_getRequests_need_mutual_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total requests number'
              minimum: 0
            items:
              type: array
              items:
                $ref: '#/components/schemas/friends_requests'
          additionalProperties: false
          required: true
      additionalProperties: false
    friends_getRequests_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total requests number'
              minimum: 0
            items:
              type: array
              items:
                type: integer
                entity: profiles
                format: int64
                description: 'User ID'
                minimum: 1
            count_unread:
              type: integer
              description: 'Total unread requests number'
          additionalProperties: false
          required: true
      additionalProperties: false
    friends_getSuggestions_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total results number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    friends_get_fields_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total friends number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    friends_get_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total friends number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                type: integer
                description: 'User ID'
                minimum: 1
                entity: profiles
                format: int64
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    friends_search_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    gifts_get_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/gifts_gift'
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_addAddress_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/groups_address'
          required: true
      additionalProperties: false
    groups_addCallbackServer_response:
      type: object
      properties:
        response:
          type: object
          properties:
            server_id:
              type: integer
              minimum: 0
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_addLink_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/groups_links_item'
          required: true
      additionalProperties: false
    groups_create_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/groups_group'
          required: true
      additionalProperties: false
    groups_editAddress_response:
      type: object
      properties:
        response:
          description: Result
          $ref: '#/components/schemas/groups_address'
          required: true
      additionalProperties: false
    groups_getAddresses_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total count of addresses'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/groups_address'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getBanned_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total users number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/groups_banned_item'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getById_object_legacy_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/groups_group_full'
          required: true
      additionalProperties: false
    groups_getCallbackConfirmationCode_response:
      type: object
      properties:
        response:
          type: object
          properties:
            code:
              type: string
              description: 'Confirmation code'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getCallbackServers_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/groups_callback_server'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getCallbackSettings_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/groups_callback_settings'
          required: true
      additionalProperties: false
    groups_getCatalogInfo_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            enabled:
              $ref: '#/components/schemas/base_bool_int'
              description: 'Information whether catalog is enabled for current user'
              required: true
            categories:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_category_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getCatalogInfo_response:
      type: object
      properties:
        response:
          type: object
          properties:
            enabled:
              $ref: '#/components/schemas/base_bool_int'
              description: 'Information whether catalog is enabled for current user'
              required: true
            categories:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_category'
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getCatalog_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total communities number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/groups_group'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getInvitedUsers_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total communities number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getInvites_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total communities number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_min'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getInvites_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total communities number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getLongPollServer_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/groups_long_poll_server'
          required: true
      additionalProperties: false
    groups_getLongPollSettings_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/groups_long_poll_settings'
          required: true
      additionalProperties: false
    groups_getMembers_fields_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total members number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/groups_user_xtr_role'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getMembers_filter_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total members number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/groups_member_role'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getMembers_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total members number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                type: integer
                format: int64
                entity: owner
                description: 'User ID'
                minimum: 0
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getRequests_fields_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total communities number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getRequests_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total communities number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                type: integer
                format: int64
                entity: owner
                description: 'User ID'
                minimum: 1
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getSettings_response:
      type: object
      properties:
        response:
          type: object
          properties:
            access:
              $ref: '#/components/schemas/groups_group_access'
              description: 'Community access settings'
            address:
              type: string
              description: "Community's page domain"
            audio:
              $ref: '#/components/schemas/groups_group_audio'
              description: 'Audio settings'
              required: true
            articles:
              type: integer
              description: 'Articles settings'
              required: true
            recognize_photo:
              type: integer
              description: 'Photo suggests setting'
            city_id:
              type: integer
              description: 'City id of group'
              required: true
            city_name:
              type: string
              description: 'City name of group'
              required: true
            contacts:
              $ref: '#/components/schemas/base_bool_int'
            links:
              $ref: '#/components/schemas/base_bool_int'
            sections_list:
              type: array
              items:
                $ref: '#/components/schemas/groups_sections_list_item'
            main_section:
              $ref: '#/components/schemas/groups_group_full_section'
            secondary_section:
              $ref: '#/components/schemas/groups_group_full_section'
            age_limits:
              $ref: '#/components/schemas/groups_group_age_limits'
            country_id:
              type: integer
              description: 'Country id of group'
              required: true
            country_name:
              type: string
              description: 'Country name of group'
              required: true
            description:
              type: string
              description: 'Community description'
              required: true
            docs:
              $ref: '#/components/schemas/groups_group_docs'
              description: 'Docs settings'
              required: true
            events:
              $ref: '#/components/schemas/base_bool_int'
            obscene_filter:
              description: 'Information whether the obscene filter is enabled'
              $ref: '#/components/schemas/base_bool_int'
              required: true
            obscene_stopwords:
              description: 'Information whether the stop words filter is enabled'
              $ref: '#/components/schemas/base_bool_int'
              required: true
            obscene_words:
              type: array
              description: 'The list of stop words'
              items:
                type: string
              required: true
            event_group_id:
              type: integer
            photos:
              description: 'Photos settings'
              $ref: '#/components/schemas/groups_group_photos'
              required: true
            public_category:
              type: integer
              description: 'Information about the group category'
            public_category_list:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_public_category_list'
            public_date:
              type: string
            public_date_label:
              type: string
            public_subcategory:
              type: integer
              description: 'Information about the group subcategory'
            rss:
              type: string
              format: uri
              description: 'URL of the RSS feed'
            start_date:
              type: integer
              description: 'Start date'
              minimum: 0
            finish_date:
              description: 'Finish date in Unix-time format'
              type: integer
            subject:
              type: integer
              description: 'Community subject ID'
            subject_list:
              type: array
              items:
                $ref: '#/components/schemas/groups_subject_item'
            suggested_privacy:
              $ref: '#/components/schemas/groups_group_suggested_privacy'
            title:
              type: string
              description: 'Community title'
              required: true
            topics:
              $ref: '#/components/schemas/groups_group_topics'
              description: 'Topics settings'
              required: true
            twitter:
              $ref: '#/components/schemas/groups_settings_twitter'
            video:
              $ref: '#/components/schemas/groups_group_video'
              description: 'Video settings'
              required: true
            wall:
              $ref: '#/components/schemas/groups_group_wall'
              description: 'Wall settings'
              required: true
            website:
              type: string
              description: 'Community website'
            phone:
              type: string
              description: 'Community phone'
            email:
              type: string
              description: 'Community email'
            wiki:
              $ref: '#/components/schemas/groups_group_wiki'
              description: 'Wiki settings'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_getTagList_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/groups_group_tag'
          required: true
      additionalProperties: false
    groups_getTokenPermissions_response:
      type: object
      properties:
        response:
          type: object
          properties:
            mask:
              type: integer
              minimum: 0
              required: true
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/groups_token_permission_setting'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_get_object_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total communities number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_get_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total communities number'
              required: true
            items:
              type: array
              items:
                type: integer
                format: int64
                entity: groups
                description: 'Community ID'
                minimum: 0
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_isMember_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            member:
              description: 'Information whether user is a member of the group'
              $ref: '#/components/schemas/base_bool_int'
              required: true
            invitation:
              description: 'Information whether user has been invited to the group'
              $ref: '#/components/schemas/base_bool_int'
            can_invite:
              description: 'Information whether user can be invited'
              $ref: '#/components/schemas/base_bool_int'
            can_recall:
              description: "Information whether user's invite to the group can be recalled"
              $ref: '#/components/schemas/base_bool_int'
            request:
              description: 'Information whether user has sent request to the group'
              $ref: '#/components/schemas/base_bool_int'
          additionalProperties: false
          required: true
      additionalProperties: false
    groups_isMember_response:
      type: object
      properties:
        response:
          description: 'Information whether user is a member of the group'
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    groups_isMember_user_ids_extended_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/groups_member_status_full'
          required: true
      additionalProperties: false
    groups_isMember_user_ids_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/groups_member_status'
          required: true
      additionalProperties: false
    groups_search_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total communities number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/groups_group'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    leadForms_create_response:
      type: object
      properties:
        response:
          type: object
          properties:
            form_id:
              type: integer
              required: true
            url:
              type: string
              format: uri
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    leadForms_delete_response:
      type: object
      properties:
        response:
          type: object
          properties:
            form_id:
              type: integer
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    leadForms_getLeads_response:
      type: object
      properties:
        response:
          type: object
          properties:
            leads:
              type: array
              items:
                $ref: '#/components/schemas/leadForms_lead'
              required: true
            next_page_token:
              type: string
          additionalProperties: false
          required: true
      additionalProperties: false
    leadForms_get_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/leadForms_form'
          required: true
      additionalProperties: false
    leadForms_list_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/leadForms_form'
          required: true
      additionalProperties: false
    leadForms_uploadUrl_response:
      type: object
      properties:
        response:
          type: string
          format: uri
          required: true
      additionalProperties: false
    likes_add_response:
      type: object
      properties:
        response:
          type: object
          properties:
            likes:
              type: integer
              description: 'Total likes number'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    likes_delete_response:
      type: object
      properties:
        response:
          type: object
          properties:
            likes:
              type: integer
              description: 'Total likes number'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    likes_getList_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/users_user_min'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    likes_getList_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                type: integer
                format: int64
                entity: owner
                description: 'User ID'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    likes_isLiked_response:
      type: object
      properties:
        response:
          type: object
          properties:
            liked:
              description: 'Information whether user liked the object'
              $ref: '#/components/schemas/base_bool_int'
              required: true
            copied:
              description: 'Information whether user reposted the object'
              $ref: '#/components/schemas/base_bool_int'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    market_addAlbum_response:
      type: object
      properties:
        response:
          type: object
          properties:
            market_album_id:
              type: integer
              description: 'Album ID'
            albums_count:
              type: integer
              description: 'Albums count'
          additionalProperties: false
          required: true
      additionalProperties: false
    market_add_response:
      type: object
      properties:
        response:
          type: object
          properties:
            market_item_id:
              type: integer
              description: 'Item ID'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    market_createComment_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Comment ID'
          required: true
      additionalProperties: false
    market_deleteComment_response:
      type: object
      properties:
        response:
          description: 'Returns 1 if request has been processed successfully (0 if the comment is not found)'
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    market_getAlbumById_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/market_market_album'
          additionalProperties: false
          required: true
      additionalProperties: false
    market_getAlbums_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/market_market_album'
          additionalProperties: false
          required: true
      additionalProperties: false
    market_getById_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/market_market_item_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    market_getById_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/market_market_item'
          additionalProperties: false
          required: true
      additionalProperties: false
    market_getCategories_new_response:
      type: object
      properties:
        response:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/market_market_category_tree'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    market_getCategories_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/market_market_category'
          additionalProperties: false
          required: true
      additionalProperties: false
    market_getComments_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wall_comment'
          additionalProperties: false
          required: true
      additionalProperties: false
    market_getGroupOrders_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/market_order'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    market_getOrderById_response:
      type: object
      properties:
        response:
          type: object
          properties:
            order:
              $ref: '#/components/schemas/market_order'
          additionalProperties: false
          required: true
      additionalProperties: false
    market_getOrderItems_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/market_order_item'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    market_getOrders_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/market_order'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    market_getOrders_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/market_order'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    market_get_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/market_market_item_full'
            variants:
              type: array
              items:
                $ref: '#/components/schemas/market_market_item_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    market_get_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/market_market_item'
            variants:
              type: array
              items:
                $ref: '#/components/schemas/market_market_item'
          additionalProperties: false
          required: true
      additionalProperties: false
    market_restoreComment_response:
      type: object
      properties:
        response:
          description: 'Returns 1 if request has been processed successfully (0 if the comment is not found)'
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    market_search_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            view_type:
              $ref: '#/components/schemas/market_services_view_type'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/market_market_item_full'
              required: true
            variants:
              type: array
              items:
                $ref: '#/components/schemas/market_market_item_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    market_search_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            view_type:
              $ref: '#/components/schemas/market_services_view_type'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/market_market_item'
              required: true
            variants:
              type: array
              items:
                $ref: '#/components/schemas/market_market_item'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_createChat_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Chat ID'
          required: true
      additionalProperties: false
    messages_deleteChatPhoto_response:
      type: object
      properties:
        response:
          type: object
          properties:
            message_id:
              type: integer
              description: 'Service message ID'
            chat:
              $ref: '#/components/schemas/messages_chat'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_deleteConversation_response:
      type: object
      properties:
        response:
          type: object
          properties:
            last_deleted_id:
              type: integer
              minimum: 0
              description: 'Id of the last message, that was deleted'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_delete_response:
      type: object
      properties:
        response:
          type: object
          patternProperties:
            '^[0-9]+$':
              $ref: '#/components/schemas/base_bool_int'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_edit_response:
      type: object
      properties:
        response:
          description: Result
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    messages_getByConversationMessageId_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/messages_message'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_getByConversationMessageId_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/messages_message'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_getById_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/messages_message'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_getById_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/messages_message'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_getChatPreview_response:
      type: object
      properties:
        response:
          type: object
          properties:
            preview:
              $ref: '#/components/schemas/messages_chat_preview'
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_getChat_chat_ids_fields_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/messages_chat_full'
          required: true
      additionalProperties: false
    messages_getChat_chat_ids_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/messages_chat'
          required: true
      additionalProperties: false
    messages_getChat_fields_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/messages_chat_full'
          required: true
      additionalProperties: false
    messages_getChat_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/messages_chat'
          required: true
      additionalProperties: false
    messages_getConversationMembers_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/messages_getConversationMembers'
          required: true
      additionalProperties: false
    messages_getConversationsById_extended_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/messages_getConversationById_extended'
          required: true
      additionalProperties: false
    messages_getConversationsById_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/messages_getConversationById'
          required: true
      additionalProperties: false
    messages_getConversations_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            unread_count:
              type: integer
              description: 'Unread dialogs number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/messages_conversation_with_message'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_getHistoryAttachments_response:
      type: object
      properties:
        response:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/messages_history_attachment'
            next_from:
              type: string
              description: 'Value for pagination'
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_getHistory_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/messages_message'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
            conversations:
              type: array
              items:
                $ref: '#/components/schemas/messages_conversation'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_getHistory_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/messages_message'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_getImportantMessages_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            messages:
              $ref: '#/components/schemas/messages_messages_array'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
            conversations:
              type: array
              items:
                $ref: '#/components/schemas/messages_conversation'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_getImportantMessages_response:
      type: object
      properties:
        response:
          type: object
          properties:
            messages:
              $ref: '#/components/schemas/messages_messages_array'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
            conversations:
              type: array
              items:
                $ref: '#/components/schemas/messages_conversation'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_getIntentUsers_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              minimum: 0
              required: true
            items:
              type: array
              items:
                type: integer
                minimum: 0
                entity: owner
                format: int64
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_getInviteLink_response:
      type: object
      properties:
        response:
          type: object
          properties:
            link:
              type: string
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_getLastActivity_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/messages_last_activity'
          required: true
      additionalProperties: false
    messages_getLongPollHistory_response:
      type: object
      properties:
        response:
          type: object
          properties:
            history:
              type: array
              items:
                type: array
                items:
                  type: integer
                  description: 'Longpoll event value'
            messages:
              $ref: '#/components/schemas/messages_longpoll_messages'
            credentials:
              $ref: '#/components/schemas/messages_longpoll_params'
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
            chats:
              type: array
              items:
                $ref: '#/components/schemas/messages_chat'
            new_pts:
              type: integer
              description: 'Persistence timestamp'
            from_pts:
              type: integer
            more:
              type: boolean
              description: 'Has more'
            conversations:
              type: array
              items:
                $ref: '#/components/schemas/messages_conversation'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_getLongPollServer_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/messages_longpoll_params'
          required: true
      additionalProperties: false
    messages_isMessagesFromGroupAllowed_response:
      type: object
      properties:
        response:
          type: object
          properties:
            is_allowed:
              $ref: '#/components/schemas/base_bool_int'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_joinChatByInviteLink_response:
      type: object
      properties:
        response:
          type: object
          properties:
            chat_id:
              type: integer
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_markAsImportant_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: integer
            description: 'Messages IDs'
          required: true
      additionalProperties: false
    messages_pin_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/messages_pinned_message'
          required: true
      additionalProperties: false
    messages_searchConversations_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total results number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/messages_conversation'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_searchConversations_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total results number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/messages_conversation'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_search_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/messages_message'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
            conversations:
              type: array
              items:
                $ref: '#/components/schemas/messages_conversation'
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_search_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/messages_message'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    messages_send_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Message ID'
          required: true
      additionalProperties: false
    messages_send_user_ids_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/messages_send_user_ids_response_item'
          required: true
      additionalProperties: false
    messages_setChatPhoto_response:
      type: object
      properties:
        response:
          type: object
          properties:
            message_id:
              type: integer
              description: 'Service message ID'
            chat:
              $ref: '#/components/schemas/messages_chat'
          additionalProperties: false
          required: true
      additionalProperties: false
    newsfeed_generic_response:
      type: object
      properties:
        response:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/newsfeed_newsfeed_item'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
            new_returned_news_items_count:
              type: integer
              minimum: 0
          additionalProperties: false
          required: true
      additionalProperties: false
    newsfeed_getBanned_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    newsfeed_getBanned_response:
      type: object
      properties:
        response:
          type: object
          properties:
            groups:
              type: array
              items:
                type: integer
                description: 'Community ID'
            members:
              type: array
              items:
                type: integer
                description: 'User ID'
          additionalProperties: false
          required: true
      additionalProperties: false
    newsfeed_getComments_response:
      type: object
      properties:
        response:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/newsfeed_newsfeed_item'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
            next_from:
              type: string
              description: 'Next from value'
          additionalProperties: false
          required: true
      additionalProperties: false
    newsfeed_getLists_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/newsfeed_list_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    newsfeed_getLists_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/newsfeed_list'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    newsfeed_getMentions_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wallpost_to_id'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    newsfeed_getSuggestedSources_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/users_subscriptions_item'
          additionalProperties: false
          required: true
      additionalProperties: false
    newsfeed_ignore_item_response:
      type: object
      properties:
        response:
          type: object
          properties:
            status:
              type: boolean
              default: 1
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    newsfeed_saveList_response:
      type: object
      properties:
        response:
          type: integer
          description: 'List ID'
          required: true
      additionalProperties: false
    newsfeed_search_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wallpost_full'
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
            suggested_queries:
              type: array
              items:
                type: string
            next_from:
              type: string
            count:
              type: integer
              minimum: 0
              description: 'Filtered number'
            total_count:
              type: integer
              description: 'Total number'
              minimum: 0
          additionalProperties: false
          required: true
      additionalProperties: false
    newsfeed_search_response:
      type: object
      properties:
        response:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wallpost_full'
            suggested_queries:
              type: array
              items:
                type: string
            next_from:
              type: string
            count:
              type: integer
              minimum: 0
              description: 'Filtered number'
            total_count:
              type: integer
              description: 'Total number'
              minimum: 0
          additionalProperties: false
          required: true
      additionalProperties: false
    notes_add_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Note ID'
          required: true
      additionalProperties: false
    notes_createComment_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Comment ID'
          required: true
      additionalProperties: false
    notes_getById_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/notes_note'
          required: true
      additionalProperties: false
    notes_getComments_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/notes_note_comment'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    notes_get_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/notes_note'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    notifications_get_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/notifications_notification_item'
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group'
            last_viewed:
              type: integer
              description: 'Time when user has been checked notifications last time'
            photos:
              type: array
              items:
                $ref: '#/components/schemas/photos_photo'
            videos:
              type: array
              items:
                $ref: '#/components/schemas/video_video'
            apps:
              type: array
              items:
                $ref: '#/components/schemas/apps_app'
            next_from:
              type: string
            ttl:
              type: integer
          additionalProperties: false
          required: true
      additionalProperties: false
    notifications_markAsViewed_response:
      type: object
      properties:
        response:
          description: Result
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    notifications_sendMessage_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/notifications_send_message_item'
          required: true
      additionalProperties: false
    orders_cancelSubscription_response:
      type: object
      properties:
        response:
          description: Result
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    orders_changeState_response:
      type: object
      properties:
        response:
          type: string
          description: 'New state'
          required: true
      additionalProperties: false
    orders_getAmount_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/orders_amount'
          required: true
      additionalProperties: false
    orders_getById_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/orders_order'
          required: true
      additionalProperties: false
    orders_getUserSubscriptionById_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/orders_subscription'
          required: true
      additionalProperties: false
    orders_getUserSubscriptions_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/orders_subscription'
          additionalProperties: false
          required: true
      additionalProperties: false
    orders_get_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/orders_order'
          required: true
      additionalProperties: false
    orders_updateSubscription_response:
      type: object
      properties:
        response:
          description: Result
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    pages_getHistory_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/pages_wikipage_history'
          required: true
      additionalProperties: false
    pages_getTitles_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/pages_wikipage'
          required: true
      additionalProperties: false
    pages_getVersion_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/pages_wikipage_full'
          required: true
      additionalProperties: false
    pages_get_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/pages_wikipage_full'
          required: true
      additionalProperties: false
    pages_parseWiki_response:
      type: object
      properties:
        response:
          type: string
          description: 'HTML source'
          required: true
      additionalProperties: false
    pages_saveAccess_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Page ID'
          required: true
      additionalProperties: false
    pages_save_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Page ID'
          required: true
      additionalProperties: false
    photos_copy_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Photo ID'
          minimum: 1
          required: true
      additionalProperties: false
    photos_createAlbum_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/photos_photo_album_full'
          required: true
      additionalProperties: false
    photos_createComment_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Created comment ID'
          required: true
      additionalProperties: false
    photos_deleteComment_response:
      type: object
      properties:
        response:
          description: 'Returns 1 if request has been processed successfully, 0 if the comment is not found'
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    photos_getAlbumsCount_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Albums number'
          minimum: 0
          required: true
      additionalProperties: false
    photos_getAlbums_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/photos_photo_album_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_getAllComments_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wall_comment'
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_getAll_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/photos_photo_full_xtr_real_offset'
            more:
              description: 'Information whether next page is presented'
              $ref: '#/components/schemas/base_bool_int'
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_getAll_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/photos_photo_xtr_real_offset'
            more:
              description: 'Information whether next page is presented'
              $ref: '#/components/schemas/base_bool_int'
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_getById_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/photos_photo'
          required: true
      additionalProperties: false
    photos_getComments_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            real_offset:
              type: integer
              description: 'Real offset of the comments'
              minimum: 0
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wall_comment'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_getComments_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            real_offset:
              type: integer
              description: 'Real offset of the comments'
              minimum: 0
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wall_comment'
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_getMarketUploadServer_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/base_upload_server'
          required: true
      additionalProperties: false
    photos_getMessagesUploadServer_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/photos_photo_upload'
          required: true
      additionalProperties: false
    photos_getNewTags_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/photos_photo_xtr_tag_info'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_getTags_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/photos_photo_tag'
          required: true
      additionalProperties: false
    photos_getUploadServer_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/photos_photo_upload'
          required: true
      additionalProperties: false
    photos_getUserPhotos_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/photos_photo'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_getWallUploadServer_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/photos_photo_upload'
          required: true
      additionalProperties: false
    photos_get_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/photos_photo'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_market_album_upload_response:
      type: object
      properties:
        response:
          type: object
          properties:
            gid:
              type: integer
              description: 'Community ID'
            hash:
              type: string
              description: 'Uploading hash'
            photo:
              type: string
              description: 'Uploaded photo data'
            server:
              type: integer
              description: 'Upload server number'
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_market_upload_response:
      type: object
      properties:
        response:
          type: object
          properties:
            crop_data:
              type: string
              description: 'Crop data'
            crop_hash:
              type: string
              description: 'Crop hash'
            group_id:
              type: integer
              description: 'Community ID'
              entity: groups
              format: int64
            hash:
              type: string
              description: 'Uploading hash'
            photo:
              type: string
              description: 'Uploaded photo data'
            server:
              type: integer
              description: 'Upload server number'
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_message_upload_response:
      type: object
      properties:
        response:
          type: object
          properties:
            hash:
              type: string
              description: 'Uploading hash'
            photo:
              type: string
              description: 'Uploaded photo data'
            server:
              type: integer
              description: 'Upload server number'
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_owner_cover_upload_response:
      type: object
      properties:
        response:
          type: object
          properties:
            hash:
              type: string
              description: 'Uploading hash'
            photo:
              type: string
              description: 'Uploaded photo data'
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_owner_upload_response:
      type: object
      properties:
        response:
          type: object
          properties:
            hash:
              type: string
              description: 'Uploading hash'
            photo:
              type: string
              description: 'Uploaded photo data'
            server:
              type: integer
              description: 'Upload server number'
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_photo_upload_response:
      type: object
      properties:
        response:
          type: object
          properties:
            aid:
              type: integer
              description: 'Album ID'
            hash:
              type: string
              description: 'Uploading hash'
            photo:
              type: string
              description: 'Uploaded photo data'
            photos_list:
              type: string
              description: 'Uploaded photos data'
            server:
              type: integer
              description: 'Upload server number'
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_putTag_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Created tag ID'
          required: true
      additionalProperties: false
    photos_restoreComment_response:
      type: object
      properties:
        response:
          description: 'Returns 1 if request has been processed successfully, 0 if the comment is not found'
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    photos_saveMarketAlbumPhoto_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/photos_photo'
          required: true
      additionalProperties: false
    photos_saveMarketPhoto_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/photos_photo'
          required: true
      additionalProperties: false
    photos_saveMessagesPhoto_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/photos_photo'
          required: true
      additionalProperties: false
    photos_saveOwnerCoverPhoto_response:
      type: object
      properties:
        response:
          type: object
          properties:
            images:
              type: array
              items:
                $ref: '#/components/schemas/base_image'
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_saveOwnerPhoto_response:
      type: object
      properties:
        response:
          type: object
          properties:
            photo_hash:
              type: string
              description: 'Photo hash'
              required: true
            photo_src:
              type: string
              description: 'Uploaded image url'
              required: true
            photo_src_big:
              type: string
              description: 'Uploaded image url'
            photo_src_small:
              type: string
              description: 'Uploaded image url'
            saved:
              type: integer
              description: 'Returns 1 if profile photo is saved'
            post_id:
              type: integer
              description: 'Created post ID'
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_saveWallPhoto_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/photos_photo'
          required: true
      additionalProperties: false
    photos_save_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/photos_photo'
          required: true
      additionalProperties: false
    photos_search_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/photos_photo'
          additionalProperties: false
          required: true
      additionalProperties: false
    photos_wall_upload_response:
      type: object
      properties:
        response:
          type: object
          properties:
            hash:
              type: string
              description: 'Uploading hash'
            photo:
              type: string
              description: 'Uploaded photo data'
            server:
              type: integer
              description: 'Upload server number'
          additionalProperties: false
          required: true
      additionalProperties: false
    podcasts_searchPodcast_response:
      type: object
      properties:
        response:
          type: object
          properties:
            podcasts:
              type: array
              items:
                $ref: '#/components/schemas/podcast_external_data'
              required: true
            results_total:
              type: integer
              description: 'Total amount of found results'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    polls_addVote_response:
      type: object
      properties:
        response:
          description: Result
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    polls_create_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/polls_poll'
          required: true
      additionalProperties: false
    polls_deleteVote_response:
      type: object
      properties:
        response:
          description: Result
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    polls_getBackgrounds_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/polls_background'
          required: true
      additionalProperties: false
    polls_getById_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/polls_poll'
          required: true
      additionalProperties: false
    polls_getVoters_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/polls_voters'
          required: true
      additionalProperties: false
    polls_savePhoto_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/polls_background'
          required: true
      additionalProperties: false
    prettyCards_create_response:
      type: object
      properties:
        response:
          type: object
          properties:
            owner_id:
              type: integer
              description: 'Owner ID of created pretty card'
              entity: owner
              format: int64
              required: true
            card_id:
              type: string
              description: 'Card ID of created pretty card'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    prettyCards_delete_response:
      type: object
      properties:
        response:
          type: object
          properties:
            owner_id:
              type: integer
              description: 'Owner ID of deleted pretty card'
              entity: owner
              format: int64
              required: true
            card_id:
              type: string
              description: 'Card ID of deleted pretty card'
              required: true
            error:
              type: string
              description: 'Error reason if error happened'
          additionalProperties: false
          required: true
      additionalProperties: false
    prettyCards_edit_response:
      type: object
      properties:
        response:
          type: object
          properties:
            owner_id:
              type: integer
              description: 'Owner ID of edited pretty card'
              entity: owner
              format: int64
              required: true
            card_id:
              type: string
              description: 'Card ID of edited pretty card'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    prettyCards_getById_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/prettyCards_prettyCardOrError'
          required: true
      additionalProperties: false
    prettyCards_getUploadURL_response:
      type: object
      properties:
        response:
          type: string
          description: 'Upload URL'
          required: true
      additionalProperties: false
    prettyCards_get_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/prettyCards_prettyCard'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    search_getHints_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/search_hint'
              required: true
            suggested_queries:
              type: array
              items:
                type: string
          additionalProperties: false
          required: true
      additionalProperties: false
    secure_checkToken_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/secure_token_checked'
          required: true
      additionalProperties: false
    secure_getAppBalance_response:
      type: object
      properties:
        response:
          type: integer
          description: 'App balance'
          required: true
      additionalProperties: false
    secure_getSMSHistory_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/secure_sms_notification'
          required: true
      additionalProperties: false
    secure_getTransactionsHistory_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/secure_transaction'
          required: true
      additionalProperties: false
    secure_getUserLevel_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/secure_level'
          required: true
      additionalProperties: false
    secure_giveEventSticker_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/secure_giveEventSticker_item'
          required: true
      additionalProperties: false
    secure_sendNotification_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: integer
            description: 'User ID'
            entity: owner
            format: int64
          required: true
      additionalProperties: false
    secure_setCounter_array_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/secure_setCounter_item'
          required: true
      additionalProperties: false
    stats_getPostReach_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/stats_wallpost_stat'
          required: true
      additionalProperties: false
    stats_get_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/stats_period'
          required: true
      additionalProperties: false
    status_get_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/status_status'
          required: true
      additionalProperties: false
    storage_getKeys_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: string
            description: 'Key name'
          required: true
      additionalProperties: false
    storage_get_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/storage_value'
          required: true
      additionalProperties: false
    store_getFavoriteStickers_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/base_sticker'
          required: true
      additionalProperties: false
    store_getProducts_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/store_product'
          required: true
      additionalProperties: false
    store_getStickersKeywords_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              minimum: 0
              required: true
            dictionary:
              type: array
              items:
                $ref: '#/components/schemas/store_stickers_keyword'
              required: true
            chunks_count:
              type: integer
              minimum: 1
              description: 'Total count of chunks to load'
            chunks_hash:
              type: string
              minimum: 1
              description: 'Chunks version hash'
          additionalProperties: false
          required: true
      additionalProperties: false
    stories_getBanned_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Stories count'
              required: true
            items:
              type: array
              items:
                type: integer
                description: 'Owner ID'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    stories_getBanned_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Stories count'
              required: true
            items:
              type: array
              items:
                type: integer
                entity: owner
                format: int64
                description: 'Owner ID'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    stories_getById_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Stories count'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/stories_story'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    stories_getPhotoUploadServer_response:
      type: object
      properties:
        response:
          type: object
          properties:
            upload_url:
              type: string
              description: 'Upload URL'
              required: true
            user_ids:
              type: array
              description: 'Users ID who can to see story.'
              items:
                type: integer
                minimum: 0
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    stories_getStats_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/stories_story_stats'
          required: true
      additionalProperties: false
    stories_getVideoUploadServer_response:
      type: object
      properties:
        response:
          type: object
          properties:
            upload_url:
              type: string
              description: 'Upload URL'
              required: true
            user_ids:
              type: array
              description: 'Users ID who can to see story.'
              items:
                type: integer
                minimum: 0
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    stories_getViewers_extended_V5115_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Viewers count'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/stories_viewers_item'
              required: true
            hidden_reason:
              type: string
            next_from:
              type: string
          additionalProperties: false
          required: true
      additionalProperties: false
    stories_getViewers_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Viewers count'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    stories_get_V5113_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/stories_feed_item'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group'
            need_upload_screen:
              type: boolean
            next_from:
              type: string
          additionalProperties: false
          required: true
      additionalProperties: false
    stories_get_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Stories count'
              required: true
            items:
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/stories_story'
              required: true
            promo_data:
              $ref: '#/components/schemas/stories_promo_block'
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group'
            need_upload_screen:
              type: boolean
          additionalProperties: false
          required: true
      additionalProperties: false
    stories_save_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/stories_story'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group'
          additionalProperties: false
          required: true
      additionalProperties: false
    stories_upload_response:
      type: object
      properties:
        response:
          type: object
          properties:
            upload_result:
              type: string
              description: 'A string hash that is used in the stories.save method'
          additionalProperties: false
          required: true
      additionalProperties: false
    streaming_getServerUrl_response:
      type: object
      properties:
        response:
          type: object
          properties:
            endpoint:
              type: string
              description: 'Server host'
            key:
              type: string
              description: 'Access key'
          additionalProperties: false
          required: true
      additionalProperties: false
    users_getFollowers_fields_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number of available results'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    users_getFollowers_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total friends number'
              minimum: 0
              required: true
            items:
              type: array
              items:
                type: integer
                description: 'User ID'
                minimum: 1
                entity: owner
                format: int64
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    users_getSubscriptions_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number of available results'
              minimum: 0
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/users_subscriptions_item'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    users_getSubscriptions_response:
      type: object
      properties:
        response:
          type: object
          properties:
            users:
              $ref: '#/components/schemas/users_users_array'
              required: true
            groups:
              $ref: '#/components/schemas/groups_groups_array'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    users_get_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/users_user_full'
          required: true
      additionalProperties: false
    users_search_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number of available results'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    utils_checkLink_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/utils_link_checked'
          required: true
      additionalProperties: false
    utils_getLastShortenedLinks_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number of available results'
              minimum: 0
            items:
              type: array
              items:
                $ref: '#/components/schemas/utils_last_shortened_link'
          additionalProperties: false
          required: true
      additionalProperties: false
    utils_getLinkStats_extended_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/utils_link_stats_extended'
          required: true
      additionalProperties: false
    utils_getLinkStats_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/utils_link_stats'
          required: true
      additionalProperties: false
    utils_getServerTime_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Time as Unixtime'
          required: true
      additionalProperties: false
    utils_getShortLink_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/utils_short_link'
          required: true
      additionalProperties: false
    utils_resolveScreenName_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/utils_domain_resolved'
          required: true
      additionalProperties: false
    video_addAlbum_response:
      type: object
      properties:
        response:
          type: object
          properties:
            album_id:
              type: integer
              description: 'Created album ID'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    video_changeVideoAlbums_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: integer
          required: true
      additionalProperties: false
    video_createComment_response:
      type: object
      properties:
        response:
          type: integer
          description: 'Created comment ID'
          required: true
      additionalProperties: false
    video_getAlbumById_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/video_video_album_full'
          required: true
      additionalProperties: false
    video_getAlbumsByVideo_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
            items:
              type: array
              items:
                $ref: '#/components/schemas/video_video_album_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    video_getAlbumsByVideo_response:
      type: object
      properties:
        response:
          type: array
          items:
            type: integer
            description: 'Album ID'
          required: true
      additionalProperties: false
    video_getAlbums_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/video_video_album_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    video_getAlbums_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/video_video_album'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    video_getComments_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wall_comment'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group'
              required: true
            current_level_count:
              type: integer
              description: 'Count of replies of current level'
            can_post:
              type: boolean
              description: 'Information whether current user can comment the post'
            show_reply_button:
              type: boolean
            groups_can_post:
              type: boolean
              description: 'Information whether groups can comment the post'
            real_offset:
              type: integer
          additionalProperties: false
          required: true
      additionalProperties: false
    video_getComments_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wall_comment'
              required: true
            current_level_count:
              type: integer
              description: 'Count of replies of current level'
            can_post:
              type: boolean
              description: 'Information whether current user can comment the post'
            show_reply_button:
              type: boolean
            groups_can_post:
              type: boolean
              description: 'Information whether groups can comment the post'
            real_offset:
              type: integer
          additionalProperties: false
          required: true
      additionalProperties: false
    video_get_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/video_video_full'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    video_restoreComment_response:
      type: object
      properties:
        response:
          description: 'Returns 1 if request has been processed successfully, 0 if the comment is not found'
          $ref: '#/components/schemas/base_bool_int'
          required: true
      additionalProperties: false
    video_save_response:
      type: object
      properties:
        response:
          $ref: '#/components/schemas/video_save_result'
          required: true
      additionalProperties: false
    video_search_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/video_video_full'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    video_search_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/video_video_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    video_upload_response:
      type: object
      properties:
        response:
          type: object
          properties:
            size:
              type: integer
              description: 'Video size'
            video_id:
              type: integer
              description: 'Video ID'
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_createComment_response:
      type: object
      properties:
        response:
          type: object
          properties:
            comment_id:
              type: integer
              description: 'Created comment ID'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_edit_response:
      type: object
      properties:
        response:
          type: object
          properties:
            post_id:
              type: integer
              description: 'Edited post ID'
              minimum: 0
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_getById_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wallpost_full'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_getById_legacy_response:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/wall_wallpost_full'
          required: true
      additionalProperties: false
    wall_getById_response:
      type: object
      properties:
        response:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wallpost_full'
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_getComment_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wall_comment'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_getComment_response:
      type: object
      properties:
        response:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wall_comment'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_getComments_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wall_comment'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group'
              required: true
            current_level_count:
              type: integer
              description: 'Count of replies of current level'
            can_post:
              type: boolean
              description: 'Information whether current user can comment the post'
            show_reply_button:
              type: boolean
            groups_can_post:
              type: boolean
              description: 'Information whether groups can comment the post'
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_getComments_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wall_comment'
              required: true
            current_level_count:
              type: integer
              description: 'Count of replies of current level'
            can_post:
              type: boolean
              description: 'Information whether current user can comment the post'
            show_reply_button:
              type: boolean
            groups_can_post:
              type: boolean
              description: 'Information whether groups can comment the post'
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_getReposts_response:
      type: object
      properties:
        response:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wallpost_full'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_get_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wallpost_full'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_get_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wallpost_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_postAdsStealth_response:
      type: object
      properties:
        response:
          type: object
          properties:
            post_id:
              type: integer
              description: 'Created post ID'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_post_response:
      type: object
      properties:
        response:
          type: object
          properties:
            post_id:
              type: integer
              description: 'Created post ID'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_repost_response:
      type: object
      properties:
        response:
          type: object
          properties:
            success:
              type: integer
              default: 1
              required: true
            post_id:
              type: integer
              description: 'Created post ID'
              required: true
            reposts_count:
              type: integer
              description: 'Reposts number'
              minimum: 1
              required: true
            wall_repost_count:
              type: integer
              description: 'Reposts to wall number'
              minimum: 0
            mail_repost_count:
              type: integer
              description: 'Reposts to mail number'
              minimum: 0
            likes_count:
              type: integer
              description: 'Reposts number'
              minimum: 0
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_search_extended_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wallpost_full'
              required: true
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/users_user_full'
              required: true
            groups:
              type: array
              items:
                $ref: '#/components/schemas/groups_group_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    wall_search_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            items:
              type: array
              items:
                $ref: '#/components/schemas/wall_wallpost_full'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    widgets_getComments_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            posts:
              type: array
              items:
                $ref: '#/components/schemas/widgets_widget_comment'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
    widgets_getPages_response:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
              description: 'Total number'
              required: true
            pages:
              type: array
              items:
                $ref: '#/components/schemas/widgets_widget_page'
              required: true
          additionalProperties: false
          required: true
      additionalProperties: false
